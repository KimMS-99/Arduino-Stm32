
Test_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004824  08004824  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800482c  0800482c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800482c  0800482c  0000582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004830  08004830  00005830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004834  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  0800489c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800489c  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a3  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c75  00000000  00000000  0001293b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000145b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ad  00000000  00000000  00015bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d61c  00000000  00000000  0002cc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff2a  00000000  00000000  0003a292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca1bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d04  00000000  00000000  000ca200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cdf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047a8 	.word	0x080047a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080047a8 	.word	0x080047a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <delay>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <delay+0x30>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000d9a:	bf00      	nop
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <delay+0x30>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3f9      	bcc.n	8000d9c <delay+0x14>
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000084 	.word	0x20000084
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f1b      	ldrb	r3, [r3, #28]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	f040 8083 	bne.w	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dd2:	4b45      	ldr	r3, [pc, #276]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d11a      	bne.n	8000e10 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000dda:	2100      	movs	r1, #0
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f001 ff17 	bl	8002c10 <HAL_TIM_ReadCapturedValue>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a41      	ldr	r2, [pc, #260]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000de6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000de8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 020a 	bic.w	r2, r2, #10
 8000dfc:	621a      	str	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 0202 	orr.w	r2, r2, #2
 8000e0c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000e0e:	e063      	b.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d15f      	bne.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f001 fef8 	bl	8002c10 <HAL_TIM_ReadCapturedValue>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a33      	ldr	r2, [pc, #204]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e24:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d907      	bls.n	8000e4a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	e00f      	b.n	8000e6a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e4a:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d909      	bls.n	8000e6a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e56:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e64:	33ff      	adds	r3, #255	@ 0xff
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e68:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb48 	bl	8000504 <__aeabi_ui2d>
 8000e74:	a31a      	add	r3, pc, #104	@ (adr r3, 8000ee0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fbbd 	bl	80005f8 <__aeabi_dmul>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8e:	f7ff fcdd 	bl	800084c <__aeabi_ddiv>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fdbf 	bl	8000a1c <__aeabi_d2uiz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020a 	bic.w	r2, r2, #10
 8000eba:	621a      	str	r2, [r3, #32]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a12      	ldr	r2, [r2, #32]
 8000ec6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0202 	bic.w	r2, r2, #2
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	b020c49c 	.word	0xb020c49c
 8000ee4:	3fa16872 	.word	0x3fa16872
 8000ee8:	20000120 	.word	0x20000120
 8000eec:	20000114 	.word	0x20000114
 8000ef0:	20000118 	.word	0x20000118
 8000ef4:	2000011c 	.word	0x2000011c
 8000ef8:	20000121 	.word	0x20000121
 8000efc:	20000084 	.word	0x20000084

08000f00 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <HCSR04_Read+0x34>)
 8000f0a:	f000 fead 	bl	8001c68 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f7ff ff3a 	bl	8000d88 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f14:	2200      	movs	r2, #0
 8000f16:	2120      	movs	r1, #32
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <HCSR04_Read+0x34>)
 8000f1a:	f000 fea5 	bl	8001c68 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HCSR04_Read+0x38>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <HCSR04_Read+0x38>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	60da      	str	r2, [r3, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000084 	.word	0x20000084

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("main() Start!\r\n");
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <main+0x44>)
 8000f42:	f002 fdcf 	bl	8003ae4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fb63 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f821 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f8ff 	bl	8001150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 f8d3 	bl	80010fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f56:	f000 f885 	bl	8001064 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <main+0x48>)
 8000f5e:	f001 fb85 	bl	800266c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8000f62:	f7ff ffcd 	bl	8000f00 <HCSR04_Read>
	 printf("%d cm\r\n",Distance);
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <main+0x4c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <main+0x50>)
 8000f6e:	f002 fd51 	bl	8003a14 <iprintf>
	 HAL_Delay(1000);
 8000f72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f76:	f000 fbbd 	bl	80016f4 <HAL_Delay>
	  HCSR04_Read();
 8000f7a:	bf00      	nop
 8000f7c:	e7f1      	b.n	8000f62 <main+0x26>
 8000f7e:	bf00      	nop
 8000f80:	080047c0 	.word	0x080047c0
 8000f84:	20000084 	.word	0x20000084
 8000f88:	20000121 	.word	0x20000121
 8000f8c:	080047d0 	.word	0x080047d0

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	@ 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fe80 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <SystemClock_Config+0xcc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <SystemClock_Config+0xcc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001000:	2310      	movs	r3, #16
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001004:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001008:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800100a:	2304      	movs	r3, #4
 800100c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800100e:	2304      	movs	r3, #4
 8001010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fe40 	bl	8001c9c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 f915 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f8a2 	bl	800218c <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800104e:	f000 f8ff 	bl	8001250 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	@ 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_TIM3_Init+0x90>)
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_TIM3_Init+0x94>)
 8001084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_TIM3_Init+0x90>)
 8001088:	2259      	movs	r2, #89	@ 0x59
 800108a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_TIM3_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM3_Init+0x90>)
 8001094:	2259      	movs	r2, #89	@ 0x59
 8001096:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_TIM3_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM3_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <MX_TIM3_Init+0x90>)
 80010a6:	f001 fa91 	bl	80025cc <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80010b0:	f000 f8ce 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM3_Init+0x90>)
 80010c2:	f001 fcdd 	bl	8002a80 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80010cc:	f000 f8c0 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM3_Init+0x90>)
 80010de:	f001 ff49 	bl	8002f74 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80010e8:	f000 f8b2 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000084 	.word	0x20000084
 80010f8:	40000400 	.word	0x40000400

080010fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_USART2_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_USART2_UART_Init+0x4c>)
 8001134:	f001 ffa0 	bl	8003078 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f000 f887 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000cc 	.word	0x200000cc
 800114c:	40004400 	.word	0x40004400

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <MX_GPIO_Init+0xd4>)
 80011dc:	f000 fd44 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_GPIO_Init+0xd8>)
 80011f8:	f000 fbb2 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_GPIO_Init+0xd4>)
 8001214:	f000 fba4 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	@ 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020800 	.word	0x40020800

0800122c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001234:	1d39      	adds	r1, r7, #4
 8001236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123a:	2201      	movs	r2, #1
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <__io_putchar+0x20>)
 800123e:	f001 ff6b 	bl	8003118 <HAL_UART_Transmit>

  return ch;
 8001242:	687b      	ldr	r3, [r7, #4]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000cc 	.word	0x200000cc

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <HAL_MspInit+0x4c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129a:	2007      	movs	r0, #7
 800129c:	f000 fb1e 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_TIM_Base_MspInit+0x94>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d133      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_TIM_Base_MspInit+0x98>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001306:	2340      	movs	r3, #64	@ 0x40
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001316:	2302      	movs	r3, #2
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <HAL_TIM_Base_MspInit+0x9c>)
 8001322:	f000 fb1d 	bl	8001960 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201d      	movs	r0, #29
 800132c:	f000 fae1 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001330:	201d      	movs	r0, #29
 8001332:	f000 fafa 	bl	800192a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40000400 	.word	0x40000400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12b      	bne.n	80013c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a6:	230c      	movs	r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b6:	2307      	movs	r3, #7
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0x8c>)
 80013c2:	f000 facd 	bl	8001960 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f93f 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM3_IRQHandler+0x10>)
 8001442:	f001 fa2d 	bl	80028a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000084 	.word	0x20000084

08001450 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fec1 	bl	800122c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
  }
  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ea:	605a      	str	r2, [r3, #4]
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f002 fbf0 	bl	8003d40 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20020000 	.word	0x20020000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000124 	.word	0x20000124
 8001594:	20000278 	.word	0x20000278

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f002 fbaf 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fca5 	bl	8000f3c <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001600:	08004834 	.word	0x08004834
  ldr r2, =_sbss
 8001604:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001608:	20000278 	.word	0x20000278

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f94f 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fe0a 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f967 	bl	8001946 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f92f 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000008 	.word	0x20000008
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000128 	.word	0x20000128

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000128 	.word	0x20000128

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	@ (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e159      	b.n	8001c30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 8148 	bne.w	8001c2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d005      	beq.n	80019b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d130      	bne.n	8001a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 0201 	and.w	r2, r3, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d017      	beq.n	8001a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d123      	bne.n	8001aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	69b9      	ldr	r1, [r7, #24]
 8001aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0203 	and.w	r2, r3, #3
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a2 	beq.w	8001c2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b57      	ldr	r3, [pc, #348]	@ (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a56      	ldr	r2, [pc, #344]	@ (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b54      	ldr	r3, [pc, #336]	@ (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b02:	4a52      	ldr	r2, [pc, #328]	@ (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x202>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a48      	ldr	r2, [pc, #288]	@ (8001c54 <HAL_GPIO_Init+0x2f4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x1fe>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a47      	ldr	r2, [pc, #284]	@ (8001c58 <HAL_GPIO_Init+0x2f8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x1fa>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a46      	ldr	r2, [pc, #280]	@ (8001c5c <HAL_GPIO_Init+0x2fc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x1f6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a45      	ldr	r2, [pc, #276]	@ (8001c60 <HAL_GPIO_Init+0x300>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x1f2>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	@ (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b38      	ldr	r3, [pc, #224]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a24      	ldr	r2, [pc, #144]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c24:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f aea2 	bls.w	800197c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e267      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e242      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fcc2 	bl	80016dc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fcbe 	bl	80016dc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e207      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fcae 	bl	80016dc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fcaa 	bl	80016dc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f3      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4937      	ldr	r1, [pc, #220]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fc63 	bl	80016dc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc5f 	bl	80016dc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a8      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4925      	ldr	r1, [pc, #148]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc42 	bl	80016dc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc3e 	bl	80016dc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e187      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc22 	bl	80016dc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc1e 	bl	80016dc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e167      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fc0b 	bl	80016dc <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc07 	bl	80016dc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d907      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e150      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ea      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a73      	ldr	r2, [pc, #460]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbc7 	bl	80016dc <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fbc3 	bl	80016dc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
 8001f78:	4b64      	ldr	r3, [pc, #400]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x30c>
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a54      	ldr	r2, [pc, #336]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fb88 	bl	80016dc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fb84 	bl	80016dc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0cb      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ee      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fb72 	bl	80016dc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fb6e 	bl	80016dc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0b5      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a1 	beq.w	800217c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203a:	4b34      	ldr	r3, [pc, #208]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d05c      	beq.n	8002100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d141      	bne.n	80020d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fb42 	bl	80016dc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fb3e 	bl	80016dc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fb17 	bl	80016dc <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fb13 	bl	80016dc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e05c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x416>
 80020d0:	e054      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb00 	bl	80016dc <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fafc 	bl	80016dc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7ff fa2e 	bl	80016dc <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff fa2a 	bl	80016dc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f98e 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	080047d8 	.word	0x080047d8
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b094      	sub	sp, #80	@ 0x50
 800235e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002370:	4b79      	ldr	r3, [pc, #484]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d00d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 800237c:	2b08      	cmp	r3, #8
 800237e:	f200 80e1 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x3a>
 800238a:	e0db      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 800238e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002390:	e0db      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002392:	4b73      	ldr	r3, [pc, #460]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x208>)
 8002394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002396:	e0d8      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002398:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	2200      	movs	r2, #0
 80023b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	f04f 0000 	mov.w	r0, #0
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023dc:	0150      	lsls	r0, r2, #5
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4621      	mov	r1, r4
 80023e4:	1a51      	subs	r1, r2, r1
 80023e6:	6139      	str	r1, [r7, #16]
 80023e8:	4629      	mov	r1, r5
 80023ea:	eb63 0301 	sbc.w	r3, r3, r1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023fc:	4659      	mov	r1, fp
 80023fe:	018b      	lsls	r3, r1, #6
 8002400:	4651      	mov	r1, sl
 8002402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002406:	4651      	mov	r1, sl
 8002408:	018a      	lsls	r2, r1, #6
 800240a:	4651      	mov	r1, sl
 800240c:	ebb2 0801 	subs.w	r8, r2, r1
 8002410:	4659      	mov	r1, fp
 8002412:	eb63 0901 	sbc.w	r9, r3, r1
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800242a:	4690      	mov	r8, r2
 800242c:	4699      	mov	r9, r3
 800242e:	4623      	mov	r3, r4
 8002430:	eb18 0303 	adds.w	r3, r8, r3
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	462b      	mov	r3, r5
 8002438:	eb49 0303 	adc.w	r3, r9, r3
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800244a:	4629      	mov	r1, r5
 800244c:	024b      	lsls	r3, r1, #9
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002454:	4621      	mov	r1, r4
 8002456:	024a      	lsls	r2, r1, #9
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245e:	2200      	movs	r2, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002468:	f7fe faf8 	bl	8000a5c <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002474:	e058      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	4618      	mov	r0, r3
 8002480:	4611      	mov	r1, r2
 8002482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
 800248c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0159      	lsls	r1, r3, #5
 800249e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a2:	0150      	lsls	r0, r2, #5
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4641      	mov	r1, r8
 80024aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024c8:	ebb2 040a 	subs.w	r4, r2, sl
 80024cc:	eb63 050b 	sbc.w	r5, r3, fp
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	00eb      	lsls	r3, r5, #3
 80024da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	18e3      	adds	r3, r4, r3
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb45 0303 	adc.w	r3, r5, r3
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002512:	2200      	movs	r2, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	61fa      	str	r2, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	f7fe fa9e 	bl	8000a5c <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800253a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 8002546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800254c:	4618      	mov	r0, r3
 800254e:	3750      	adds	r7, #80	@ 0x50
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff0 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	080047e8 	.word	0x080047e8

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffdc 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0b5b      	lsrs	r3, r3, #13
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	080047e8 	.word	0x080047e8

080025cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e041      	b.n	8002662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fe5a 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 fb6c 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_TIM_IC_Start_IT+0x1e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002686:	b2db      	uxtb	r3, r3
 8002688:	e013      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d104      	bne.n	800269a <HAL_TIM_IC_Start_IT+0x2e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e00b      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d104      	bne.n	80026aa <HAL_TIM_IC_Start_IT+0x3e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e003      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_TIM_IC_Start_IT+0x58>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e013      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d104      	bne.n	80026d4 <HAL_TIM_IC_Start_IT+0x68>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e00b      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d104      	bne.n	80026e4 <HAL_TIM_IC_Start_IT+0x78>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e003      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ee:	7bbb      	ldrb	r3, [r7, #14]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026f4:	7b7b      	ldrb	r3, [r7, #13]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0c2      	b.n	8002884 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_IT+0xa2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800270c:	e013      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0xb2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800271c:	e00b      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xc2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800272c:	e003      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <HAL_TIM_IC_Start_IT+0xda>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002744:	e013      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d104      	bne.n	8002756 <HAL_TIM_IC_Start_IT+0xea>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002754:	e00b      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d104      	bne.n	8002766 <HAL_TIM_IC_Start_IT+0xfa>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002764:	e003      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d841      	bhi.n	80027f8 <HAL_TIM_IC_Start_IT+0x18c>
 8002774:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <HAL_TIM_IC_Start_IT+0x110>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027f9 	.word	0x080027f9
 8002784:	080027f9 	.word	0x080027f9
 8002788:	080027f9 	.word	0x080027f9
 800278c:	080027c3 	.word	0x080027c3
 8002790:	080027f9 	.word	0x080027f9
 8002794:	080027f9 	.word	0x080027f9
 8002798:	080027f9 	.word	0x080027f9
 800279c:	080027d5 	.word	0x080027d5
 80027a0:	080027f9 	.word	0x080027f9
 80027a4:	080027f9 	.word	0x080027f9
 80027a8:	080027f9 	.word	0x080027f9
 80027ac:	080027e7 	.word	0x080027e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0202 	orr.w	r2, r2, #2
 80027be:	60da      	str	r2, [r3, #12]
      break;
 80027c0:	e01d      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0204 	orr.w	r2, r2, #4
 80027d0:	60da      	str	r2, [r3, #12]
      break;
 80027d2:	e014      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0208 	orr.w	r2, r2, #8
 80027e2:	60da      	str	r2, [r3, #12]
      break;
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0210 	orr.w	r2, r2, #16
 80027f4:	60da      	str	r2, [r3, #12]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d13e      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fb8b 	bl	8002f28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1d      	ldr	r2, [pc, #116]	@ (800288c <HAL_TIM_IC_Start_IT+0x220>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002824:	d013      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_TIM_IC_Start_IT+0x224>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_TIM_IC_Start_IT+0x228>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <HAL_TIM_IC_Start_IT+0x22c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <HAL_TIM_IC_Start_IT+0x230>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d010      	beq.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e007      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010000 	.word	0x40010000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40014000 	.word	0x40014000

080028a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fa68 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9da 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9e1 	bl	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0204 	mvn.w	r2, #4
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fa42 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9b4 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f9bb 	bl	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0208 	mvn.w	r2, #8
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fa1c 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f98e 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f995 	bl	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0210 	mvn.w	r2, #16
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2208      	movs	r2, #8
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe f9f6 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f968 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f96f 	bl	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0201 	mvn.w	r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f946 	bl	8002c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb1a 	bl	8003064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f940 	bl	8002cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0220 	mvn.w	r2, #32
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 faec 	bl	8003050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e0b4      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x186>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad4:	d03e      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0xd4>
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ada:	f200 8087 	bhi.w	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x172>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aea:	d87f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b70      	cmp	r3, #112	@ 0x70
 8002aee:	d01a      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0xa6>
 8002af0:	2b70      	cmp	r3, #112	@ 0x70
 8002af2:	d87b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b60      	cmp	r3, #96	@ 0x60
 8002af6:	d050      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x11a>
 8002af8:	2b60      	cmp	r3, #96	@ 0x60
 8002afa:	d877      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b50      	cmp	r3, #80	@ 0x50
 8002afe:	d03c      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0xfa>
 8002b00:	2b50      	cmp	r3, #80	@ 0x50
 8002b02:	d873      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	d058      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x13a>
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	d86f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b30      	cmp	r3, #48	@ 0x30
 8002b0e:	d064      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	2b30      	cmp	r3, #48	@ 0x30
 8002b12:	d86b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d060      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d867      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d05c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d05a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	e062      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b36:	f000 f9d7 	bl	8002ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	609a      	str	r2, [r3, #8]
      break;
 8002b52:	e04f      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b64:	f000 f9c0 	bl	8002ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b76:	609a      	str	r2, [r3, #8]
      break;
 8002b78:	e03c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b86:	461a      	mov	r2, r3
 8002b88:	f000 f934 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2150      	movs	r1, #80	@ 0x50
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f98d 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002b98:	e02c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f000 f953 	bl	8002e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2160      	movs	r1, #96	@ 0x60
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f97d 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e01c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 f914 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2140      	movs	r1, #64	@ 0x40
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f96d 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f000 f964 	bl	8002eb2 <TIM_ITRx_SetConfig>
      break;
 8002bea:	e003      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d831      	bhi.n	8002c88 <HAL_TIM_ReadCapturedValue+0x78>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002c89 	.word	0x08002c89
 8002c34:	08002c89 	.word	0x08002c89
 8002c38:	08002c89 	.word	0x08002c89
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c89 	.word	0x08002c89
 8002c44:	08002c89 	.word	0x08002c89
 8002c48:	08002c89 	.word	0x08002c89
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c89 	.word	0x08002c89
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002c89 	.word	0x08002c89
 8002c5c:	08002c7f 	.word	0x08002c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	60fb      	str	r3, [r7, #12]

      break;
 8002c68:	e00f      	b.n	8002c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	60fb      	str	r3, [r7, #12]

      break;
 8002c72:	e00a      	b.n	8002c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7a:	60fb      	str	r3, [r7, #12]

      break;
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	60fb      	str	r3, [r7, #12]

      break;
 8002c86:	e000      	b.n	8002c8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002c88:	bf00      	nop
  }

  return tmpreg;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a37      	ldr	r2, [pc, #220]	@ (8002dd8 <TIM_Base_SetConfig+0xf0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00f      	beq.n	8002d20 <TIM_Base_SetConfig+0x38>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d06:	d00b      	beq.n	8002d20 <TIM_Base_SetConfig+0x38>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <TIM_Base_SetConfig+0xf4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_Base_SetConfig+0x38>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <TIM_Base_SetConfig+0xf8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0x38>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <TIM_Base_SetConfig+0xfc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <TIM_Base_SetConfig+0xf0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01b      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d40:	d017      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a25      	ldr	r2, [pc, #148]	@ (8002ddc <TIM_Base_SetConfig+0xf4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <TIM_Base_SetConfig+0xf8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00f      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a23      	ldr	r2, [pc, #140]	@ (8002de4 <TIM_Base_SetConfig+0xfc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <TIM_Base_SetConfig+0x100>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <TIM_Base_SetConfig+0x104>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x8a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <TIM_Base_SetConfig+0x108>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <TIM_Base_SetConfig+0xf0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d103      	bne.n	8002db2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800

08002df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 030a 	bic.w	r3, r3, #10
 8002e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f023 0210 	bic.w	r2, r3, #16
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	031b      	lsls	r3, r3, #12
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f043 0307 	orr.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e050      	b.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1c      	ldr	r2, [pc, #112]	@ (800303c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd8:	d013      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10c      	bne.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4313      	orrs	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e042      	b.n	8003110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f954 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f973 	bl	80033a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b20      	cmp	r3, #32
 8003136:	d175      	bne.n	8003224 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_UART_Transmit+0x2c>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e06e      	b.n	8003226 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2221      	movs	r2, #33	@ 0x21
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003156:	f7fe fac1 	bl	80016dc <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003170:	d108      	bne.n	8003184 <HAL_UART_Transmit+0x6c>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	e003      	b.n	800318c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800318c:	e02e      	b.n	80031ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f848 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e03a      	b.n	8003226 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3302      	adds	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e007      	b.n	80031de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1cb      	bne.n	800318e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	@ 0x40
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f814 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e006      	b.n	8003226 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323e:	e03b      	b.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d037      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe fa48 	bl	80016dc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <UART_WaitOnFlagUntilTimeout+0x30>
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e03a      	b.n	80032d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b80      	cmp	r3, #128	@ 0x80
 8003274:	d020      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d01d      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d116      	bne.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f81d 	bl	80032e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2208      	movs	r2, #8
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e00f      	b.n	80032d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d0b4      	beq.n	8003240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b095      	sub	sp, #84	@ 0x54
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003308:	643a      	str	r2, [r7, #64]	@ 0x40
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800330e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3314      	adds	r3, #20
 8003322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	61fb      	str	r3, [r7, #28]
   return(result);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800333c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	d119      	bne.n	800338c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	60bb      	str	r3, [r7, #8]
   return(result);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 0310 	bic.w	r3, r3, #16
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003378:	61ba      	str	r2, [r7, #24]
 800337a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6979      	ldr	r1, [r7, #20]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	613b      	str	r3, [r7, #16]
   return(result);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800339a:	bf00      	nop
 800339c:	3754      	adds	r7, #84	@ 0x54
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b0c0      	sub	sp, #256	@ 0x100
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	68d9      	ldr	r1, [r3, #12]
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	ea40 0301 	orr.w	r3, r0, r1
 80033d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003400:	f021 010c 	bic.w	r1, r1, #12
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800340e:	430b      	orrs	r3, r1
 8003410:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	6999      	ldr	r1, [r3, #24]
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	ea40 0301 	orr.w	r3, r0, r1
 800342e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b8f      	ldr	r3, [pc, #572]	@ (8003674 <UART_SetConfig+0x2cc>)
 8003438:	429a      	cmp	r2, r3
 800343a:	d005      	beq.n	8003448 <UART_SetConfig+0xa0>
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b8d      	ldr	r3, [pc, #564]	@ (8003678 <UART_SetConfig+0x2d0>)
 8003444:	429a      	cmp	r2, r3
 8003446:	d104      	bne.n	8003452 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7ff f8ac 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 800344c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003450:	e003      	b.n	800345a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7ff f893 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8003456:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003464:	f040 810c 	bne.w	8003680 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003472:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003476:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800347a:	4622      	mov	r2, r4
 800347c:	462b      	mov	r3, r5
 800347e:	1891      	adds	r1, r2, r2
 8003480:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003482:	415b      	adcs	r3, r3
 8003484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003486:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800348a:	4621      	mov	r1, r4
 800348c:	eb12 0801 	adds.w	r8, r2, r1
 8003490:	4629      	mov	r1, r5
 8003492:	eb43 0901 	adc.w	r9, r3, r1
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034aa:	4690      	mov	r8, r2
 80034ac:	4699      	mov	r9, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	eb18 0303 	adds.w	r3, r8, r3
 80034b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034b8:	462b      	mov	r3, r5
 80034ba:	eb49 0303 	adc.w	r3, r9, r3
 80034be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034d6:	460b      	mov	r3, r1
 80034d8:	18db      	adds	r3, r3, r3
 80034da:	653b      	str	r3, [r7, #80]	@ 0x50
 80034dc:	4613      	mov	r3, r2
 80034de:	eb42 0303 	adc.w	r3, r2, r3
 80034e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80034e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034ec:	f7fd fab6 	bl	8000a5c <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4b61      	ldr	r3, [pc, #388]	@ (800367c <UART_SetConfig+0x2d4>)
 80034f6:	fba3 2302 	umull	r2, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	011c      	lsls	r4, r3, #4
 80034fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003508:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800350c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	1891      	adds	r1, r2, r2
 8003516:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003518:	415b      	adcs	r3, r3
 800351a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800351c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003520:	4641      	mov	r1, r8
 8003522:	eb12 0a01 	adds.w	sl, r2, r1
 8003526:	4649      	mov	r1, r9
 8003528:	eb43 0b01 	adc.w	fp, r3, r1
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003538:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800353c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003540:	4692      	mov	sl, r2
 8003542:	469b      	mov	fp, r3
 8003544:	4643      	mov	r3, r8
 8003546:	eb1a 0303 	adds.w	r3, sl, r3
 800354a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800354e:	464b      	mov	r3, r9
 8003550:	eb4b 0303 	adc.w	r3, fp, r3
 8003554:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003564:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003568:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800356c:	460b      	mov	r3, r1
 800356e:	18db      	adds	r3, r3, r3
 8003570:	643b      	str	r3, [r7, #64]	@ 0x40
 8003572:	4613      	mov	r3, r2
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	647b      	str	r3, [r7, #68]	@ 0x44
 800357a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800357e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003582:	f7fd fa6b 	bl	8000a5c <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4611      	mov	r1, r2
 800358c:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <UART_SetConfig+0x2d4>)
 800358e:	fba3 2301 	umull	r2, r3, r3, r1
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2264      	movs	r2, #100	@ 0x64
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	1acb      	subs	r3, r1, r3
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035a2:	4b36      	ldr	r3, [pc, #216]	@ (800367c <UART_SetConfig+0x2d4>)
 80035a4:	fba3 2302 	umull	r2, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035b0:	441c      	add	r4, r3
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035c4:	4642      	mov	r2, r8
 80035c6:	464b      	mov	r3, r9
 80035c8:	1891      	adds	r1, r2, r2
 80035ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035cc:	415b      	adcs	r3, r3
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035d4:	4641      	mov	r1, r8
 80035d6:	1851      	adds	r1, r2, r1
 80035d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80035da:	4649      	mov	r1, r9
 80035dc:	414b      	adcs	r3, r1
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035ec:	4659      	mov	r1, fp
 80035ee:	00cb      	lsls	r3, r1, #3
 80035f0:	4651      	mov	r1, sl
 80035f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f6:	4651      	mov	r1, sl
 80035f8:	00ca      	lsls	r2, r1, #3
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	4642      	mov	r2, r8
 8003602:	189b      	adds	r3, r3, r2
 8003604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003608:	464b      	mov	r3, r9
 800360a:	460a      	mov	r2, r1
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003620:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003624:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003628:	460b      	mov	r3, r1
 800362a:	18db      	adds	r3, r3, r3
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800362e:	4613      	mov	r3, r2
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800363a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800363e:	f7fd fa0d 	bl	8000a5c <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <UART_SetConfig+0x2d4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	@ 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	3332      	adds	r3, #50	@ 0x32
 800365a:	4a08      	ldr	r2, [pc, #32]	@ (800367c <UART_SetConfig+0x2d4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 0207 	and.w	r2, r3, #7
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4422      	add	r2, r4
 800366e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003670:	e106      	b.n	8003880 <UART_SetConfig+0x4d8>
 8003672:	bf00      	nop
 8003674:	40011000 	.word	0x40011000
 8003678:	40011400 	.word	0x40011400
 800367c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800368a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800368e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003692:	4642      	mov	r2, r8
 8003694:	464b      	mov	r3, r9
 8003696:	1891      	adds	r1, r2, r2
 8003698:	6239      	str	r1, [r7, #32]
 800369a:	415b      	adcs	r3, r3
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
 800369e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036a2:	4641      	mov	r1, r8
 80036a4:	1854      	adds	r4, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0501 	adc.w	r5, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	00eb      	lsls	r3, r5, #3
 80036b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ba:	00e2      	lsls	r2, r4, #3
 80036bc:	4614      	mov	r4, r2
 80036be:	461d      	mov	r5, r3
 80036c0:	4643      	mov	r3, r8
 80036c2:	18e3      	adds	r3, r4, r3
 80036c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036c8:	464b      	mov	r3, r9
 80036ca:	eb45 0303 	adc.w	r3, r5, r3
 80036ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036ee:	4629      	mov	r1, r5
 80036f0:	008b      	lsls	r3, r1, #2
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f8:	4621      	mov	r1, r4
 80036fa:	008a      	lsls	r2, r1, #2
 80036fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003700:	f7fd f9ac 	bl	8000a5c <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4b60      	ldr	r3, [pc, #384]	@ (800388c <UART_SetConfig+0x4e4>)
 800370a:	fba3 2302 	umull	r2, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	011c      	lsls	r4, r3, #4
 8003712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003716:	2200      	movs	r2, #0
 8003718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800371c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003720:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003724:	4642      	mov	r2, r8
 8003726:	464b      	mov	r3, r9
 8003728:	1891      	adds	r1, r2, r2
 800372a:	61b9      	str	r1, [r7, #24]
 800372c:	415b      	adcs	r3, r3
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003734:	4641      	mov	r1, r8
 8003736:	1851      	adds	r1, r2, r1
 8003738:	6139      	str	r1, [r7, #16]
 800373a:	4649      	mov	r1, r9
 800373c:	414b      	adcs	r3, r1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800374c:	4659      	mov	r1, fp
 800374e:	00cb      	lsls	r3, r1, #3
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003756:	4651      	mov	r1, sl
 8003758:	00ca      	lsls	r2, r1, #3
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	4603      	mov	r3, r0
 8003760:	4642      	mov	r2, r8
 8003762:	189b      	adds	r3, r3, r2
 8003764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003768:	464b      	mov	r3, r9
 800376a:	460a      	mov	r2, r1
 800376c:	eb42 0303 	adc.w	r3, r2, r3
 8003770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800377e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800378c:	4649      	mov	r1, r9
 800378e:	008b      	lsls	r3, r1, #2
 8003790:	4641      	mov	r1, r8
 8003792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003796:	4641      	mov	r1, r8
 8003798:	008a      	lsls	r2, r1, #2
 800379a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800379e:	f7fd f95d 	bl	8000a5c <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	4b38      	ldr	r3, [pc, #224]	@ (800388c <UART_SetConfig+0x4e4>)
 80037aa:	fba3 2301 	umull	r2, r3, r3, r1
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2264      	movs	r2, #100	@ 0x64
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	1acb      	subs	r3, r1, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	@ 0x32
 80037bc:	4a33      	ldr	r2, [pc, #204]	@ (800388c <UART_SetConfig+0x4e4>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c8:	441c      	add	r4, r3
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80037d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	1891      	adds	r1, r2, r2
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	415b      	adcs	r3, r3
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e8:	4641      	mov	r1, r8
 80037ea:	1851      	adds	r1, r2, r1
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	4649      	mov	r1, r9
 80037f0:	414b      	adcs	r3, r1
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003800:	4659      	mov	r1, fp
 8003802:	00cb      	lsls	r3, r1, #3
 8003804:	4651      	mov	r1, sl
 8003806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380a:	4651      	mov	r1, sl
 800380c:	00ca      	lsls	r2, r1, #3
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	4603      	mov	r3, r0
 8003814:	4642      	mov	r2, r8
 8003816:	189b      	adds	r3, r3, r2
 8003818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800381a:	464b      	mov	r3, r9
 800381c:	460a      	mov	r2, r1
 800381e:	eb42 0303 	adc.w	r3, r2, r3
 8003822:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	663b      	str	r3, [r7, #96]	@ 0x60
 800382e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800383c:	4649      	mov	r1, r9
 800383e:	008b      	lsls	r3, r1, #2
 8003840:	4641      	mov	r1, r8
 8003842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003846:	4641      	mov	r1, r8
 8003848:	008a      	lsls	r2, r1, #2
 800384a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800384e:	f7fd f905 	bl	8000a5c <__aeabi_uldivmod>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <UART_SetConfig+0x4e4>)
 8003858:	fba3 1302 	umull	r1, r3, r3, r2
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	2164      	movs	r1, #100	@ 0x64
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	3332      	adds	r3, #50	@ 0x32
 800386a:	4a08      	ldr	r2, [pc, #32]	@ (800388c <UART_SetConfig+0x4e4>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4422      	add	r2, r4
 800387e:	609a      	str	r2, [r3, #8]
}
 8003880:	bf00      	nop
 8003882:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003886:	46bd      	mov	sp, r7
 8003888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388c:	51eb851f 	.word	0x51eb851f

08003890 <std>:
 8003890:	2300      	movs	r3, #0
 8003892:	b510      	push	{r4, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	e9c0 3300 	strd	r3, r3, [r0]
 800389a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800389e:	6083      	str	r3, [r0, #8]
 80038a0:	8181      	strh	r1, [r0, #12]
 80038a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80038a4:	81c2      	strh	r2, [r0, #14]
 80038a6:	6183      	str	r3, [r0, #24]
 80038a8:	4619      	mov	r1, r3
 80038aa:	2208      	movs	r2, #8
 80038ac:	305c      	adds	r0, #92	@ 0x5c
 80038ae:	f000 f9f9 	bl	8003ca4 <memset>
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <std+0x58>)
 80038b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <std+0x5c>)
 80038b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <std+0x60>)
 80038bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <std+0x64>)
 80038c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <std+0x68>)
 80038c4:	6224      	str	r4, [r4, #32]
 80038c6:	429c      	cmp	r4, r3
 80038c8:	d006      	beq.n	80038d8 <std+0x48>
 80038ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038ce:	4294      	cmp	r4, r2
 80038d0:	d002      	beq.n	80038d8 <std+0x48>
 80038d2:	33d0      	adds	r3, #208	@ 0xd0
 80038d4:	429c      	cmp	r4, r3
 80038d6:	d105      	bne.n	80038e4 <std+0x54>
 80038d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	f000 ba58 	b.w	8003d94 <__retarget_lock_init_recursive>
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	bf00      	nop
 80038e8:	08003af5 	.word	0x08003af5
 80038ec:	08003b17 	.word	0x08003b17
 80038f0:	08003b4f 	.word	0x08003b4f
 80038f4:	08003b73 	.word	0x08003b73
 80038f8:	2000012c 	.word	0x2000012c

080038fc <stdio_exit_handler>:
 80038fc:	4a02      	ldr	r2, [pc, #8]	@ (8003908 <stdio_exit_handler+0xc>)
 80038fe:	4903      	ldr	r1, [pc, #12]	@ (800390c <stdio_exit_handler+0x10>)
 8003900:	4803      	ldr	r0, [pc, #12]	@ (8003910 <stdio_exit_handler+0x14>)
 8003902:	f000 b869 	b.w	80039d8 <_fwalk_sglue>
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c
 800390c:	08004631 	.word	0x08004631
 8003910:	2000001c 	.word	0x2000001c

08003914 <cleanup_stdio>:
 8003914:	6841      	ldr	r1, [r0, #4]
 8003916:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <cleanup_stdio+0x34>)
 8003918:	4299      	cmp	r1, r3
 800391a:	b510      	push	{r4, lr}
 800391c:	4604      	mov	r4, r0
 800391e:	d001      	beq.n	8003924 <cleanup_stdio+0x10>
 8003920:	f000 fe86 	bl	8004630 <_fflush_r>
 8003924:	68a1      	ldr	r1, [r4, #8]
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <cleanup_stdio+0x38>)
 8003928:	4299      	cmp	r1, r3
 800392a:	d002      	beq.n	8003932 <cleanup_stdio+0x1e>
 800392c:	4620      	mov	r0, r4
 800392e:	f000 fe7f 	bl	8004630 <_fflush_r>
 8003932:	68e1      	ldr	r1, [r4, #12]
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <cleanup_stdio+0x3c>)
 8003936:	4299      	cmp	r1, r3
 8003938:	d004      	beq.n	8003944 <cleanup_stdio+0x30>
 800393a:	4620      	mov	r0, r4
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003940:	f000 be76 	b.w	8004630 <_fflush_r>
 8003944:	bd10      	pop	{r4, pc}
 8003946:	bf00      	nop
 8003948:	2000012c 	.word	0x2000012c
 800394c:	20000194 	.word	0x20000194
 8003950:	200001fc 	.word	0x200001fc

08003954 <global_stdio_init.part.0>:
 8003954:	b510      	push	{r4, lr}
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <global_stdio_init.part.0+0x30>)
 8003958:	4c0b      	ldr	r4, [pc, #44]	@ (8003988 <global_stdio_init.part.0+0x34>)
 800395a:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <global_stdio_init.part.0+0x38>)
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	4620      	mov	r0, r4
 8003960:	2200      	movs	r2, #0
 8003962:	2104      	movs	r1, #4
 8003964:	f7ff ff94 	bl	8003890 <std>
 8003968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800396c:	2201      	movs	r2, #1
 800396e:	2109      	movs	r1, #9
 8003970:	f7ff ff8e 	bl	8003890 <std>
 8003974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003978:	2202      	movs	r2, #2
 800397a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397e:	2112      	movs	r1, #18
 8003980:	f7ff bf86 	b.w	8003890 <std>
 8003984:	20000264 	.word	0x20000264
 8003988:	2000012c 	.word	0x2000012c
 800398c:	080038fd 	.word	0x080038fd

08003990 <__sfp_lock_acquire>:
 8003990:	4801      	ldr	r0, [pc, #4]	@ (8003998 <__sfp_lock_acquire+0x8>)
 8003992:	f000 ba00 	b.w	8003d96 <__retarget_lock_acquire_recursive>
 8003996:	bf00      	nop
 8003998:	2000026d 	.word	0x2000026d

0800399c <__sfp_lock_release>:
 800399c:	4801      	ldr	r0, [pc, #4]	@ (80039a4 <__sfp_lock_release+0x8>)
 800399e:	f000 b9fb 	b.w	8003d98 <__retarget_lock_release_recursive>
 80039a2:	bf00      	nop
 80039a4:	2000026d 	.word	0x2000026d

080039a8 <__sinit>:
 80039a8:	b510      	push	{r4, lr}
 80039aa:	4604      	mov	r4, r0
 80039ac:	f7ff fff0 	bl	8003990 <__sfp_lock_acquire>
 80039b0:	6a23      	ldr	r3, [r4, #32]
 80039b2:	b11b      	cbz	r3, 80039bc <__sinit+0x14>
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b8:	f7ff bff0 	b.w	800399c <__sfp_lock_release>
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <__sinit+0x28>)
 80039be:	6223      	str	r3, [r4, #32]
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <__sinit+0x2c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f5      	bne.n	80039b4 <__sinit+0xc>
 80039c8:	f7ff ffc4 	bl	8003954 <global_stdio_init.part.0>
 80039cc:	e7f2      	b.n	80039b4 <__sinit+0xc>
 80039ce:	bf00      	nop
 80039d0:	08003915 	.word	0x08003915
 80039d4:	20000264 	.word	0x20000264

080039d8 <_fwalk_sglue>:
 80039d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039dc:	4607      	mov	r7, r0
 80039de:	4688      	mov	r8, r1
 80039e0:	4614      	mov	r4, r2
 80039e2:	2600      	movs	r6, #0
 80039e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039e8:	f1b9 0901 	subs.w	r9, r9, #1
 80039ec:	d505      	bpl.n	80039fa <_fwalk_sglue+0x22>
 80039ee:	6824      	ldr	r4, [r4, #0]
 80039f0:	2c00      	cmp	r4, #0
 80039f2:	d1f7      	bne.n	80039e4 <_fwalk_sglue+0xc>
 80039f4:	4630      	mov	r0, r6
 80039f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fa:	89ab      	ldrh	r3, [r5, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d907      	bls.n	8003a10 <_fwalk_sglue+0x38>
 8003a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a04:	3301      	adds	r3, #1
 8003a06:	d003      	beq.n	8003a10 <_fwalk_sglue+0x38>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	47c0      	blx	r8
 8003a0e:	4306      	orrs	r6, r0
 8003a10:	3568      	adds	r5, #104	@ 0x68
 8003a12:	e7e9      	b.n	80039e8 <_fwalk_sglue+0x10>

08003a14 <iprintf>:
 8003a14:	b40f      	push	{r0, r1, r2, r3}
 8003a16:	b507      	push	{r0, r1, r2, lr}
 8003a18:	4906      	ldr	r1, [pc, #24]	@ (8003a34 <iprintf+0x20>)
 8003a1a:	ab04      	add	r3, sp, #16
 8003a1c:	6808      	ldr	r0, [r1, #0]
 8003a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a22:	6881      	ldr	r1, [r0, #8]
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	f000 fadb 	bl	8003fe0 <_vfiprintf_r>
 8003a2a:	b003      	add	sp, #12
 8003a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a30:	b004      	add	sp, #16
 8003a32:	4770      	bx	lr
 8003a34:	20000018 	.word	0x20000018

08003a38 <_puts_r>:
 8003a38:	6a03      	ldr	r3, [r0, #32]
 8003a3a:	b570      	push	{r4, r5, r6, lr}
 8003a3c:	6884      	ldr	r4, [r0, #8]
 8003a3e:	4605      	mov	r5, r0
 8003a40:	460e      	mov	r6, r1
 8003a42:	b90b      	cbnz	r3, 8003a48 <_puts_r+0x10>
 8003a44:	f7ff ffb0 	bl	80039a8 <__sinit>
 8003a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d405      	bmi.n	8003a5a <_puts_r+0x22>
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	0598      	lsls	r0, r3, #22
 8003a52:	d402      	bmi.n	8003a5a <_puts_r+0x22>
 8003a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a56:	f000 f99e 	bl	8003d96 <__retarget_lock_acquire_recursive>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	0719      	lsls	r1, r3, #28
 8003a5e:	d502      	bpl.n	8003a66 <_puts_r+0x2e>
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d135      	bne.n	8003ad2 <_puts_r+0x9a>
 8003a66:	4621      	mov	r1, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f8c5 	bl	8003bf8 <__swsetup_r>
 8003a6e:	b380      	cbz	r0, 8003ad2 <_puts_r+0x9a>
 8003a70:	f04f 35ff 	mov.w	r5, #4294967295
 8003a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a76:	07da      	lsls	r2, r3, #31
 8003a78:	d405      	bmi.n	8003a86 <_puts_r+0x4e>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	d402      	bmi.n	8003a86 <_puts_r+0x4e>
 8003a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a82:	f000 f989 	bl	8003d98 <__retarget_lock_release_recursive>
 8003a86:	4628      	mov	r0, r5
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da04      	bge.n	8003a98 <_puts_r+0x60>
 8003a8e:	69a2      	ldr	r2, [r4, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	dc17      	bgt.n	8003ac4 <_puts_r+0x8c>
 8003a94:	290a      	cmp	r1, #10
 8003a96:	d015      	beq.n	8003ac4 <_puts_r+0x8c>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	6022      	str	r2, [r4, #0]
 8003a9e:	7019      	strb	r1, [r3, #0]
 8003aa0:	68a3      	ldr	r3, [r4, #8]
 8003aa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60a3      	str	r3, [r4, #8]
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	d1ed      	bne.n	8003a8a <_puts_r+0x52>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da11      	bge.n	8003ad6 <_puts_r+0x9e>
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	210a      	movs	r1, #10
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 f85f 	bl	8003b7a <__swbuf_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0d7      	beq.n	8003a70 <_puts_r+0x38>
 8003ac0:	250a      	movs	r5, #10
 8003ac2:	e7d7      	b.n	8003a74 <_puts_r+0x3c>
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 f857 	bl	8003b7a <__swbuf_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	d1e7      	bne.n	8003aa0 <_puts_r+0x68>
 8003ad0:	e7ce      	b.n	8003a70 <_puts_r+0x38>
 8003ad2:	3e01      	subs	r6, #1
 8003ad4:	e7e4      	b.n	8003aa0 <_puts_r+0x68>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	6022      	str	r2, [r4, #0]
 8003adc:	220a      	movs	r2, #10
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e7ee      	b.n	8003ac0 <_puts_r+0x88>
	...

08003ae4 <puts>:
 8003ae4:	4b02      	ldr	r3, [pc, #8]	@ (8003af0 <puts+0xc>)
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f7ff bfa5 	b.w	8003a38 <_puts_r>
 8003aee:	bf00      	nop
 8003af0:	20000018 	.word	0x20000018

08003af4 <__sread>:
 8003af4:	b510      	push	{r4, lr}
 8003af6:	460c      	mov	r4, r1
 8003af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afc:	f000 f8fc 	bl	8003cf8 <_read_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	bfab      	itete	ge
 8003b04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b06:	89a3      	ldrhlt	r3, [r4, #12]
 8003b08:	181b      	addge	r3, r3, r0
 8003b0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b0e:	bfac      	ite	ge
 8003b10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b12:	81a3      	strhlt	r3, [r4, #12]
 8003b14:	bd10      	pop	{r4, pc}

08003b16 <__swrite>:
 8003b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1a:	461f      	mov	r7, r3
 8003b1c:	898b      	ldrh	r3, [r1, #12]
 8003b1e:	05db      	lsls	r3, r3, #23
 8003b20:	4605      	mov	r5, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	4616      	mov	r6, r2
 8003b26:	d505      	bpl.n	8003b34 <__swrite+0x1e>
 8003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f000 f8d0 	bl	8003cd4 <_lseek_r>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	4632      	mov	r2, r6
 8003b42:	463b      	mov	r3, r7
 8003b44:	4628      	mov	r0, r5
 8003b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4a:	f000 b8e7 	b.w	8003d1c <_write_r>

08003b4e <__sseek>:
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	460c      	mov	r4, r1
 8003b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b56:	f000 f8bd 	bl	8003cd4 <_lseek_r>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	bf15      	itete	ne
 8003b60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b6a:	81a3      	strheq	r3, [r4, #12]
 8003b6c:	bf18      	it	ne
 8003b6e:	81a3      	strhne	r3, [r4, #12]
 8003b70:	bd10      	pop	{r4, pc}

08003b72 <__sclose>:
 8003b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b76:	f000 b89d 	b.w	8003cb4 <_close_r>

08003b7a <__swbuf_r>:
 8003b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7c:	460e      	mov	r6, r1
 8003b7e:	4614      	mov	r4, r2
 8003b80:	4605      	mov	r5, r0
 8003b82:	b118      	cbz	r0, 8003b8c <__swbuf_r+0x12>
 8003b84:	6a03      	ldr	r3, [r0, #32]
 8003b86:	b90b      	cbnz	r3, 8003b8c <__swbuf_r+0x12>
 8003b88:	f7ff ff0e 	bl	80039a8 <__sinit>
 8003b8c:	69a3      	ldr	r3, [r4, #24]
 8003b8e:	60a3      	str	r3, [r4, #8]
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	071a      	lsls	r2, r3, #28
 8003b94:	d501      	bpl.n	8003b9a <__swbuf_r+0x20>
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	b943      	cbnz	r3, 8003bac <__swbuf_r+0x32>
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f000 f82b 	bl	8003bf8 <__swsetup_r>
 8003ba2:	b118      	cbz	r0, 8003bac <__swbuf_r+0x32>
 8003ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ba8:	4638      	mov	r0, r7
 8003baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	6922      	ldr	r2, [r4, #16]
 8003bb0:	1a98      	subs	r0, r3, r2
 8003bb2:	6963      	ldr	r3, [r4, #20]
 8003bb4:	b2f6      	uxtb	r6, r6
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	4637      	mov	r7, r6
 8003bba:	dc05      	bgt.n	8003bc8 <__swbuf_r+0x4e>
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 fd36 	bl	8004630 <_fflush_r>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d1ed      	bne.n	8003ba4 <__swbuf_r+0x2a>
 8003bc8:	68a3      	ldr	r3, [r4, #8]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	60a3      	str	r3, [r4, #8]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	701e      	strb	r6, [r3, #0]
 8003bd6:	6962      	ldr	r2, [r4, #20]
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d004      	beq.n	8003be8 <__swbuf_r+0x6e>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	07db      	lsls	r3, r3, #31
 8003be2:	d5e1      	bpl.n	8003ba8 <__swbuf_r+0x2e>
 8003be4:	2e0a      	cmp	r6, #10
 8003be6:	d1df      	bne.n	8003ba8 <__swbuf_r+0x2e>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4628      	mov	r0, r5
 8003bec:	f000 fd20 	bl	8004630 <_fflush_r>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d0d9      	beq.n	8003ba8 <__swbuf_r+0x2e>
 8003bf4:	e7d6      	b.n	8003ba4 <__swbuf_r+0x2a>
	...

08003bf8 <__swsetup_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <__swsetup_r+0xa8>)
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	460c      	mov	r4, r1
 8003c02:	b118      	cbz	r0, 8003c0c <__swsetup_r+0x14>
 8003c04:	6a03      	ldr	r3, [r0, #32]
 8003c06:	b90b      	cbnz	r3, 8003c0c <__swsetup_r+0x14>
 8003c08:	f7ff fece 	bl	80039a8 <__sinit>
 8003c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c10:	0719      	lsls	r1, r3, #28
 8003c12:	d422      	bmi.n	8003c5a <__swsetup_r+0x62>
 8003c14:	06da      	lsls	r2, r3, #27
 8003c16:	d407      	bmi.n	8003c28 <__swsetup_r+0x30>
 8003c18:	2209      	movs	r2, #9
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	e033      	b.n	8003c90 <__swsetup_r+0x98>
 8003c28:	0758      	lsls	r0, r3, #29
 8003c2a:	d512      	bpl.n	8003c52 <__swsetup_r+0x5a>
 8003c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c2e:	b141      	cbz	r1, 8003c42 <__swsetup_r+0x4a>
 8003c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c34:	4299      	cmp	r1, r3
 8003c36:	d002      	beq.n	8003c3e <__swsetup_r+0x46>
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 f8af 	bl	8003d9c <_free_r>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c48:	81a3      	strh	r3, [r4, #12]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	b94b      	cbnz	r3, 8003c72 <__swsetup_r+0x7a>
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c68:	d003      	beq.n	8003c72 <__swsetup_r+0x7a>
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 fd2d 	bl	80046cc <__smakebuf_r>
 8003c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c76:	f013 0201 	ands.w	r2, r3, #1
 8003c7a:	d00a      	beq.n	8003c92 <__swsetup_r+0x9a>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60a2      	str	r2, [r4, #8]
 8003c80:	6962      	ldr	r2, [r4, #20]
 8003c82:	4252      	negs	r2, r2
 8003c84:	61a2      	str	r2, [r4, #24]
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	b942      	cbnz	r2, 8003c9c <__swsetup_r+0xa4>
 8003c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c8e:	d1c5      	bne.n	8003c1c <__swsetup_r+0x24>
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
 8003c92:	0799      	lsls	r1, r3, #30
 8003c94:	bf58      	it	pl
 8003c96:	6962      	ldrpl	r2, [r4, #20]
 8003c98:	60a2      	str	r2, [r4, #8]
 8003c9a:	e7f4      	b.n	8003c86 <__swsetup_r+0x8e>
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7f7      	b.n	8003c90 <__swsetup_r+0x98>
 8003ca0:	20000018 	.word	0x20000018

08003ca4 <memset>:
 8003ca4:	4402      	add	r2, r0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <_close_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d06      	ldr	r5, [pc, #24]	@ (8003cd0 <_close_r+0x1c>)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	f7fd fbff 	bl	80014c2 <_close>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_close_r+0x1a>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_close_r+0x1a>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	20000268 	.word	0x20000268

08003cd4 <_lseek_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	@ (8003cf4 <_lseek_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fd fc14 	bl	8001510 <_lseek>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_lseek_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_lseek_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20000268 	.word	0x20000268

08003cf8 <_read_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d07      	ldr	r5, [pc, #28]	@ (8003d18 <_read_r+0x20>)
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	602a      	str	r2, [r5, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7fd fba2 	bl	8001450 <_read>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_read_r+0x1e>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_read_r+0x1e>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20000268 	.word	0x20000268

08003d1c <_write_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d07      	ldr	r5, [pc, #28]	@ (8003d3c <_write_r+0x20>)
 8003d20:	4604      	mov	r4, r0
 8003d22:	4608      	mov	r0, r1
 8003d24:	4611      	mov	r1, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	602a      	str	r2, [r5, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7fd fbad 	bl	800148a <_write>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_write_r+0x1e>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_write_r+0x1e>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20000268 	.word	0x20000268

08003d40 <__errno>:
 8003d40:	4b01      	ldr	r3, [pc, #4]	@ (8003d48 <__errno+0x8>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000018 	.word	0x20000018

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d84 <__libc_init_array+0x38>)
 8003d50:	4c0d      	ldr	r4, [pc, #52]	@ (8003d88 <__libc_init_array+0x3c>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	2600      	movs	r6, #0
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d8c <__libc_init_array+0x40>)
 8003d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d90 <__libc_init_array+0x44>)
 8003d60:	f000 fd22 	bl	80047a8 <_init>
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	2600      	movs	r6, #0
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	0800482c 	.word	0x0800482c
 8003d88:	0800482c 	.word	0x0800482c
 8003d8c:	0800482c 	.word	0x0800482c
 8003d90:	08004830 	.word	0x08004830

08003d94 <__retarget_lock_init_recursive>:
 8003d94:	4770      	bx	lr

08003d96 <__retarget_lock_acquire_recursive>:
 8003d96:	4770      	bx	lr

08003d98 <__retarget_lock_release_recursive>:
 8003d98:	4770      	bx	lr
	...

08003d9c <_free_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4605      	mov	r5, r0
 8003da0:	2900      	cmp	r1, #0
 8003da2:	d041      	beq.n	8003e28 <_free_r+0x8c>
 8003da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da8:	1f0c      	subs	r4, r1, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bfb8      	it	lt
 8003dae:	18e4      	addlt	r4, r4, r3
 8003db0:	f000 f8e0 	bl	8003f74 <__malloc_lock>
 8003db4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <_free_r+0x90>)
 8003db6:	6813      	ldr	r3, [r2, #0]
 8003db8:	b933      	cbnz	r3, 8003dc8 <_free_r+0x2c>
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	6014      	str	r4, [r2, #0]
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dc4:	f000 b8dc 	b.w	8003f80 <__malloc_unlock>
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	d908      	bls.n	8003dde <_free_r+0x42>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	1821      	adds	r1, r4, r0
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	bf01      	itttt	eq
 8003dd4:	6819      	ldreq	r1, [r3, #0]
 8003dd6:	685b      	ldreq	r3, [r3, #4]
 8003dd8:	1809      	addeq	r1, r1, r0
 8003dda:	6021      	streq	r1, [r4, #0]
 8003ddc:	e7ed      	b.n	8003dba <_free_r+0x1e>
 8003dde:	461a      	mov	r2, r3
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b10b      	cbz	r3, 8003de8 <_free_r+0x4c>
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d9fa      	bls.n	8003dde <_free_r+0x42>
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	1850      	adds	r0, r2, r1
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d10b      	bne.n	8003e08 <_free_r+0x6c>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	4401      	add	r1, r0
 8003df4:	1850      	adds	r0, r2, r1
 8003df6:	4283      	cmp	r3, r0
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	d1e0      	bne.n	8003dbe <_free_r+0x22>
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	6053      	str	r3, [r2, #4]
 8003e02:	4408      	add	r0, r1
 8003e04:	6010      	str	r0, [r2, #0]
 8003e06:	e7da      	b.n	8003dbe <_free_r+0x22>
 8003e08:	d902      	bls.n	8003e10 <_free_r+0x74>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	e7d6      	b.n	8003dbe <_free_r+0x22>
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	1821      	adds	r1, r4, r0
 8003e14:	428b      	cmp	r3, r1
 8003e16:	bf04      	itt	eq
 8003e18:	6819      	ldreq	r1, [r3, #0]
 8003e1a:	685b      	ldreq	r3, [r3, #4]
 8003e1c:	6063      	str	r3, [r4, #4]
 8003e1e:	bf04      	itt	eq
 8003e20:	1809      	addeq	r1, r1, r0
 8003e22:	6021      	streq	r1, [r4, #0]
 8003e24:	6054      	str	r4, [r2, #4]
 8003e26:	e7ca      	b.n	8003dbe <_free_r+0x22>
 8003e28:	bd38      	pop	{r3, r4, r5, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000274 	.word	0x20000274

08003e30 <sbrk_aligned>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	4e0f      	ldr	r6, [pc, #60]	@ (8003e70 <sbrk_aligned+0x40>)
 8003e34:	460c      	mov	r4, r1
 8003e36:	6831      	ldr	r1, [r6, #0]
 8003e38:	4605      	mov	r5, r0
 8003e3a:	b911      	cbnz	r1, 8003e42 <sbrk_aligned+0x12>
 8003e3c:	f000 fca4 	bl	8004788 <_sbrk_r>
 8003e40:	6030      	str	r0, [r6, #0]
 8003e42:	4621      	mov	r1, r4
 8003e44:	4628      	mov	r0, r5
 8003e46:	f000 fc9f 	bl	8004788 <_sbrk_r>
 8003e4a:	1c43      	adds	r3, r0, #1
 8003e4c:	d103      	bne.n	8003e56 <sbrk_aligned+0x26>
 8003e4e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e52:	4620      	mov	r0, r4
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	1cc4      	adds	r4, r0, #3
 8003e58:	f024 0403 	bic.w	r4, r4, #3
 8003e5c:	42a0      	cmp	r0, r4
 8003e5e:	d0f8      	beq.n	8003e52 <sbrk_aligned+0x22>
 8003e60:	1a21      	subs	r1, r4, r0
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 fc90 	bl	8004788 <_sbrk_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d1f2      	bne.n	8003e52 <sbrk_aligned+0x22>
 8003e6c:	e7ef      	b.n	8003e4e <sbrk_aligned+0x1e>
 8003e6e:	bf00      	nop
 8003e70:	20000270 	.word	0x20000270

08003e74 <_malloc_r>:
 8003e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e78:	1ccd      	adds	r5, r1, #3
 8003e7a:	f025 0503 	bic.w	r5, r5, #3
 8003e7e:	3508      	adds	r5, #8
 8003e80:	2d0c      	cmp	r5, #12
 8003e82:	bf38      	it	cc
 8003e84:	250c      	movcc	r5, #12
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	4606      	mov	r6, r0
 8003e8a:	db01      	blt.n	8003e90 <_malloc_r+0x1c>
 8003e8c:	42a9      	cmp	r1, r5
 8003e8e:	d904      	bls.n	8003e9a <_malloc_r+0x26>
 8003e90:	230c      	movs	r3, #12
 8003e92:	6033      	str	r3, [r6, #0]
 8003e94:	2000      	movs	r0, #0
 8003e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f70 <_malloc_r+0xfc>
 8003e9e:	f000 f869 	bl	8003f74 <__malloc_lock>
 8003ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	bb44      	cbnz	r4, 8003efc <_malloc_r+0x88>
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff ffbf 	bl	8003e30 <sbrk_aligned>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	d158      	bne.n	8003f6a <_malloc_r+0xf6>
 8003eb8:	f8d8 4000 	ldr.w	r4, [r8]
 8003ebc:	4627      	mov	r7, r4
 8003ebe:	2f00      	cmp	r7, #0
 8003ec0:	d143      	bne.n	8003f4a <_malloc_r+0xd6>
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	d04b      	beq.n	8003f5e <_malloc_r+0xea>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	4639      	mov	r1, r7
 8003eca:	4630      	mov	r0, r6
 8003ecc:	eb04 0903 	add.w	r9, r4, r3
 8003ed0:	f000 fc5a 	bl	8004788 <_sbrk_r>
 8003ed4:	4581      	cmp	r9, r0
 8003ed6:	d142      	bne.n	8003f5e <_malloc_r+0xea>
 8003ed8:	6821      	ldr	r1, [r4, #0]
 8003eda:	1a6d      	subs	r5, r5, r1
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffa6 	bl	8003e30 <sbrk_aligned>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d03a      	beq.n	8003f5e <_malloc_r+0xea>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	442b      	add	r3, r5
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	bb62      	cbnz	r2, 8003f50 <_malloc_r+0xdc>
 8003ef6:	f8c8 7000 	str.w	r7, [r8]
 8003efa:	e00f      	b.n	8003f1c <_malloc_r+0xa8>
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	1b52      	subs	r2, r2, r5
 8003f00:	d420      	bmi.n	8003f44 <_malloc_r+0xd0>
 8003f02:	2a0b      	cmp	r2, #11
 8003f04:	d917      	bls.n	8003f36 <_malloc_r+0xc2>
 8003f06:	1961      	adds	r1, r4, r5
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	6025      	str	r5, [r4, #0]
 8003f0c:	bf18      	it	ne
 8003f0e:	6059      	strne	r1, [r3, #4]
 8003f10:	6863      	ldr	r3, [r4, #4]
 8003f12:	bf08      	it	eq
 8003f14:	f8c8 1000 	streq.w	r1, [r8]
 8003f18:	5162      	str	r2, [r4, r5]
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f82f 	bl	8003f80 <__malloc_unlock>
 8003f22:	f104 000b 	add.w	r0, r4, #11
 8003f26:	1d23      	adds	r3, r4, #4
 8003f28:	f020 0007 	bic.w	r0, r0, #7
 8003f2c:	1ac2      	subs	r2, r0, r3
 8003f2e:	bf1c      	itt	ne
 8003f30:	1a1b      	subne	r3, r3, r0
 8003f32:	50a3      	strne	r3, [r4, r2]
 8003f34:	e7af      	b.n	8003e96 <_malloc_r+0x22>
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	bf0c      	ite	eq
 8003f3c:	f8c8 2000 	streq.w	r2, [r8]
 8003f40:	605a      	strne	r2, [r3, #4]
 8003f42:	e7eb      	b.n	8003f1c <_malloc_r+0xa8>
 8003f44:	4623      	mov	r3, r4
 8003f46:	6864      	ldr	r4, [r4, #4]
 8003f48:	e7ae      	b.n	8003ea8 <_malloc_r+0x34>
 8003f4a:	463c      	mov	r4, r7
 8003f4c:	687f      	ldr	r7, [r7, #4]
 8003f4e:	e7b6      	b.n	8003ebe <_malloc_r+0x4a>
 8003f50:	461a      	mov	r2, r3
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d1fb      	bne.n	8003f50 <_malloc_r+0xdc>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6053      	str	r3, [r2, #4]
 8003f5c:	e7de      	b.n	8003f1c <_malloc_r+0xa8>
 8003f5e:	230c      	movs	r3, #12
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	4630      	mov	r0, r6
 8003f64:	f000 f80c 	bl	8003f80 <__malloc_unlock>
 8003f68:	e794      	b.n	8003e94 <_malloc_r+0x20>
 8003f6a:	6005      	str	r5, [r0, #0]
 8003f6c:	e7d6      	b.n	8003f1c <_malloc_r+0xa8>
 8003f6e:	bf00      	nop
 8003f70:	20000274 	.word	0x20000274

08003f74 <__malloc_lock>:
 8003f74:	4801      	ldr	r0, [pc, #4]	@ (8003f7c <__malloc_lock+0x8>)
 8003f76:	f7ff bf0e 	b.w	8003d96 <__retarget_lock_acquire_recursive>
 8003f7a:	bf00      	nop
 8003f7c:	2000026c 	.word	0x2000026c

08003f80 <__malloc_unlock>:
 8003f80:	4801      	ldr	r0, [pc, #4]	@ (8003f88 <__malloc_unlock+0x8>)
 8003f82:	f7ff bf09 	b.w	8003d98 <__retarget_lock_release_recursive>
 8003f86:	bf00      	nop
 8003f88:	2000026c 	.word	0x2000026c

08003f8c <__sfputc_r>:
 8003f8c:	6893      	ldr	r3, [r2, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	b410      	push	{r4}
 8003f94:	6093      	str	r3, [r2, #8]
 8003f96:	da08      	bge.n	8003faa <__sfputc_r+0x1e>
 8003f98:	6994      	ldr	r4, [r2, #24]
 8003f9a:	42a3      	cmp	r3, r4
 8003f9c:	db01      	blt.n	8003fa2 <__sfputc_r+0x16>
 8003f9e:	290a      	cmp	r1, #10
 8003fa0:	d103      	bne.n	8003faa <__sfputc_r+0x1e>
 8003fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fa6:	f7ff bde8 	b.w	8003b7a <__swbuf_r>
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	1c58      	adds	r0, r3, #1
 8003fae:	6010      	str	r0, [r2, #0]
 8003fb0:	7019      	strb	r1, [r3, #0]
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <__sfputs_r>:
 8003fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	460f      	mov	r7, r1
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	18d5      	adds	r5, r2, r3
 8003fc4:	42ac      	cmp	r4, r5
 8003fc6:	d101      	bne.n	8003fcc <__sfputs_r+0x12>
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e007      	b.n	8003fdc <__sfputs_r+0x22>
 8003fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd0:	463a      	mov	r2, r7
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f7ff ffda 	bl	8003f8c <__sfputc_r>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d1f3      	bne.n	8003fc4 <__sfputs_r+0xa>
 8003fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fe0 <_vfiprintf_r>:
 8003fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	b09d      	sub	sp, #116	@ 0x74
 8003fe8:	4614      	mov	r4, r2
 8003fea:	4698      	mov	r8, r3
 8003fec:	4606      	mov	r6, r0
 8003fee:	b118      	cbz	r0, 8003ff8 <_vfiprintf_r+0x18>
 8003ff0:	6a03      	ldr	r3, [r0, #32]
 8003ff2:	b90b      	cbnz	r3, 8003ff8 <_vfiprintf_r+0x18>
 8003ff4:	f7ff fcd8 	bl	80039a8 <__sinit>
 8003ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ffa:	07d9      	lsls	r1, r3, #31
 8003ffc:	d405      	bmi.n	800400a <_vfiprintf_r+0x2a>
 8003ffe:	89ab      	ldrh	r3, [r5, #12]
 8004000:	059a      	lsls	r2, r3, #22
 8004002:	d402      	bmi.n	800400a <_vfiprintf_r+0x2a>
 8004004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004006:	f7ff fec6 	bl	8003d96 <__retarget_lock_acquire_recursive>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	d501      	bpl.n	8004014 <_vfiprintf_r+0x34>
 8004010:	692b      	ldr	r3, [r5, #16]
 8004012:	b99b      	cbnz	r3, 800403c <_vfiprintf_r+0x5c>
 8004014:	4629      	mov	r1, r5
 8004016:	4630      	mov	r0, r6
 8004018:	f7ff fdee 	bl	8003bf8 <__swsetup_r>
 800401c:	b170      	cbz	r0, 800403c <_vfiprintf_r+0x5c>
 800401e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004020:	07dc      	lsls	r4, r3, #31
 8004022:	d504      	bpl.n	800402e <_vfiprintf_r+0x4e>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	b01d      	add	sp, #116	@ 0x74
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	89ab      	ldrh	r3, [r5, #12]
 8004030:	0598      	lsls	r0, r3, #22
 8004032:	d4f7      	bmi.n	8004024 <_vfiprintf_r+0x44>
 8004034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004036:	f7ff feaf 	bl	8003d98 <__retarget_lock_release_recursive>
 800403a:	e7f3      	b.n	8004024 <_vfiprintf_r+0x44>
 800403c:	2300      	movs	r3, #0
 800403e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004040:	2320      	movs	r3, #32
 8004042:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004046:	f8cd 800c 	str.w	r8, [sp, #12]
 800404a:	2330      	movs	r3, #48	@ 0x30
 800404c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041fc <_vfiprintf_r+0x21c>
 8004050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004054:	f04f 0901 	mov.w	r9, #1
 8004058:	4623      	mov	r3, r4
 800405a:	469a      	mov	sl, r3
 800405c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004060:	b10a      	cbz	r2, 8004066 <_vfiprintf_r+0x86>
 8004062:	2a25      	cmp	r2, #37	@ 0x25
 8004064:	d1f9      	bne.n	800405a <_vfiprintf_r+0x7a>
 8004066:	ebba 0b04 	subs.w	fp, sl, r4
 800406a:	d00b      	beq.n	8004084 <_vfiprintf_r+0xa4>
 800406c:	465b      	mov	r3, fp
 800406e:	4622      	mov	r2, r4
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff ffa1 	bl	8003fba <__sfputs_r>
 8004078:	3001      	adds	r0, #1
 800407a:	f000 80a7 	beq.w	80041cc <_vfiprintf_r+0x1ec>
 800407e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004080:	445a      	add	r2, fp
 8004082:	9209      	str	r2, [sp, #36]	@ 0x24
 8004084:	f89a 3000 	ldrb.w	r3, [sl]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 809f 	beq.w	80041cc <_vfiprintf_r+0x1ec>
 800408e:	2300      	movs	r3, #0
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004098:	f10a 0a01 	add.w	sl, sl, #1
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	9307      	str	r3, [sp, #28]
 80040a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a6:	4654      	mov	r4, sl
 80040a8:	2205      	movs	r2, #5
 80040aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ae:	4853      	ldr	r0, [pc, #332]	@ (80041fc <_vfiprintf_r+0x21c>)
 80040b0:	f7fc f896 	bl	80001e0 <memchr>
 80040b4:	9a04      	ldr	r2, [sp, #16]
 80040b6:	b9d8      	cbnz	r0, 80040f0 <_vfiprintf_r+0x110>
 80040b8:	06d1      	lsls	r1, r2, #27
 80040ba:	bf44      	itt	mi
 80040bc:	2320      	movmi	r3, #32
 80040be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c2:	0713      	lsls	r3, r2, #28
 80040c4:	bf44      	itt	mi
 80040c6:	232b      	movmi	r3, #43	@ 0x2b
 80040c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040cc:	f89a 3000 	ldrb.w	r3, [sl]
 80040d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d2:	d015      	beq.n	8004100 <_vfiprintf_r+0x120>
 80040d4:	9a07      	ldr	r2, [sp, #28]
 80040d6:	4654      	mov	r4, sl
 80040d8:	2000      	movs	r0, #0
 80040da:	f04f 0c0a 	mov.w	ip, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e4:	3b30      	subs	r3, #48	@ 0x30
 80040e6:	2b09      	cmp	r3, #9
 80040e8:	d94b      	bls.n	8004182 <_vfiprintf_r+0x1a2>
 80040ea:	b1b0      	cbz	r0, 800411a <_vfiprintf_r+0x13a>
 80040ec:	9207      	str	r2, [sp, #28]
 80040ee:	e014      	b.n	800411a <_vfiprintf_r+0x13a>
 80040f0:	eba0 0308 	sub.w	r3, r0, r8
 80040f4:	fa09 f303 	lsl.w	r3, r9, r3
 80040f8:	4313      	orrs	r3, r2
 80040fa:	9304      	str	r3, [sp, #16]
 80040fc:	46a2      	mov	sl, r4
 80040fe:	e7d2      	b.n	80040a6 <_vfiprintf_r+0xc6>
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	1d19      	adds	r1, r3, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	9103      	str	r1, [sp, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	bfbb      	ittet	lt
 800410c:	425b      	neglt	r3, r3
 800410e:	f042 0202 	orrlt.w	r2, r2, #2
 8004112:	9307      	strge	r3, [sp, #28]
 8004114:	9307      	strlt	r3, [sp, #28]
 8004116:	bfb8      	it	lt
 8004118:	9204      	strlt	r2, [sp, #16]
 800411a:	7823      	ldrb	r3, [r4, #0]
 800411c:	2b2e      	cmp	r3, #46	@ 0x2e
 800411e:	d10a      	bne.n	8004136 <_vfiprintf_r+0x156>
 8004120:	7863      	ldrb	r3, [r4, #1]
 8004122:	2b2a      	cmp	r3, #42	@ 0x2a
 8004124:	d132      	bne.n	800418c <_vfiprintf_r+0x1ac>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	9203      	str	r2, [sp, #12]
 800412e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004132:	3402      	adds	r4, #2
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800420c <_vfiprintf_r+0x22c>
 800413a:	7821      	ldrb	r1, [r4, #0]
 800413c:	2203      	movs	r2, #3
 800413e:	4650      	mov	r0, sl
 8004140:	f7fc f84e 	bl	80001e0 <memchr>
 8004144:	b138      	cbz	r0, 8004156 <_vfiprintf_r+0x176>
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	eba0 000a 	sub.w	r0, r0, sl
 800414c:	2240      	movs	r2, #64	@ 0x40
 800414e:	4082      	lsls	r2, r0
 8004150:	4313      	orrs	r3, r2
 8004152:	3401      	adds	r4, #1
 8004154:	9304      	str	r3, [sp, #16]
 8004156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415a:	4829      	ldr	r0, [pc, #164]	@ (8004200 <_vfiprintf_r+0x220>)
 800415c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004160:	2206      	movs	r2, #6
 8004162:	f7fc f83d 	bl	80001e0 <memchr>
 8004166:	2800      	cmp	r0, #0
 8004168:	d03f      	beq.n	80041ea <_vfiprintf_r+0x20a>
 800416a:	4b26      	ldr	r3, [pc, #152]	@ (8004204 <_vfiprintf_r+0x224>)
 800416c:	bb1b      	cbnz	r3, 80041b6 <_vfiprintf_r+0x1d6>
 800416e:	9b03      	ldr	r3, [sp, #12]
 8004170:	3307      	adds	r3, #7
 8004172:	f023 0307 	bic.w	r3, r3, #7
 8004176:	3308      	adds	r3, #8
 8004178:	9303      	str	r3, [sp, #12]
 800417a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417c:	443b      	add	r3, r7
 800417e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004180:	e76a      	b.n	8004058 <_vfiprintf_r+0x78>
 8004182:	fb0c 3202 	mla	r2, ip, r2, r3
 8004186:	460c      	mov	r4, r1
 8004188:	2001      	movs	r0, #1
 800418a:	e7a8      	b.n	80040de <_vfiprintf_r+0xfe>
 800418c:	2300      	movs	r3, #0
 800418e:	3401      	adds	r4, #1
 8004190:	9305      	str	r3, [sp, #20]
 8004192:	4619      	mov	r1, r3
 8004194:	f04f 0c0a 	mov.w	ip, #10
 8004198:	4620      	mov	r0, r4
 800419a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419e:	3a30      	subs	r2, #48	@ 0x30
 80041a0:	2a09      	cmp	r2, #9
 80041a2:	d903      	bls.n	80041ac <_vfiprintf_r+0x1cc>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0c6      	beq.n	8004136 <_vfiprintf_r+0x156>
 80041a8:	9105      	str	r1, [sp, #20]
 80041aa:	e7c4      	b.n	8004136 <_vfiprintf_r+0x156>
 80041ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80041b0:	4604      	mov	r4, r0
 80041b2:	2301      	movs	r3, #1
 80041b4:	e7f0      	b.n	8004198 <_vfiprintf_r+0x1b8>
 80041b6:	ab03      	add	r3, sp, #12
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	462a      	mov	r2, r5
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <_vfiprintf_r+0x228>)
 80041be:	a904      	add	r1, sp, #16
 80041c0:	4630      	mov	r0, r6
 80041c2:	f3af 8000 	nop.w
 80041c6:	4607      	mov	r7, r0
 80041c8:	1c78      	adds	r0, r7, #1
 80041ca:	d1d6      	bne.n	800417a <_vfiprintf_r+0x19a>
 80041cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ce:	07d9      	lsls	r1, r3, #31
 80041d0:	d405      	bmi.n	80041de <_vfiprintf_r+0x1fe>
 80041d2:	89ab      	ldrh	r3, [r5, #12]
 80041d4:	059a      	lsls	r2, r3, #22
 80041d6:	d402      	bmi.n	80041de <_vfiprintf_r+0x1fe>
 80041d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041da:	f7ff fddd 	bl	8003d98 <__retarget_lock_release_recursive>
 80041de:	89ab      	ldrh	r3, [r5, #12]
 80041e0:	065b      	lsls	r3, r3, #25
 80041e2:	f53f af1f 	bmi.w	8004024 <_vfiprintf_r+0x44>
 80041e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e8:	e71e      	b.n	8004028 <_vfiprintf_r+0x48>
 80041ea:	ab03      	add	r3, sp, #12
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <_vfiprintf_r+0x228>)
 80041f2:	a904      	add	r1, sp, #16
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 f879 	bl	80042ec <_printf_i>
 80041fa:	e7e4      	b.n	80041c6 <_vfiprintf_r+0x1e6>
 80041fc:	080047f0 	.word	0x080047f0
 8004200:	080047fa 	.word	0x080047fa
 8004204:	00000000 	.word	0x00000000
 8004208:	08003fbb 	.word	0x08003fbb
 800420c:	080047f6 	.word	0x080047f6

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4698      	mov	r8, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004220:	4293      	cmp	r3, r2
 8004222:	bfb8      	it	lt
 8004224:	4613      	movlt	r3, r2
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800422c:	4607      	mov	r7, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc26      	bgt.n	80042a6 <_printf_common+0x96>
 8004258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	3b00      	subs	r3, #0
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d42b      	bmi.n	80042c0 <_printf_common+0xb0>
 8004268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800426c:	4641      	mov	r1, r8
 800426e:	4638      	mov	r0, r7
 8004270:	47c8      	blx	r9
 8004272:	3001      	adds	r0, #1
 8004274:	d01e      	beq.n	80042b4 <_printf_common+0xa4>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	f003 0306 	and.w	r3, r3, #6
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf02      	ittt	eq
 8004282:	68e5      	ldreq	r5, [r4, #12]
 8004284:	6833      	ldreq	r3, [r6, #0]
 8004286:	1aed      	subeq	r5, r5, r3
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	2600      	movs	r6, #0
 800429c:	341a      	adds	r4, #26
 800429e:	42b5      	cmp	r5, r6
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xc8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xa8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4641      	mov	r1, r8
 80042ac:	4638      	mov	r0, r7
 80042ae:	47c8      	blx	r9
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xac>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c6      	b.n	800424e <_printf_common+0x3e>
 80042c0:	18e1      	adds	r1, r4, r3
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	2030      	movs	r0, #48	@ 0x30
 80042c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ca:	4422      	add	r2, r4
 80042cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d4:	3302      	adds	r3, #2
 80042d6:	e7c7      	b.n	8004268 <_printf_common+0x58>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4641      	mov	r1, r8
 80042de:	4638      	mov	r0, r7
 80042e0:	47c8      	blx	r9
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xa4>
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7d9      	b.n	800429e <_printf_common+0x8e>
	...

080042ec <_printf_i>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	7e0f      	ldrb	r7, [r1, #24]
 80042f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f4:	2f78      	cmp	r7, #120	@ 0x78
 80042f6:	4691      	mov	r9, r2
 80042f8:	4680      	mov	r8, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	469a      	mov	sl, r3
 80042fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004302:	d807      	bhi.n	8004314 <_printf_i+0x28>
 8004304:	2f62      	cmp	r7, #98	@ 0x62
 8004306:	d80a      	bhi.n	800431e <_printf_i+0x32>
 8004308:	2f00      	cmp	r7, #0
 800430a:	f000 80d1 	beq.w	80044b0 <_printf_i+0x1c4>
 800430e:	2f58      	cmp	r7, #88	@ 0x58
 8004310:	f000 80b8 	beq.w	8004484 <_printf_i+0x198>
 8004314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800431c:	e03a      	b.n	8004394 <_printf_i+0xa8>
 800431e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004322:	2b15      	cmp	r3, #21
 8004324:	d8f6      	bhi.n	8004314 <_printf_i+0x28>
 8004326:	a101      	add	r1, pc, #4	@ (adr r1, 800432c <_printf_i+0x40>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004385 	.word	0x08004385
 8004330:	08004399 	.word	0x08004399
 8004334:	08004315 	.word	0x08004315
 8004338:	08004315 	.word	0x08004315
 800433c:	08004315 	.word	0x08004315
 8004340:	08004315 	.word	0x08004315
 8004344:	08004399 	.word	0x08004399
 8004348:	08004315 	.word	0x08004315
 800434c:	08004315 	.word	0x08004315
 8004350:	08004315 	.word	0x08004315
 8004354:	08004315 	.word	0x08004315
 8004358:	08004497 	.word	0x08004497
 800435c:	080043c3 	.word	0x080043c3
 8004360:	08004451 	.word	0x08004451
 8004364:	08004315 	.word	0x08004315
 8004368:	08004315 	.word	0x08004315
 800436c:	080044b9 	.word	0x080044b9
 8004370:	08004315 	.word	0x08004315
 8004374:	080043c3 	.word	0x080043c3
 8004378:	08004315 	.word	0x08004315
 800437c:	08004315 	.word	0x08004315
 8004380:	08004459 	.word	0x08004459
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6032      	str	r2, [r6, #0]
 800438c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e09c      	b.n	80044d2 <_printf_i+0x1e6>
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	6031      	str	r1, [r6, #0]
 80043a0:	0606      	lsls	r6, r0, #24
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0xbc>
 80043a4:	681d      	ldr	r5, [r3, #0]
 80043a6:	e003      	b.n	80043b0 <_printf_i+0xc4>
 80043a8:	0645      	lsls	r5, r0, #25
 80043aa:	d5fb      	bpl.n	80043a4 <_printf_i+0xb8>
 80043ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	da03      	bge.n	80043bc <_printf_i+0xd0>
 80043b4:	232d      	movs	r3, #45	@ 0x2d
 80043b6:	426d      	negs	r5, r5
 80043b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043bc:	4858      	ldr	r0, [pc, #352]	@ (8004520 <_printf_i+0x234>)
 80043be:	230a      	movs	r3, #10
 80043c0:	e011      	b.n	80043e6 <_printf_i+0xfa>
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	0608      	lsls	r0, r1, #24
 80043c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80043cc:	d402      	bmi.n	80043d4 <_printf_i+0xe8>
 80043ce:	0649      	lsls	r1, r1, #25
 80043d0:	bf48      	it	mi
 80043d2:	b2ad      	uxthmi	r5, r5
 80043d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043d6:	4852      	ldr	r0, [pc, #328]	@ (8004520 <_printf_i+0x234>)
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	bf14      	ite	ne
 80043dc:	230a      	movne	r3, #10
 80043de:	2308      	moveq	r3, #8
 80043e0:	2100      	movs	r1, #0
 80043e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043e6:	6866      	ldr	r6, [r4, #4]
 80043e8:	60a6      	str	r6, [r4, #8]
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	db05      	blt.n	80043fa <_printf_i+0x10e>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	432e      	orrs	r6, r5
 80043f2:	f021 0104 	bic.w	r1, r1, #4
 80043f6:	6021      	str	r1, [r4, #0]
 80043f8:	d04b      	beq.n	8004492 <_printf_i+0x1a6>
 80043fa:	4616      	mov	r6, r2
 80043fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004400:	fb03 5711 	mls	r7, r3, r1, r5
 8004404:	5dc7      	ldrb	r7, [r0, r7]
 8004406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800440a:	462f      	mov	r7, r5
 800440c:	42bb      	cmp	r3, r7
 800440e:	460d      	mov	r5, r1
 8004410:	d9f4      	bls.n	80043fc <_printf_i+0x110>
 8004412:	2b08      	cmp	r3, #8
 8004414:	d10b      	bne.n	800442e <_printf_i+0x142>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	07df      	lsls	r7, r3, #31
 800441a:	d508      	bpl.n	800442e <_printf_i+0x142>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	6861      	ldr	r1, [r4, #4]
 8004420:	4299      	cmp	r1, r3
 8004422:	bfde      	ittt	le
 8004424:	2330      	movle	r3, #48	@ 0x30
 8004426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800442a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800442e:	1b92      	subs	r2, r2, r6
 8004430:	6122      	str	r2, [r4, #16]
 8004432:	f8cd a000 	str.w	sl, [sp]
 8004436:	464b      	mov	r3, r9
 8004438:	aa03      	add	r2, sp, #12
 800443a:	4621      	mov	r1, r4
 800443c:	4640      	mov	r0, r8
 800443e:	f7ff fee7 	bl	8004210 <_printf_common>
 8004442:	3001      	adds	r0, #1
 8004444:	d14a      	bne.n	80044dc <_printf_i+0x1f0>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	b004      	add	sp, #16
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f043 0320 	orr.w	r3, r3, #32
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	4832      	ldr	r0, [pc, #200]	@ (8004524 <_printf_i+0x238>)
 800445a:	2778      	movs	r7, #120	@ 0x78
 800445c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	6831      	ldr	r1, [r6, #0]
 8004464:	061f      	lsls	r7, r3, #24
 8004466:	f851 5b04 	ldr.w	r5, [r1], #4
 800446a:	d402      	bmi.n	8004472 <_printf_i+0x186>
 800446c:	065f      	lsls	r7, r3, #25
 800446e:	bf48      	it	mi
 8004470:	b2ad      	uxthmi	r5, r5
 8004472:	6031      	str	r1, [r6, #0]
 8004474:	07d9      	lsls	r1, r3, #31
 8004476:	bf44      	itt	mi
 8004478:	f043 0320 	orrmi.w	r3, r3, #32
 800447c:	6023      	strmi	r3, [r4, #0]
 800447e:	b11d      	cbz	r5, 8004488 <_printf_i+0x19c>
 8004480:	2310      	movs	r3, #16
 8004482:	e7ad      	b.n	80043e0 <_printf_i+0xf4>
 8004484:	4826      	ldr	r0, [pc, #152]	@ (8004520 <_printf_i+0x234>)
 8004486:	e7e9      	b.n	800445c <_printf_i+0x170>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	f023 0320 	bic.w	r3, r3, #32
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	e7f6      	b.n	8004480 <_printf_i+0x194>
 8004492:	4616      	mov	r6, r2
 8004494:	e7bd      	b.n	8004412 <_printf_i+0x126>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	6961      	ldr	r1, [r4, #20]
 800449c:	1d18      	adds	r0, r3, #4
 800449e:	6030      	str	r0, [r6, #0]
 80044a0:	062e      	lsls	r6, r5, #24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	d501      	bpl.n	80044aa <_printf_i+0x1be>
 80044a6:	6019      	str	r1, [r3, #0]
 80044a8:	e002      	b.n	80044b0 <_printf_i+0x1c4>
 80044aa:	0668      	lsls	r0, r5, #25
 80044ac:	d5fb      	bpl.n	80044a6 <_printf_i+0x1ba>
 80044ae:	8019      	strh	r1, [r3, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	4616      	mov	r6, r2
 80044b6:	e7bc      	b.n	8004432 <_printf_i+0x146>
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	6032      	str	r2, [r6, #0]
 80044be:	681e      	ldr	r6, [r3, #0]
 80044c0:	6862      	ldr	r2, [r4, #4]
 80044c2:	2100      	movs	r1, #0
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7fb fe8b 	bl	80001e0 <memchr>
 80044ca:	b108      	cbz	r0, 80044d0 <_printf_i+0x1e4>
 80044cc:	1b80      	subs	r0, r0, r6
 80044ce:	6060      	str	r0, [r4, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044da:	e7aa      	b.n	8004432 <_printf_i+0x146>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	4632      	mov	r2, r6
 80044e0:	4649      	mov	r1, r9
 80044e2:	4640      	mov	r0, r8
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0ad      	beq.n	8004446 <_printf_i+0x15a>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	079b      	lsls	r3, r3, #30
 80044ee:	d413      	bmi.n	8004518 <_printf_i+0x22c>
 80044f0:	68e0      	ldr	r0, [r4, #12]
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	4298      	cmp	r0, r3
 80044f6:	bfb8      	it	lt
 80044f8:	4618      	movlt	r0, r3
 80044fa:	e7a6      	b.n	800444a <_printf_i+0x15e>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4632      	mov	r2, r6
 8004500:	4649      	mov	r1, r9
 8004502:	4640      	mov	r0, r8
 8004504:	47d0      	blx	sl
 8004506:	3001      	adds	r0, #1
 8004508:	d09d      	beq.n	8004446 <_printf_i+0x15a>
 800450a:	3501      	adds	r5, #1
 800450c:	68e3      	ldr	r3, [r4, #12]
 800450e:	9903      	ldr	r1, [sp, #12]
 8004510:	1a5b      	subs	r3, r3, r1
 8004512:	42ab      	cmp	r3, r5
 8004514:	dcf2      	bgt.n	80044fc <_printf_i+0x210>
 8004516:	e7eb      	b.n	80044f0 <_printf_i+0x204>
 8004518:	2500      	movs	r5, #0
 800451a:	f104 0619 	add.w	r6, r4, #25
 800451e:	e7f5      	b.n	800450c <_printf_i+0x220>
 8004520:	08004801 	.word	0x08004801
 8004524:	08004812 	.word	0x08004812

08004528 <__sflush_r>:
 8004528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004530:	0716      	lsls	r6, r2, #28
 8004532:	4605      	mov	r5, r0
 8004534:	460c      	mov	r4, r1
 8004536:	d454      	bmi.n	80045e2 <__sflush_r+0xba>
 8004538:	684b      	ldr	r3, [r1, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	dc02      	bgt.n	8004544 <__sflush_r+0x1c>
 800453e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	dd48      	ble.n	80045d6 <__sflush_r+0xae>
 8004544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004546:	2e00      	cmp	r6, #0
 8004548:	d045      	beq.n	80045d6 <__sflush_r+0xae>
 800454a:	2300      	movs	r3, #0
 800454c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004550:	682f      	ldr	r7, [r5, #0]
 8004552:	6a21      	ldr	r1, [r4, #32]
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	d030      	beq.n	80045ba <__sflush_r+0x92>
 8004558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	0759      	lsls	r1, r3, #29
 800455e:	d505      	bpl.n	800456c <__sflush_r+0x44>
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004566:	b10b      	cbz	r3, 800456c <__sflush_r+0x44>
 8004568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004570:	6a21      	ldr	r1, [r4, #32]
 8004572:	4628      	mov	r0, r5
 8004574:	47b0      	blx	r6
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	d106      	bne.n	800458a <__sflush_r+0x62>
 800457c:	6829      	ldr	r1, [r5, #0]
 800457e:	291d      	cmp	r1, #29
 8004580:	d82b      	bhi.n	80045da <__sflush_r+0xb2>
 8004582:	4a2a      	ldr	r2, [pc, #168]	@ (800462c <__sflush_r+0x104>)
 8004584:	40ca      	lsrs	r2, r1
 8004586:	07d6      	lsls	r6, r2, #31
 8004588:	d527      	bpl.n	80045da <__sflush_r+0xb2>
 800458a:	2200      	movs	r2, #0
 800458c:	6062      	str	r2, [r4, #4]
 800458e:	04d9      	lsls	r1, r3, #19
 8004590:	6922      	ldr	r2, [r4, #16]
 8004592:	6022      	str	r2, [r4, #0]
 8004594:	d504      	bpl.n	80045a0 <__sflush_r+0x78>
 8004596:	1c42      	adds	r2, r0, #1
 8004598:	d101      	bne.n	800459e <__sflush_r+0x76>
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	b903      	cbnz	r3, 80045a0 <__sflush_r+0x78>
 800459e:	6560      	str	r0, [r4, #84]	@ 0x54
 80045a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045a2:	602f      	str	r7, [r5, #0]
 80045a4:	b1b9      	cbz	r1, 80045d6 <__sflush_r+0xae>
 80045a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045aa:	4299      	cmp	r1, r3
 80045ac:	d002      	beq.n	80045b4 <__sflush_r+0x8c>
 80045ae:	4628      	mov	r0, r5
 80045b0:	f7ff fbf4 	bl	8003d9c <_free_r>
 80045b4:	2300      	movs	r3, #0
 80045b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80045b8:	e00d      	b.n	80045d6 <__sflush_r+0xae>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4628      	mov	r0, r5
 80045be:	47b0      	blx	r6
 80045c0:	4602      	mov	r2, r0
 80045c2:	1c50      	adds	r0, r2, #1
 80045c4:	d1c9      	bne.n	800455a <__sflush_r+0x32>
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0c6      	beq.n	800455a <__sflush_r+0x32>
 80045cc:	2b1d      	cmp	r3, #29
 80045ce:	d001      	beq.n	80045d4 <__sflush_r+0xac>
 80045d0:	2b16      	cmp	r3, #22
 80045d2:	d11e      	bne.n	8004612 <__sflush_r+0xea>
 80045d4:	602f      	str	r7, [r5, #0]
 80045d6:	2000      	movs	r0, #0
 80045d8:	e022      	b.n	8004620 <__sflush_r+0xf8>
 80045da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045de:	b21b      	sxth	r3, r3
 80045e0:	e01b      	b.n	800461a <__sflush_r+0xf2>
 80045e2:	690f      	ldr	r7, [r1, #16]
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	d0f6      	beq.n	80045d6 <__sflush_r+0xae>
 80045e8:	0793      	lsls	r3, r2, #30
 80045ea:	680e      	ldr	r6, [r1, #0]
 80045ec:	bf08      	it	eq
 80045ee:	694b      	ldreq	r3, [r1, #20]
 80045f0:	600f      	str	r7, [r1, #0]
 80045f2:	bf18      	it	ne
 80045f4:	2300      	movne	r3, #0
 80045f6:	eba6 0807 	sub.w	r8, r6, r7
 80045fa:	608b      	str	r3, [r1, #8]
 80045fc:	f1b8 0f00 	cmp.w	r8, #0
 8004600:	dde9      	ble.n	80045d6 <__sflush_r+0xae>
 8004602:	6a21      	ldr	r1, [r4, #32]
 8004604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004606:	4643      	mov	r3, r8
 8004608:	463a      	mov	r2, r7
 800460a:	4628      	mov	r0, r5
 800460c:	47b0      	blx	r6
 800460e:	2800      	cmp	r0, #0
 8004610:	dc08      	bgt.n	8004624 <__sflush_r+0xfc>
 8004612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800461a:	81a3      	strh	r3, [r4, #12]
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004624:	4407      	add	r7, r0
 8004626:	eba8 0800 	sub.w	r8, r8, r0
 800462a:	e7e7      	b.n	80045fc <__sflush_r+0xd4>
 800462c:	20400001 	.word	0x20400001

08004630 <_fflush_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	4605      	mov	r5, r0
 8004636:	460c      	mov	r4, r1
 8004638:	b913      	cbnz	r3, 8004640 <_fflush_r+0x10>
 800463a:	2500      	movs	r5, #0
 800463c:	4628      	mov	r0, r5
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	b118      	cbz	r0, 800464a <_fflush_r+0x1a>
 8004642:	6a03      	ldr	r3, [r0, #32]
 8004644:	b90b      	cbnz	r3, 800464a <_fflush_r+0x1a>
 8004646:	f7ff f9af 	bl	80039a8 <__sinit>
 800464a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f3      	beq.n	800463a <_fflush_r+0xa>
 8004652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004654:	07d0      	lsls	r0, r2, #31
 8004656:	d404      	bmi.n	8004662 <_fflush_r+0x32>
 8004658:	0599      	lsls	r1, r3, #22
 800465a:	d402      	bmi.n	8004662 <_fflush_r+0x32>
 800465c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800465e:	f7ff fb9a 	bl	8003d96 <__retarget_lock_acquire_recursive>
 8004662:	4628      	mov	r0, r5
 8004664:	4621      	mov	r1, r4
 8004666:	f7ff ff5f 	bl	8004528 <__sflush_r>
 800466a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800466c:	07da      	lsls	r2, r3, #31
 800466e:	4605      	mov	r5, r0
 8004670:	d4e4      	bmi.n	800463c <_fflush_r+0xc>
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	059b      	lsls	r3, r3, #22
 8004676:	d4e1      	bmi.n	800463c <_fflush_r+0xc>
 8004678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467a:	f7ff fb8d 	bl	8003d98 <__retarget_lock_release_recursive>
 800467e:	e7dd      	b.n	800463c <_fflush_r+0xc>

08004680 <__swhatbuf_r>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	460c      	mov	r4, r1
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	2900      	cmp	r1, #0
 800468a:	b096      	sub	sp, #88	@ 0x58
 800468c:	4615      	mov	r5, r2
 800468e:	461e      	mov	r6, r3
 8004690:	da0d      	bge.n	80046ae <__swhatbuf_r+0x2e>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004698:	f04f 0100 	mov.w	r1, #0
 800469c:	bf14      	ite	ne
 800469e:	2340      	movne	r3, #64	@ 0x40
 80046a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046a4:	2000      	movs	r0, #0
 80046a6:	6031      	str	r1, [r6, #0]
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	b016      	add	sp, #88	@ 0x58
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	466a      	mov	r2, sp
 80046b0:	f000 f848 	bl	8004744 <_fstat_r>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dbec      	blt.n	8004692 <__swhatbuf_r+0x12>
 80046b8:	9901      	ldr	r1, [sp, #4]
 80046ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80046be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80046c2:	4259      	negs	r1, r3
 80046c4:	4159      	adcs	r1, r3
 80046c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ca:	e7eb      	b.n	80046a4 <__swhatbuf_r+0x24>

080046cc <__smakebuf_r>:
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d0:	079d      	lsls	r5, r3, #30
 80046d2:	4606      	mov	r6, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	d507      	bpl.n	80046e8 <__smakebuf_r+0x1c>
 80046d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	2301      	movs	r3, #1
 80046e2:	6163      	str	r3, [r4, #20]
 80046e4:	b003      	add	sp, #12
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e8:	ab01      	add	r3, sp, #4
 80046ea:	466a      	mov	r2, sp
 80046ec:	f7ff ffc8 	bl	8004680 <__swhatbuf_r>
 80046f0:	9f00      	ldr	r7, [sp, #0]
 80046f2:	4605      	mov	r5, r0
 80046f4:	4639      	mov	r1, r7
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff fbbc 	bl	8003e74 <_malloc_r>
 80046fc:	b948      	cbnz	r0, 8004712 <__smakebuf_r+0x46>
 80046fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004702:	059a      	lsls	r2, r3, #22
 8004704:	d4ee      	bmi.n	80046e4 <__smakebuf_r+0x18>
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	e7e2      	b.n	80046d8 <__smakebuf_r+0xc>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	6020      	str	r0, [r4, #0]
 8004716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	9b01      	ldr	r3, [sp, #4]
 800471e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004722:	b15b      	cbz	r3, 800473c <__smakebuf_r+0x70>
 8004724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f81d 	bl	8004768 <_isatty_r>
 800472e:	b128      	cbz	r0, 800473c <__smakebuf_r+0x70>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	431d      	orrs	r5, r3
 8004740:	81a5      	strh	r5, [r4, #12]
 8004742:	e7cf      	b.n	80046e4 <__smakebuf_r+0x18>

08004744 <_fstat_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d07      	ldr	r5, [pc, #28]	@ (8004764 <_fstat_r+0x20>)
 8004748:	2300      	movs	r3, #0
 800474a:	4604      	mov	r4, r0
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	f7fc fec2 	bl	80014da <_fstat>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	d102      	bne.n	8004760 <_fstat_r+0x1c>
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	b103      	cbz	r3, 8004760 <_fstat_r+0x1c>
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	20000268 	.word	0x20000268

08004768 <_isatty_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d06      	ldr	r5, [pc, #24]	@ (8004784 <_isatty_r+0x1c>)
 800476c:	2300      	movs	r3, #0
 800476e:	4604      	mov	r4, r0
 8004770:	4608      	mov	r0, r1
 8004772:	602b      	str	r3, [r5, #0]
 8004774:	f7fc fec1 	bl	80014fa <_isatty>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d102      	bne.n	8004782 <_isatty_r+0x1a>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	b103      	cbz	r3, 8004782 <_isatty_r+0x1a>
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	bd38      	pop	{r3, r4, r5, pc}
 8004784:	20000268 	.word	0x20000268

08004788 <_sbrk_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4d06      	ldr	r5, [pc, #24]	@ (80047a4 <_sbrk_r+0x1c>)
 800478c:	2300      	movs	r3, #0
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fc feca 	bl	800152c <_sbrk>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_sbrk_r+0x1a>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_sbrk_r+0x1a>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20000268 	.word	0x20000268

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr
