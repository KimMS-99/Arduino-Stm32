
adc1_ch0_ch1_clcd_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007280  08007280  00008280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080076bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001d4  08007890  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08007890  0000943c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1e3  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb8  00000000  00000000  000163e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000183a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000948  00000000  00000000  00018f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180df  00000000  00000000  000198d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef89  00000000  00000000  000319b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960eb  00000000  00000000  00040940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000d6a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000dadc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007264 	.word	0x08007264

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007264 	.word	0x08007264

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 8000eec:	4a18      	ldr	r2, [pc, #96]	@ (8000f50 <LCD_init+0x6c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 8000ef2:	2032      	movs	r0, #50	@ 0x32
 8000ef4:	f000 fe78 	bl	8001be8 <HAL_Delay>
	LCD_cmdMode();
 8000ef8:	f000 f89a 	bl	8001030 <LCD_cmdMode>
	LCD_writeMode();
 8000efc:	f000 f8b8 	bl	8001070 <LCD_writeMode>
	LCD_sendData(0x30);
 8000f00:	2030      	movs	r0, #48	@ 0x30
 8000f02:	f000 f849 	bl	8000f98 <LCD_sendData>
	HAL_Delay(5);
 8000f06:	2005      	movs	r0, #5
 8000f08:	f000 fe6e 	bl	8001be8 <HAL_Delay>
	LCD_sendData(0x30);
 8000f0c:	2030      	movs	r0, #48	@ 0x30
 8000f0e:	f000 f843 	bl	8000f98 <LCD_sendData>
	HAL_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fe68 	bl	8001be8 <HAL_Delay>
	LCD_sendData(0x30);
 8000f18:	2030      	movs	r0, #48	@ 0x30
 8000f1a:	f000 f83d 	bl	8000f98 <LCD_sendData>
	LCD_sendData(0x20);
 8000f1e:	2020      	movs	r0, #32
 8000f20:	f000 f83a 	bl	8000f98 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 8000f24:	2028      	movs	r0, #40	@ 0x28
 8000f26:	f000 f85f 	bl	8000fe8 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000f2a:	2008      	movs	r0, #8
 8000f2c:	f000 f85c 	bl	8000fe8 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 f859 	bl	8000fe8 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 8000f36:	2006      	movs	r0, #6
 8000f38:	f000 f856 	bl	8000fe8 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000f3c:	200c      	movs	r0, #12
 8000f3e:	f000 f853 	bl	8000fe8 <LCD_sendByte>
	LCD_backLightOn();
 8000f42:	f000 f865 	bl	8001010 <LCD_backLightOn>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001f4 	.word	0x200001f4

08000f54 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000f5e:	f000 f867 	bl	8001030 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 8000f62:	f000 f885 	bl	8001070 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f83d 	bl	8000fe8 <LCD_sendByte>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000f80:	f000 f866 	bl	8001050 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 8000f84:	f000 f874 	bl	8001070 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f82c 	bl	8000fe8 <LCD_sendByte>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 8000fa2:	f000 f875 	bl	8001090 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fe1e 	bl	8001be8 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <LCD_sendData+0x4c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <LCD_sendData+0x4c>)
 8000fca:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000fcc:	f000 f880 	bl	80010d0 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 8000fd0:	f000 f86e 	bl	80010b0 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f000 fe07 	bl	8001be8 <HAL_Delay>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001f0 	.word	0x200001f0

08000fe8 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffcf 	bl	8000f98 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc8 	bl	8000f98 <LCD_sendData>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <LCD_backLightOn>:
void LCD_backLightOn() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LCD_backLightOn+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b03      	ldr	r3, [pc, #12]	@ (800102c <LCD_backLightOn+0x1c>)
 8001020:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001022:	f000 f855 	bl	80010d0 <LCD_sendDataToInterface>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001f0 	.word	0x200001f0

08001030 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <LCD_cmdMode+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b03      	ldr	r3, [pc, #12]	@ (800104c <LCD_cmdMode+0x1c>)
 8001040:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001042:	f000 f845 	bl	80010d0 <LCD_sendDataToInterface>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0

08001050 <LCD_charMode>:

void LCD_charMode() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <LCD_charMode+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b03      	ldr	r3, [pc, #12]	@ (800106c <LCD_charMode+0x1c>)
 8001060:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001062:	f000 f835 	bl	80010d0 <LCD_sendDataToInterface>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001f0 	.word	0x200001f0

08001070 <LCD_writeMode>:

void LCD_writeMode() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <LCD_writeMode+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b03      	ldr	r3, [pc, #12]	@ (800108c <LCD_writeMode+0x1c>)
 8001080:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001082:	f000 f825 	bl	80010d0 <LCD_sendDataToInterface>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f0 	.word	0x200001f0

08001090 <LCD_enableHigh>:

void LCD_enableHigh() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <LCD_enableHigh+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <LCD_enableHigh+0x1c>)
 80010a0:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80010a2:	f000 f815 	bl	80010d0 <LCD_sendDataToInterface>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001f0 	.word	0x200001f0

080010b0 <LCD_enableLow>:

void LCD_enableLow() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <LCD_enableLow+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <LCD_enableLow+0x1c>)
 80010c0:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80010c2:	f000 f805 	bl	80010d0 <LCD_sendDataToInterface>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001f0 	.word	0x200001f0

080010d0 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <LCD_sendDataToInterface+0x20>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	2364      	movs	r3, #100	@ 0x64
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <LCD_sendDataToInterface+0x24>)
 80010e2:	214e      	movs	r1, #78	@ 0x4e
 80010e4:	f001 fe04 	bl	8002cf0 <HAL_I2C_Master_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f4 	.word	0x200001f4
 80010f4:	200001f0 	.word	0x200001f0

080010f8 <LCD_writeString>:

void LCD_writeString(char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e009      	b.n	800111a <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff31 	bl	8000f76 <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ef      	bne.n	8001106 <LCD_writeString+0xe>
	}
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	019b      	lsls	r3, r3, #6
 8001154:	b2da      	uxtb	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	4413      	add	r3, r2
 800115a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3b80      	subs	r3, #128	@ 0x80
 8001160:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fef5 	bl	8000f54 <LCD_writeCmdData>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	603a      	str	r2, [r7, #0]
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffd1 	bl	8001130 <LCD_gotoXY>
	LCD_writeString(str);
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f7ff ffb2 	bl	80010f8 <LCD_writeString>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	0000      	movs	r0, r0
	...

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b08d      	sub	sp, #52	@ 0x34
 80011a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f000 fcad 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f88f 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 f9af 	bl	8001510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 f983 	bl	80014bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011b6:	f000 f953 	bl	8001460 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011ba:	f000 f8f1 	bl	80013a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hi2c1);
 80011be:	4838      	ldr	r0, [pc, #224]	@ (80012a0 <main+0x100>)
 80011c0:	f7ff fe90 	bl	8000ee4 <LCD_init>
  printf("start main() adc1_ch0_ch1_clcd_interupt\r\n");
 80011c4:	4837      	ldr	r0, [pc, #220]	@ (80012a4 <main+0x104>)
 80011c6:	f003 ff11 	bl	8004fec <puts>
  LCD_writeStringXY(0, 0, "start main()!");
 80011ca:	4a37      	ldr	r2, [pc, #220]	@ (80012a8 <main+0x108>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ffcf 	bl	8001172 <LCD_writeStringXY>
  LCD_writeStringXY(1, 0, "adc1_ch0_ch1_clcd");
 80011d4:	4a35      	ldr	r2, [pc, #212]	@ (80012ac <main+0x10c>)
 80011d6:	2100      	movs	r1, #0
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff ffca 	bl	8001172 <LCD_writeStringXY>

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 80011de:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <main+0x110>)
 80011e0:	f000 fd6a 	bl	8001cb8 <HAL_ADC_Start_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <main+0x4e>
	  Error_Handler();
 80011ea:	f000 fa45 	bl	8001678 <Error_Handler>
			ADC1ConvertVaue[i] = HAL_ADC_GetValue(&hadc1);
		}
	  }
	  HAL_ADC_Stop(&hadc1);
#endif
	  if(adcFlag)
 80011ee:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <main+0x114>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0fb      	beq.n	80011ee <main+0x4e>
	  {
		  sprintf(lcd_buf1, "VAR : %d        ", ADC1ConvertVaue[0]);
 80011f6:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <main+0x118>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	492e      	ldr	r1, [pc, #184]	@ (80012bc <main+0x11c>)
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fef9 	bl	8004ffc <siprintf>
		  sprintf(lcd_buf2, "CDS : %d        ", ADC1ConvertVaue[1]);
 800120a:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <main+0x118>)
 800120c:	885b      	ldrh	r3, [r3, #2]
 800120e:	b29b      	uxth	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	463b      	mov	r3, r7
 8001214:	492a      	ldr	r1, [pc, #168]	@ (80012c0 <main+0x120>)
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fef0 	bl	8004ffc <siprintf>

		  LCD_writeStringXY(0, 0, lcd_buf1);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	461a      	mov	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ffa4 	bl	8001172 <LCD_writeStringXY>
		  LCD_writeStringXY(1, 0, lcd_buf2);
 800122a:	463b      	mov	r3, r7
 800122c:	461a      	mov	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff ff9e 	bl	8001172 <LCD_writeStringXY>

		  printf("VAR = %d, VAR_V = %lf CDS = %d\r\n", ADC1ConvertVaue[0], ADC1ConvertVaue[0] * 3.3 / 4096, ADC1ConvertVaue[1]);
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <main+0x118>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461c      	mov	r4, r3
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <main+0x118>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f975 	bl	8000534 <__aeabi_i2d>
 800124a:	a313      	add	r3, pc, #76	@ (adr r3, 8001298 <main+0xf8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9da 	bl	8000608 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <main+0x124>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4913      	ldr	r1, [pc, #76]	@ (80012b8 <main+0x118>)
 800126c:	8849      	ldrh	r1, [r1, #2]
 800126e:	b289      	uxth	r1, r1
 8001270:	9100      	str	r1, [sp, #0]
 8001272:	4621      	mov	r1, r4
 8001274:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <main+0x128>)
 8001276:	f003 fe51 	bl	8004f1c <iprintf>
		  adcFlag = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <main+0x114>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
		  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <main+0x110>)
 8001282:	f000 fd19 	bl	8001cb8 <HAL_ADC_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0b0      	beq.n	80011ee <main+0x4e>
			  Error_Handler();
 800128c:	f000 f9f4 	bl	8001678 <Error_Handler>
	  if(adcFlag)
 8001290:	e7ad      	b.n	80011ee <main+0x4e>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	66666666 	.word	0x66666666
 800129c:	400a6666 	.word	0x400a6666
 80012a0:	20000240 	.word	0x20000240
 80012a4:	08007280 	.word	0x08007280
 80012a8:	080072ac 	.word	0x080072ac
 80012ac:	080072bc 	.word	0x080072bc
 80012b0:	200001f8 	.word	0x200001f8
 80012b4:	200002e0 	.word	0x200002e0
 80012b8:	200002dc 	.word	0x200002dc
 80012bc:	080072d0 	.word	0x080072d0
 80012c0:	080072e4 	.word	0x080072e4
 80012c4:	40b00000 	.word	0x40b00000
 80012c8:	080072f8 	.word	0x080072f8

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	@ 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	@ 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 ff88 	bl	80051f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <SystemClock_Config+0xcc>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	@ (800139c <SystemClock_Config+0xd0>)
 8001316:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800133c:	2310      	movs	r3, #16
 800133e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001340:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001346:	2304      	movs	r3, #4
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800134a:	2304      	movs	r3, #4
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f826 	bl	80033a4 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800135e:	f000 f98b 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fa88 	bl	8003894 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800138a:	f000 f975 	bl	8001678 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	@ 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b2:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013b4:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <MX_ADC1_Init+0xb8>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80013b8:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <MX_ADC1_Init+0xbc>)
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_ADC1_Init+0xb4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001400:	4814      	ldr	r0, [pc, #80]	@ (8001454 <MX_ADC1_Init+0xb4>)
 8001402:	f000 fc15 	bl	8001c30 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 f934 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <MX_ADC1_Init+0xb4>)
 8001422:	f000 fe39 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 f924 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001430:	2301      	movs	r3, #1
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_ADC1_Init+0xb4>)
 800143e:	f000 fe2b 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001448:	f000 f916 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001f8 	.word	0x200001f8
 8001458:	40012000 	.word	0x40012000
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001466:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <MX_I2C1_Init+0x54>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800146c:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <MX_I2C1_Init+0x58>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800147e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800149e:	f001 fae3 	bl	8002a68 <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 f8e6 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000240 	.word	0x20000240
 80014b4:	40005400 	.word	0x40005400
 80014b8:	000186a0 	.word	0x000186a0

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f002 fbee 	bl	8003cd4 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 f8bb 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000294 	.word	0x20000294
 800150c:	40004400 	.word	0x40004400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a2c      	ldr	r2, [pc, #176]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a1e      	ldr	r2, [pc, #120]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2120      	movs	r1, #32
 800159a:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <MX_GPIO_Init+0xd4>)
 800159c:	f001 fa4a 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <MX_GPIO_Init+0xd8>)
 80015b8:	f001 f8b8 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015bc:	2320      	movs	r3, #32
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_GPIO_Init+0xd4>)
 80015d4:	f001 f8aa 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020800 	.word	0x40020800

080015ec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	static int channel = 0;
	if(channel == 0)
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_ADC_ConvCpltCallback+0x2c>
	{

		ADC1ConvertVaue[channel] = HAL_ADC_GetValue(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd29 	bl	8002054 <HAL_ADC_GetValue>
 8001602:	4602      	mov	r2, r0
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b291      	uxth	r1, r2
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_ADC_ConvCpltCallback+0x60>)
 800160c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 1;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
	{
		ADC1ConvertVaue[channel] = HAL_ADC_GetValue(hadc);
		channel = 0;
		adcFlag = 1;
	}
}
 8001616:	e013      	b.n	8001640 <HAL_ADC_ConvCpltCallback+0x54>
	else if(channel == 1)
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d10f      	bne.n	8001640 <HAL_ADC_ConvCpltCallback+0x54>
		ADC1ConvertVaue[channel] = HAL_ADC_GetValue(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fd17 	bl	8002054 <HAL_ADC_GetValue>
 8001626:	4602      	mov	r2, r0
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b291      	uxth	r1, r2
 800162e:	4a07      	ldr	r2, [pc, #28]	@ (800164c <HAL_ADC_ConvCpltCallback+0x60>)
 8001630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 0;
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
		adcFlag = 1;
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_ADC_ConvCpltCallback+0x64>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200002e4 	.word	0x200002e4
 800164c:	200002dc 	.word	0x200002dc
 8001650:	200002e0 	.word	0x200002e0

08001654 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <__io_putchar+0x20>)
 8001666:	f002 fb85 	bl	8003d74 <HAL_UART_Transmit>

  return ch;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000294 	.word	0x20000294

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c2:	2007      	movs	r0, #7
 80016c4:	f000 fff0 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <HAL_ADC_MspInit+0x8c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12f      	bne.n	8001756 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_ADC_MspInit+0x90>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172e:	2303      	movs	r3, #3
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <HAL_ADC_MspInit+0x94>)
 8001742:	f000 fff3 	bl	800272c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2012      	movs	r0, #18
 800174c:	f000 ffb7 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001750:	2012      	movs	r0, #18
 8001752:	f000 ffd0 	bl	80026f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40012000 	.word	0x40012000
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_I2C_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12c      	bne.n	80017e8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b0:	2312      	movs	r3, #18
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017bc:	2304      	movs	r3, #4
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <HAL_I2C_MspInit+0x8c>)
 80017c8:	f000 ffb0 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	@ 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_UART_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12b      	bne.n	8001876 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001856:	230c      	movs	r3, #12
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001866:	2307      	movs	r3, #7
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 8001872:	f000 ff5b 	bl	800272c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	@ 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004400 	.word	0x40004400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e2:	f000 f961 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <ADC_IRQHandler+0x10>)
 80018f2:	f000 fa9f 	bl	8001e34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001f8 	.word	0x200001f8

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f003 fcbb 	bl	8005294 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <_exit+0x12>

08001946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e00a      	b.n	800196e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001958:	f3af 8000 	nop.w
 800195c:	4601      	mov	r1, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf0      	blt.n	8001958 <_read+0x12>
  }

  return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e009      	b.n	80019a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fe5a 	bl	8001654 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf1      	blt.n	8001992 <_write+0x12>
  }
  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_close>:

int _close(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f003 fc20 	bl	8005294 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20020000 	.word	0x20020000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	200002e8 	.word	0x200002e8
 8001a88:	20000440 	.word	0x20000440

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f003 fbdf 	bl	80052a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fb5d 	bl	80011a0 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001af4:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 8001af8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001afc:	2000043c 	.word	0x2000043c

08001b00 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <DMA1_Stream0_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 fdbb 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fda4 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fdd3 	bl	8002712 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 fd9b 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	200002ec 	.word	0x200002ec

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200002ec 	.word	0x200002ec

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e033      	b.n	8001cae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd40 	bl	80016d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c76:	f023 0302 	bic.w	r3, r3, #2
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fb3a 	bl	80022fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c9e:	e001      	b.n	8001ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Start_IT+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0a1      	b.n	8001e16 <HAL_ADC_Start_IT+0x15e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d018      	beq.n	8001d1a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <HAL_ADC_Start_IT+0x16c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8001e28 <HAL_ADC_Start_IT+0x170>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9a      	lsrs	r2, r3, #18
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d169      	bne.n	8001dfc <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d66:	d106      	bne.n	8001d76 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	f023 0206 	bic.w	r2, r3, #6
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d84:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <HAL_ADC_Start_IT+0x174>)
 8001d86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d90:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d129      	bne.n	8001e14 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	e020      	b.n	8001e14 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <HAL_ADC_Start_IT+0x178>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d11b      	bne.n	8001e14 <HAL_ADC_Start_IT+0x15c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d114      	bne.n	8001e14 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	e00b      	b.n	8001e14 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f043 0210 	orr.w	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	40012300 	.word	0x40012300
 8001e30:	40012000 	.word	0x40012000

08001e34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d049      	beq.n	8001efe <HAL_ADC_IRQHandler+0xca>
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d046      	beq.n	8001efe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d12b      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d127      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fb7c 	bl	80015ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0212 	mvn.w	r2, #18
 8001efc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d057      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x190>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d054      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d139      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f46:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d12b      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d124      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11d      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d119      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fa9d 	bl	80024f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 020c 	mvn.w	r2, #12
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d017      	beq.n	800200a <HAL_ADC_IRQHandler+0x1d6>
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d014      	beq.n	800200a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f837 	bl	800206e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002018:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_ADC_IRQHandler+0x218>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0220 	mvn.w	r2, #32
 800203a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f820 	bl	8002082 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0220 	mvn.w	r2, #32
 800204a:	601a      	str	r2, [r3, #0]
  }
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e113      	b.n	80022dc <HAL_ADC_ConfigChannel+0x244>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d925      	bls.n	8002110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	3b1e      	subs	r3, #30
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e022      	b.n	8002156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	2207      	movs	r2, #7
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4403      	add	r3, r0
 800214c:	409a      	lsls	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d824      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b05      	subs	r3, #5
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a6:	e04c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b23      	subs	r3, #35	@ 0x23
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	@ 0x23
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f8:	e023      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	@ 0x41
 800220c:	221f      	movs	r2, #31
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b41      	subs	r3, #65	@ 0x41
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002242:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_ADC_ConfigChannel+0x250>)
 8002244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <HAL_ADC_ConfigChannel+0x254>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10f      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d10b      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_ADC_ConfigChannel+0x254>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12b      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <HAL_ADC_ConfigChannel+0x1f4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b11      	cmp	r3, #17
 800228a:	d122      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_ADC_ConfigChannel+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <HAL_ADC_ConfigChannel+0x260>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40012300 	.word	0x40012300
 80022ec:	40012000 	.word	0x40012000
 80022f0:	10000012 	.word	0x10000012
 80022f4:	20000000 	.word	0x20000000
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002304:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <ADC_Init+0x1f0>)
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <ADC_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e00f      	b.n	80023fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	005a      	lsls	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002436:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e007      	b.n	8002470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	051a      	lsls	r2, r3, #20
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024b2:	025a      	lsls	r2, r3, #9
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	029a      	lsls	r2, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	0f000001 	.word	0x0f000001

080024f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	@ (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e159      	b.n	80029fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	f040 8148 	bne.w	80029f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d005      	beq.n	800277e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	2b02      	cmp	r3, #2
 800277c:	d130      	bne.n	80027e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 0201 	and.w	r2, r3, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d017      	beq.n	800281c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d123      	bne.n	8002870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	08da      	lsrs	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3208      	adds	r2, #8
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a2 	beq.w	80029f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	4a56      	ldr	r2, [pc, #344]	@ (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028c2:	4b54      	ldr	r3, [pc, #336]	@ (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ce:	4a52      	ldr	r2, [pc, #328]	@ (8002a18 <HAL_GPIO_Init+0x2ec>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a49      	ldr	r2, [pc, #292]	@ (8002a1c <HAL_GPIO_Init+0x2f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d019      	beq.n	800292e <HAL_GPIO_Init+0x202>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a48      	ldr	r2, [pc, #288]	@ (8002a20 <HAL_GPIO_Init+0x2f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x1fe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a47      	ldr	r2, [pc, #284]	@ (8002a24 <HAL_GPIO_Init+0x2f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x1fa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a46      	ldr	r2, [pc, #280]	@ (8002a28 <HAL_GPIO_Init+0x2fc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x1f6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a45      	ldr	r2, [pc, #276]	@ (8002a2c <HAL_GPIO_Init+0x300>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x1f2>
 800291a:	2304      	movs	r3, #4
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800291e:	2307      	movs	r3, #7
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x204>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x204>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <HAL_GPIO_Init+0x2ec>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002972:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002978:	4b2d      	ldr	r3, [pc, #180]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299c:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a2:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f aea2 	bls.w	8002748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e12b      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fe6c 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	@ 0x24
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002acc:	f001 f8da 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	@ (8002cdc <HAL_I2C_Init+0x274>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d807      	bhi.n	8002aec <HAL_I2C_Init+0x84>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a80      	ldr	r2, [pc, #512]	@ (8002ce0 <HAL_I2C_Init+0x278>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	bf94      	ite	ls
 8002ae4:	2301      	movls	r3, #1
 8002ae6:	2300      	movhi	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e006      	b.n	8002afa <HAL_I2C_Init+0x92>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7d      	ldr	r2, [pc, #500]	@ (8002ce4 <HAL_I2C_Init+0x27c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0e7      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a78      	ldr	r2, [pc, #480]	@ (8002ce8 <HAL_I2C_Init+0x280>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	@ (8002cdc <HAL_I2C_Init+0x274>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d802      	bhi.n	8002b3c <HAL_I2C_Init+0xd4>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e009      	b.n	8002b50 <HAL_I2C_Init+0xe8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a69      	ldr	r2, [pc, #420]	@ (8002cec <HAL_I2C_Init+0x284>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3301      	adds	r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	495c      	ldr	r1, [pc, #368]	@ (8002cdc <HAL_I2C_Init+0x274>)
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d819      	bhi.n	8002ba4 <HAL_I2C_Init+0x13c>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e59      	subs	r1, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b84:	400b      	ands	r3, r1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_Init+0x138>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e59      	subs	r1, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	e051      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e04f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_I2C_Init+0x168>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e58      	subs	r0, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e012      	b.n	8002bf6 <HAL_I2C_Init+0x18e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x196>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e022      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <HAL_I2C_Init+0x1bc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e58      	subs	r0, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	440b      	add	r3, r1
 8002c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6911      	ldr	r1, [r2, #16]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	000186a0 	.word	0x000186a0
 8002ce0:	001e847f 	.word	0x001e847f
 8002ce4:	003d08ff 	.word	0x003d08ff
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7fe ff64 	bl	8001bd0 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 80e0 	bne.w	8002ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2319      	movs	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4970      	ldr	r1, [pc, #448]	@ (8002ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f964 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0d3      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x50>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0cc      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d007      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	@ 0x21
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2210      	movs	r2, #16
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f89c 	bl	8002eec <I2C_MasterRequestWrite>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e08d      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dd4:	e066      	b.n	8002ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa22 	bl	8003224 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d11b      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x188>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6a39      	ldr	r1, [r7, #32]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa19 	bl	80032b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d107      	bne.n	8002ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e01a      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d194      	bne.n	8002dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	00100002 	.word	0x00100002
 8002ee8:	ffff0000 	.word	0xffff0000

08002eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d006      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d003      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f14:	d108      	bne.n	8002f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e00b      	b.n	8002f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d107      	bne.n	8002f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f84f 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f66:	d103      	bne.n	8002f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e035      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f7c:	d108      	bne.n	8002f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f8c:	611a      	str	r2, [r3, #16]
 8002f8e:	e01b      	b.n	8002fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	11db      	asrs	r3, r3, #7
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0306 	and.w	r3, r3, #6
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f063 030f 	orn	r3, r3, #15
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	490e      	ldr	r1, [pc, #56]	@ (8002fe8 <I2C_MasterRequestWrite+0xfc>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f898 	bl	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e010      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4907      	ldr	r1, [pc, #28]	@ (8002fec <I2C_MasterRequestWrite+0x100>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f888 	bl	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010008 	.word	0x00010008
 8002fec:	00010002 	.word	0x00010002

08002ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003000:	e048      	b.n	8003094 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d044      	beq.n	8003094 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300a:	f7fe fde1 	bl	8001bd0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d139      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	0c1b      	lsrs	r3, r3, #16
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d10d      	bne.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x56>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	43da      	mvns	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	e00c      	b.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	43da      	mvns	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	429a      	cmp	r2, r3
 8003064:	d116      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e023      	b.n	80030dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10d      	bne.n	80030ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	e00c      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d093      	beq.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f2:	e071      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003102:	d123      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800311c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e067      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d041      	beq.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fe fd3c 	bl	8001bd0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d136      	bne.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10c      	bne.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e00b      	b.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	43da      	mvns	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e021      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d10c      	bne.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e00b      	b.n	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f af6d 	bne.w	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003230:	e034      	b.n	800329c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f886 	bl	8003344 <I2C_IsAcknowledgeFailed>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e034      	b.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d028      	beq.n	800329c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe fcc1 	bl	8001bd0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11d      	bne.n	800329c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d016      	beq.n	800329c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a6:	2b80      	cmp	r3, #128	@ 0x80
 80032a8:	d1c3      	bne.n	8003232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c0:	e034      	b.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f83e 	bl	8003344 <I2C_IsAcknowledgeFailed>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e034      	b.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d028      	beq.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fc79 	bl	8001bd0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d016      	beq.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d1c3      	bne.n	80032c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335a:	d11b      	bne.n	8003394 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003364:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f043 0204 	orr.w	r2, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e267      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d075      	beq.n	80034ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033c2:	4b88      	ldr	r3, [pc, #544]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d00c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b85      	ldr	r3, [pc, #532]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d112      	bne.n	8003400 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033da:	4b82      	ldr	r3, [pc, #520]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e6:	d10b      	bne.n	8003400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	4b7e      	ldr	r3, [pc, #504]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d05b      	beq.n	80034ac <HAL_RCC_OscConfig+0x108>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d157      	bne.n	80034ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e242      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x74>
 800340a:	4b76      	ldr	r3, [pc, #472]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a75      	ldr	r2, [pc, #468]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e01d      	b.n	8003454 <HAL_RCC_OscConfig+0xb0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x98>
 8003422:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6f      	ldr	r2, [pc, #444]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b6d      	ldr	r3, [pc, #436]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6c      	ldr	r2, [pc, #432]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0xb0>
 800343c:	4b69      	ldr	r3, [pc, #420]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a68      	ldr	r2, [pc, #416]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b66      	ldr	r3, [pc, #408]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a65      	ldr	r2, [pc, #404]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fbb8 	bl	8001bd0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fbb4 	bl	8001bd0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e207      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b5b      	ldr	r3, [pc, #364]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0xc0>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fba4 	bl	8001bd0 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fba0 	bl	8001bd0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e1f3      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	4b51      	ldr	r3, [pc, #324]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0xe8>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d063      	beq.n	8003582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ba:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c6:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d11c      	bne.n	800350c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d2:	4b44      	ldr	r3, [pc, #272]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d116      	bne.n	800350c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_RCC_OscConfig+0x152>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e1c7      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4937      	ldr	r1, [pc, #220]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	e03a      	b.n	8003582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003514:	4b34      	ldr	r3, [pc, #208]	@ (80035e8 <HAL_RCC_OscConfig+0x244>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fe fb59 	bl	8001bd0 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003522:	f7fe fb55 	bl	8001bd0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1a8      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	4b2b      	ldr	r3, [pc, #172]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4925      	ldr	r1, [pc, #148]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]
 8003554:	e015      	b.n	8003582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003556:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_RCC_OscConfig+0x244>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fb38 	bl	8001bd0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003564:	f7fe fb34 	bl	8001bd0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e187      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d036      	beq.n	80035fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <HAL_RCC_OscConfig+0x248>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe fb18 	bl	8001bd0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a4:	f7fe fb14 	bl	8001bd0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e167      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_RCC_OscConfig+0x240>)
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x200>
 80035c2:	e01b      	b.n	80035fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_RCC_OscConfig+0x248>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ca:	f7fe fb01 	bl	8001bd0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	e00e      	b.n	80035f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d2:	f7fe fafd 	bl	8001bd0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d907      	bls.n	80035f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e150      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
 80035e4:	40023800 	.word	0x40023800
 80035e8:	42470000 	.word	0x42470000
 80035ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b88      	ldr	r3, [pc, #544]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ea      	bne.n	80035d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8097 	beq.w	8003738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b81      	ldr	r3, [pc, #516]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b7d      	ldr	r3, [pc, #500]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	4a7c      	ldr	r2, [pc, #496]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	@ 0x40
 800362a:	4b7a      	ldr	r3, [pc, #488]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b77      	ldr	r3, [pc, #476]	@ (8003818 <HAL_RCC_OscConfig+0x474>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b74      	ldr	r3, [pc, #464]	@ (8003818 <HAL_RCC_OscConfig+0x474>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a73      	ldr	r2, [pc, #460]	@ (8003818 <HAL_RCC_OscConfig+0x474>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fe fabd 	bl	8001bd0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe fab9 	bl	8001bd0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e10c      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_OscConfig+0x474>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x2ea>
 8003680:	4b64      	ldr	r3, [pc, #400]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a63      	ldr	r2, [pc, #396]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
 800368c:	e01c      	b.n	80036c8 <HAL_RCC_OscConfig+0x324>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x30c>
 8003696:	4b5f      	ldr	r3, [pc, #380]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	4a5e      	ldr	r2, [pc, #376]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0x324>
 80036b0:	4b58      	ldr	r3, [pc, #352]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	4a57      	ldr	r2, [pc, #348]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80036bc:	4b55      	ldr	r3, [pc, #340]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	4a54      	ldr	r2, [pc, #336]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036c2:	f023 0304 	bic.w	r3, r3, #4
 80036c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fe fa7e 	bl	8001bd0 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe fa7a 	bl	8001bd0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0cb      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	4b49      	ldr	r3, [pc, #292]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0ee      	beq.n	80036d8 <HAL_RCC_OscConfig+0x334>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fc:	f7fe fa68 	bl	8001bd0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe fa64 	bl	8001bd0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0b5      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	4b3e      	ldr	r3, [pc, #248]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1ee      	bne.n	8003704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b39      	ldr	r3, [pc, #228]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a1 	beq.w	8003884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003742:	4b34      	ldr	r3, [pc, #208]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b08      	cmp	r3, #8
 800374c:	d05c      	beq.n	8003808 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d141      	bne.n	80037da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003756:	4b31      	ldr	r3, [pc, #196]	@ (800381c <HAL_RCC_OscConfig+0x478>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fa38 	bl	8001bd0 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fa34 	bl	8001bd0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e087      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	3b01      	subs	r3, #1
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	491b      	ldr	r1, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x478>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fa0d 	bl	8001bd0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fa09 	bl	8001bd0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e05c      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x416>
 80037d8:	e054      	b.n	8003884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <HAL_RCC_OscConfig+0x478>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe f9f6 	bl	8001bd0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe f9f2 	bl	8001bd0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e045      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <HAL_RCC_OscConfig+0x470>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x444>
 8003806:	e03d      	b.n	8003884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e038      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
 8003814:	40023800 	.word	0x40023800
 8003818:	40007000 	.word	0x40007000
 800381c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003820:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_RCC_OscConfig+0x4ec>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d028      	beq.n	8003880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d121      	bne.n	8003880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d11a      	bne.n	8003880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003858:	4293      	cmp	r3, r2
 800385a:	d111      	bne.n	8003880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	3b01      	subs	r3, #1
 800386a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800

08003894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0cc      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b68      	ldr	r3, [pc, #416]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90c      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b65      	ldr	r3, [pc, #404]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b59      	ldr	r3, [pc, #356]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a58      	ldr	r2, [pc, #352]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a52      	ldr	r2, [pc, #328]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800390a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b50      	ldr	r3, [pc, #320]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	494d      	ldr	r1, [pc, #308]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d044      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d119      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d003      	beq.n	8003952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394e:	2b03      	cmp	r3, #3
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b3f      	ldr	r3, [pc, #252]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b3b      	ldr	r3, [pc, #236]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e067      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b37      	ldr	r3, [pc, #220]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4934      	ldr	r1, [pc, #208]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7fe f924 	bl	8001bd0 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7fe f920 	bl	8001bd0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 020c 	and.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1eb      	bne.n	800398c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d20c      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b22      	ldr	r3, [pc, #136]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e032      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4916      	ldr	r1, [pc, #88]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a06:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	490e      	ldr	r1, [pc, #56]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1a:	f000 f821 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	490a      	ldr	r1, [pc, #40]	@ (8003a54 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f884 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023c00 	.word	0x40023c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	0800731c 	.word	0x0800731c
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	20000004 	.word	0x20000004

08003a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a64:	b094      	sub	sp, #80	@ 0x50
 8003a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a78:	4b79      	ldr	r3, [pc, #484]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d00d      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	f200 80e1 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a92:	e0db      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b73      	ldr	r3, [pc, #460]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a98:	e0db      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9a:	4b73      	ldr	r3, [pc, #460]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a9e:	e0d8      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	2200      	movs	r2, #0
 8003abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	f04f 0000 	mov.w	r0, #0
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	0159      	lsls	r1, r3, #5
 8003ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae4:	0150      	lsls	r0, r2, #5
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4621      	mov	r1, r4
 8003aec:	1a51      	subs	r1, r2, r1
 8003aee:	6139      	str	r1, [r7, #16]
 8003af0:	4629      	mov	r1, r5
 8003af2:	eb63 0301 	sbc.w	r3, r3, r1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b04:	4659      	mov	r1, fp
 8003b06:	018b      	lsls	r3, r1, #6
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b0e:	4651      	mov	r1, sl
 8003b10:	018a      	lsls	r2, r1, #6
 8003b12:	4651      	mov	r1, sl
 8003b14:	ebb2 0801 	subs.w	r8, r2, r1
 8003b18:	4659      	mov	r1, fp
 8003b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b32:	4690      	mov	r8, r2
 8003b34:	4699      	mov	r9, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	eb18 0303 	adds.w	r3, r8, r3
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	462b      	mov	r3, r5
 8003b40:	eb49 0303 	adc.w	r3, r9, r3
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b52:	4629      	mov	r1, r5
 8003b54:	024b      	lsls	r3, r1, #9
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	024a      	lsls	r2, r1, #9
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b66:	2200      	movs	r2, #0
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b70:	f7fd f822 	bl	8000bb8 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7c:	e058      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	2200      	movs	r2, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	4611      	mov	r1, r2
 8003b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	f04f 0000 	mov.w	r0, #0
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	0159      	lsls	r1, r3, #5
 8003ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003baa:	0150      	lsls	r0, r2, #5
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	eb45 0303 	adc.w	r3, r5, r3
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c06:	4629      	mov	r1, r5
 8003c08:	028b      	lsls	r3, r1, #10
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c10:	4621      	mov	r1, r4
 8003c12:	028a      	lsls	r2, r1, #10
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	61fa      	str	r2, [r7, #28]
 8003c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c24:	f7fc ffc8 	bl	8000bb8 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3750      	adds	r7, #80	@ 0x50
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	007a1200 	.word	0x007a1200

08003c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c70:	4b03      	ldr	r3, [pc, #12]	@ (8003c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000000 	.word	0x20000000

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0800732c 	.word	0x0800732c

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb0:	f7ff ffdc 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800732c 	.word	0x0800732c

08003cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e042      	b.n	8003d6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fd7e 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	@ 0x24
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f973 	bl	8004004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d175      	bne.n	8003e80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Transmit+0x2c>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e06e      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2221      	movs	r2, #33	@ 0x21
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db2:	f7fd ff0d 	bl	8001bd0 <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x6c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003de8:	e02e      	b.n	8003e48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f848 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e03a      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3302      	adds	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e007      	b.n	8003e3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2140      	movs	r1, #64	@ 0x40
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f814 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e03b      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d037      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea4:	f7fd fe94 	bl	8001bd0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	6a3a      	ldr	r2, [r7, #32]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e03a      	b.n	8003f34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d023      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b80      	cmp	r3, #128	@ 0x80
 8003ed0:	d020      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b40      	cmp	r3, #64	@ 0x40
 8003ed6:	d01d      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d116      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f81d 	bl	8003f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2208      	movs	r2, #8
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e00f      	b.n	8003f34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d0b4      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b095      	sub	sp, #84	@ 0x54
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f64:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d119      	bne.n	8003fe8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd4:	61ba      	str	r2, [r7, #24]
 8003fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6979      	ldr	r1, [r7, #20]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ff6:	bf00      	nop
 8003ff8:	3754      	adds	r7, #84	@ 0x54
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b0c0      	sub	sp, #256	@ 0x100
 800400a:	af00      	add	r7, sp, #0
 800400c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	ea40 0301 	orr.w	r3, r0, r1
 800402c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800405c:	f021 010c 	bic.w	r1, r1, #12
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800406a:	430b      	orrs	r3, r1
 800406c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407e:	6999      	ldr	r1, [r3, #24]
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	ea40 0301 	orr.w	r3, r0, r1
 800408a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <UART_SetConfig+0x2cc>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d005      	beq.n	80040a4 <UART_SetConfig+0xa0>
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b8d      	ldr	r3, [pc, #564]	@ (80042d4 <UART_SetConfig+0x2d0>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d104      	bne.n	80040ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7ff fe02 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 80040a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040ac:	e003      	b.n	80040b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ae:	f7ff fde9 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 80040b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c0:	f040 810c 	bne.w	80042dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	1891      	adds	r1, r2, r2
 80040dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040de:	415b      	adcs	r3, r3
 80040e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040e6:	4621      	mov	r1, r4
 80040e8:	eb12 0801 	adds.w	r8, r2, r1
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb43 0901 	adc.w	r9, r3, r1
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004106:	4690      	mov	r8, r2
 8004108:	4699      	mov	r9, r3
 800410a:	4623      	mov	r3, r4
 800410c:	eb18 0303 	adds.w	r3, r8, r3
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004114:	462b      	mov	r3, r5
 8004116:	eb49 0303 	adc.w	r3, r9, r3
 800411a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800412a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800412e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004132:	460b      	mov	r3, r1
 8004134:	18db      	adds	r3, r3, r3
 8004136:	653b      	str	r3, [r7, #80]	@ 0x50
 8004138:	4613      	mov	r3, r2
 800413a:	eb42 0303 	adc.w	r3, r2, r3
 800413e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004148:	f7fc fd36 	bl	8000bb8 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4b61      	ldr	r3, [pc, #388]	@ (80042d8 <UART_SetConfig+0x2d4>)
 8004152:	fba3 2302 	umull	r2, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	011c      	lsls	r4, r3, #4
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004164:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004174:	415b      	adcs	r3, r3
 8004176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800417c:	4641      	mov	r1, r8
 800417e:	eb12 0a01 	adds.w	sl, r2, r1
 8004182:	4649      	mov	r1, r9
 8004184:	eb43 0b01 	adc.w	fp, r3, r1
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800419c:	4692      	mov	sl, r2
 800419e:	469b      	mov	fp, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	eb1a 0303 	adds.w	r3, sl, r3
 80041a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041aa:	464b      	mov	r3, r9
 80041ac:	eb4b 0303 	adc.w	r3, fp, r3
 80041b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041c8:	460b      	mov	r3, r1
 80041ca:	18db      	adds	r3, r3, r3
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ce:	4613      	mov	r3, r2
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041de:	f7fc fceb 	bl	8000bb8 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	4b3b      	ldr	r3, [pc, #236]	@ (80042d8 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2301 	umull	r2, r3, r3, r1
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2264      	movs	r2, #100	@ 0x64
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	1acb      	subs	r3, r1, r3
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041fe:	4b36      	ldr	r3, [pc, #216]	@ (80042d8 <UART_SetConfig+0x2d4>)
 8004200:	fba3 2302 	umull	r2, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800420c:	441c      	add	r4, r3
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004218:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800421c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004228:	415b      	adcs	r3, r3
 800422a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800422c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6339      	str	r1, [r7, #48]	@ 0x30
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800427c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004284:	460b      	mov	r3, r1
 8004286:	18db      	adds	r3, r3, r3
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800428a:	4613      	mov	r3, r2
 800428c:	eb42 0303 	adc.w	r3, r2, r3
 8004290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800429a:	f7fc fc8d 	bl	8000bb8 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <UART_SetConfig+0x2d4>)
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	2164      	movs	r1, #100	@ 0x64
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	3332      	adds	r3, #50	@ 0x32
 80042b6:	4a08      	ldr	r2, [pc, #32]	@ (80042d8 <UART_SetConfig+0x2d4>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 0207 	and.w	r2, r3, #7
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4422      	add	r2, r4
 80042ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042cc:	e106      	b.n	80044dc <UART_SetConfig+0x4d8>
 80042ce:	bf00      	nop
 80042d0:	40011000 	.word	0x40011000
 80042d4:	40011400 	.word	0x40011400
 80042d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	6239      	str	r1, [r7, #32]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042fe:	4641      	mov	r1, r8
 8004300:	1854      	adds	r4, r2, r1
 8004302:	4649      	mov	r1, r9
 8004304:	eb43 0501 	adc.w	r5, r3, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	00eb      	lsls	r3, r5, #3
 8004312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004316:	00e2      	lsls	r2, r4, #3
 8004318:	4614      	mov	r4, r2
 800431a:	461d      	mov	r5, r3
 800431c:	4643      	mov	r3, r8
 800431e:	18e3      	adds	r3, r4, r3
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004324:	464b      	mov	r3, r9
 8004326:	eb45 0303 	adc.w	r3, r5, r3
 800432a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800433a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800434a:	4629      	mov	r1, r5
 800434c:	008b      	lsls	r3, r1, #2
 800434e:	4621      	mov	r1, r4
 8004350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004354:	4621      	mov	r1, r4
 8004356:	008a      	lsls	r2, r1, #2
 8004358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800435c:	f7fc fc2c 	bl	8000bb8 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4b60      	ldr	r3, [pc, #384]	@ (80044e8 <UART_SetConfig+0x4e4>)
 8004366:	fba3 2302 	umull	r2, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	011c      	lsls	r4, r3, #4
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004378:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800437c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004380:	4642      	mov	r2, r8
 8004382:	464b      	mov	r3, r9
 8004384:	1891      	adds	r1, r2, r2
 8004386:	61b9      	str	r1, [r7, #24]
 8004388:	415b      	adcs	r3, r3
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004390:	4641      	mov	r1, r8
 8004392:	1851      	adds	r1, r2, r1
 8004394:	6139      	str	r1, [r7, #16]
 8004396:	4649      	mov	r1, r9
 8004398:	414b      	adcs	r3, r1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a8:	4659      	mov	r1, fp
 80043aa:	00cb      	lsls	r3, r1, #3
 80043ac:	4651      	mov	r1, sl
 80043ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b2:	4651      	mov	r1, sl
 80043b4:	00ca      	lsls	r2, r1, #3
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	4642      	mov	r2, r8
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043c4:	464b      	mov	r3, r9
 80043c6:	460a      	mov	r2, r1
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043e8:	4649      	mov	r1, r9
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f2:	4641      	mov	r1, r8
 80043f4:	008a      	lsls	r2, r1, #2
 80043f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043fa:	f7fc fbdd 	bl	8000bb8 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4611      	mov	r1, r2
 8004404:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <UART_SetConfig+0x4e4>)
 8004406:	fba3 2301 	umull	r2, r3, r3, r1
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2264      	movs	r2, #100	@ 0x64
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	1acb      	subs	r3, r1, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	@ 0x32
 8004418:	4a33      	ldr	r2, [pc, #204]	@ (80044e8 <UART_SetConfig+0x4e4>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004424:	441c      	add	r4, r3
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	673b      	str	r3, [r7, #112]	@ 0x70
 800442e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	415b      	adcs	r3, r3
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6039      	str	r1, [r7, #0]
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004476:	464b      	mov	r3, r9
 8004478:	460a      	mov	r2, r1
 800447a:	eb42 0303 	adc.w	r3, r2, r3
 800447e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	663b      	str	r3, [r7, #96]	@ 0x60
 800448a:	667a      	str	r2, [r7, #100]	@ 0x64
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004498:	4649      	mov	r1, r9
 800449a:	008b      	lsls	r3, r1, #2
 800449c:	4641      	mov	r1, r8
 800449e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a2:	4641      	mov	r1, r8
 80044a4:	008a      	lsls	r2, r1, #2
 80044a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044aa:	f7fc fb85 	bl	8000bb8 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <UART_SetConfig+0x4e4>)
 80044b4:	fba3 1302 	umull	r1, r3, r3, r2
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	2164      	movs	r1, #100	@ 0x64
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	3332      	adds	r3, #50	@ 0x32
 80044c6:	4a08      	ldr	r2, [pc, #32]	@ (80044e8 <UART_SetConfig+0x4e4>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	f003 020f 	and.w	r2, r3, #15
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4422      	add	r2, r4
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e8:	51eb851f 	.word	0x51eb851f

080044ec <__cvt>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	ec57 6b10 	vmov	r6, r7, d0
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4619      	mov	r1, r3
 80044fa:	463b      	mov	r3, r7
 80044fc:	bfbb      	ittet	lt
 80044fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004502:	461f      	movlt	r7, r3
 8004504:	2300      	movge	r3, #0
 8004506:	232d      	movlt	r3, #45	@ 0x2d
 8004508:	700b      	strb	r3, [r1, #0]
 800450a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800450c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004510:	4691      	mov	r9, r2
 8004512:	f023 0820 	bic.w	r8, r3, #32
 8004516:	bfbc      	itt	lt
 8004518:	4632      	movlt	r2, r6
 800451a:	4616      	movlt	r6, r2
 800451c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004520:	d005      	beq.n	800452e <__cvt+0x42>
 8004522:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004526:	d100      	bne.n	800452a <__cvt+0x3e>
 8004528:	3401      	adds	r4, #1
 800452a:	2102      	movs	r1, #2
 800452c:	e000      	b.n	8004530 <__cvt+0x44>
 800452e:	2103      	movs	r1, #3
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	ab02      	add	r3, sp, #8
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	ec47 6b10 	vmov	d0, r6, r7
 800453c:	4653      	mov	r3, sl
 800453e:	4622      	mov	r2, r4
 8004540:	f000 ff5e 	bl	8005400 <_dtoa_r>
 8004544:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004548:	4605      	mov	r5, r0
 800454a:	d119      	bne.n	8004580 <__cvt+0x94>
 800454c:	f019 0f01 	tst.w	r9, #1
 8004550:	d00e      	beq.n	8004570 <__cvt+0x84>
 8004552:	eb00 0904 	add.w	r9, r0, r4
 8004556:	2200      	movs	r2, #0
 8004558:	2300      	movs	r3, #0
 800455a:	4630      	mov	r0, r6
 800455c:	4639      	mov	r1, r7
 800455e:	f7fc fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004562:	b108      	cbz	r0, 8004568 <__cvt+0x7c>
 8004564:	f8cd 900c 	str.w	r9, [sp, #12]
 8004568:	2230      	movs	r2, #48	@ 0x30
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	454b      	cmp	r3, r9
 800456e:	d31e      	bcc.n	80045ae <__cvt+0xc2>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004574:	1b5b      	subs	r3, r3, r5
 8004576:	4628      	mov	r0, r5
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	b004      	add	sp, #16
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004584:	eb00 0904 	add.w	r9, r0, r4
 8004588:	d1e5      	bne.n	8004556 <__cvt+0x6a>
 800458a:	7803      	ldrb	r3, [r0, #0]
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d10a      	bne.n	80045a6 <__cvt+0xba>
 8004590:	2200      	movs	r2, #0
 8004592:	2300      	movs	r3, #0
 8004594:	4630      	mov	r0, r6
 8004596:	4639      	mov	r1, r7
 8004598:	f7fc fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800459c:	b918      	cbnz	r0, 80045a6 <__cvt+0xba>
 800459e:	f1c4 0401 	rsb	r4, r4, #1
 80045a2:	f8ca 4000 	str.w	r4, [sl]
 80045a6:	f8da 3000 	ldr.w	r3, [sl]
 80045aa:	4499      	add	r9, r3
 80045ac:	e7d3      	b.n	8004556 <__cvt+0x6a>
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	9103      	str	r1, [sp, #12]
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e7d9      	b.n	800456a <__cvt+0x7e>

080045b6 <__exponent>:
 80045b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b8:	2900      	cmp	r1, #0
 80045ba:	bfba      	itte	lt
 80045bc:	4249      	neglt	r1, r1
 80045be:	232d      	movlt	r3, #45	@ 0x2d
 80045c0:	232b      	movge	r3, #43	@ 0x2b
 80045c2:	2909      	cmp	r1, #9
 80045c4:	7002      	strb	r2, [r0, #0]
 80045c6:	7043      	strb	r3, [r0, #1]
 80045c8:	dd29      	ble.n	800461e <__exponent+0x68>
 80045ca:	f10d 0307 	add.w	r3, sp, #7
 80045ce:	461d      	mov	r5, r3
 80045d0:	270a      	movs	r7, #10
 80045d2:	461a      	mov	r2, r3
 80045d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80045d8:	fb07 1416 	mls	r4, r7, r6, r1
 80045dc:	3430      	adds	r4, #48	@ 0x30
 80045de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045e2:	460c      	mov	r4, r1
 80045e4:	2c63      	cmp	r4, #99	@ 0x63
 80045e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80045ea:	4631      	mov	r1, r6
 80045ec:	dcf1      	bgt.n	80045d2 <__exponent+0x1c>
 80045ee:	3130      	adds	r1, #48	@ 0x30
 80045f0:	1e94      	subs	r4, r2, #2
 80045f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045f6:	1c41      	adds	r1, r0, #1
 80045f8:	4623      	mov	r3, r4
 80045fa:	42ab      	cmp	r3, r5
 80045fc:	d30a      	bcc.n	8004614 <__exponent+0x5e>
 80045fe:	f10d 0309 	add.w	r3, sp, #9
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	42ac      	cmp	r4, r5
 8004606:	bf88      	it	hi
 8004608:	2300      	movhi	r3, #0
 800460a:	3302      	adds	r3, #2
 800460c:	4403      	add	r3, r0
 800460e:	1a18      	subs	r0, r3, r0
 8004610:	b003      	add	sp, #12
 8004612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004614:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004618:	f801 6f01 	strb.w	r6, [r1, #1]!
 800461c:	e7ed      	b.n	80045fa <__exponent+0x44>
 800461e:	2330      	movs	r3, #48	@ 0x30
 8004620:	3130      	adds	r1, #48	@ 0x30
 8004622:	7083      	strb	r3, [r0, #2]
 8004624:	70c1      	strb	r1, [r0, #3]
 8004626:	1d03      	adds	r3, r0, #4
 8004628:	e7f1      	b.n	800460e <__exponent+0x58>
	...

0800462c <_printf_float>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	b08d      	sub	sp, #52	@ 0x34
 8004632:	460c      	mov	r4, r1
 8004634:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004638:	4616      	mov	r6, r2
 800463a:	461f      	mov	r7, r3
 800463c:	4605      	mov	r5, r0
 800463e:	f000 fddf 	bl	8005200 <_localeconv_r>
 8004642:	6803      	ldr	r3, [r0, #0]
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fb fe1a 	bl	8000280 <strlen>
 800464c:	2300      	movs	r3, #0
 800464e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004650:	f8d8 3000 	ldr.w	r3, [r8]
 8004654:	9005      	str	r0, [sp, #20]
 8004656:	3307      	adds	r3, #7
 8004658:	f023 0307 	bic.w	r3, r3, #7
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004664:	f8d4 b000 	ldr.w	fp, [r4]
 8004668:	f8c8 2000 	str.w	r2, [r8]
 800466c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004670:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004674:	9307      	str	r3, [sp, #28]
 8004676:	f8cd 8018 	str.w	r8, [sp, #24]
 800467a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800467e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004682:	4b9c      	ldr	r3, [pc, #624]	@ (80048f4 <_printf_float+0x2c8>)
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	f7fc fa58 	bl	8000b3c <__aeabi_dcmpun>
 800468c:	bb70      	cbnz	r0, 80046ec <_printf_float+0xc0>
 800468e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004692:	4b98      	ldr	r3, [pc, #608]	@ (80048f4 <_printf_float+0x2c8>)
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	f7fc fa32 	bl	8000b00 <__aeabi_dcmple>
 800469c:	bb30      	cbnz	r0, 80046ec <_printf_float+0xc0>
 800469e:	2200      	movs	r2, #0
 80046a0:	2300      	movs	r3, #0
 80046a2:	4640      	mov	r0, r8
 80046a4:	4649      	mov	r1, r9
 80046a6:	f7fc fa21 	bl	8000aec <__aeabi_dcmplt>
 80046aa:	b110      	cbz	r0, 80046b2 <_printf_float+0x86>
 80046ac:	232d      	movs	r3, #45	@ 0x2d
 80046ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b2:	4a91      	ldr	r2, [pc, #580]	@ (80048f8 <_printf_float+0x2cc>)
 80046b4:	4b91      	ldr	r3, [pc, #580]	@ (80048fc <_printf_float+0x2d0>)
 80046b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046ba:	bf8c      	ite	hi
 80046bc:	4690      	movhi	r8, r2
 80046be:	4698      	movls	r8, r3
 80046c0:	2303      	movs	r3, #3
 80046c2:	6123      	str	r3, [r4, #16]
 80046c4:	f02b 0304 	bic.w	r3, fp, #4
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	f04f 0900 	mov.w	r9, #0
 80046ce:	9700      	str	r7, [sp, #0]
 80046d0:	4633      	mov	r3, r6
 80046d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 f9d2 	bl	8004a80 <_printf_common>
 80046dc:	3001      	adds	r0, #1
 80046de:	f040 808d 	bne.w	80047fc <_printf_float+0x1d0>
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	b00d      	add	sp, #52	@ 0x34
 80046e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	4640      	mov	r0, r8
 80046f2:	4649      	mov	r1, r9
 80046f4:	f7fc fa22 	bl	8000b3c <__aeabi_dcmpun>
 80046f8:	b140      	cbz	r0, 800470c <_printf_float+0xe0>
 80046fa:	464b      	mov	r3, r9
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bfbc      	itt	lt
 8004700:	232d      	movlt	r3, #45	@ 0x2d
 8004702:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004706:	4a7e      	ldr	r2, [pc, #504]	@ (8004900 <_printf_float+0x2d4>)
 8004708:	4b7e      	ldr	r3, [pc, #504]	@ (8004904 <_printf_float+0x2d8>)
 800470a:	e7d4      	b.n	80046b6 <_printf_float+0x8a>
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004712:	9206      	str	r2, [sp, #24]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	d13b      	bne.n	8004790 <_printf_float+0x164>
 8004718:	2306      	movs	r3, #6
 800471a:	6063      	str	r3, [r4, #4]
 800471c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004720:	2300      	movs	r3, #0
 8004722:	6022      	str	r2, [r4, #0]
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	ab0a      	add	r3, sp, #40	@ 0x28
 8004728:	e9cd a301 	strd	sl, r3, [sp, #4]
 800472c:	ab09      	add	r3, sp, #36	@ 0x24
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	6861      	ldr	r1, [r4, #4]
 8004732:	ec49 8b10 	vmov	d0, r8, r9
 8004736:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800473a:	4628      	mov	r0, r5
 800473c:	f7ff fed6 	bl	80044ec <__cvt>
 8004740:	9b06      	ldr	r3, [sp, #24]
 8004742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004744:	2b47      	cmp	r3, #71	@ 0x47
 8004746:	4680      	mov	r8, r0
 8004748:	d129      	bne.n	800479e <_printf_float+0x172>
 800474a:	1cc8      	adds	r0, r1, #3
 800474c:	db02      	blt.n	8004754 <_printf_float+0x128>
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	4299      	cmp	r1, r3
 8004752:	dd41      	ble.n	80047d8 <_printf_float+0x1ac>
 8004754:	f1aa 0a02 	sub.w	sl, sl, #2
 8004758:	fa5f fa8a 	uxtb.w	sl, sl
 800475c:	3901      	subs	r1, #1
 800475e:	4652      	mov	r2, sl
 8004760:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004764:	9109      	str	r1, [sp, #36]	@ 0x24
 8004766:	f7ff ff26 	bl	80045b6 <__exponent>
 800476a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800476c:	1813      	adds	r3, r2, r0
 800476e:	2a01      	cmp	r2, #1
 8004770:	4681      	mov	r9, r0
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	dc02      	bgt.n	800477c <_printf_float+0x150>
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	07d2      	lsls	r2, r2, #31
 800477a:	d501      	bpl.n	8004780 <_printf_float+0x154>
 800477c:	3301      	adds	r3, #1
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0a2      	beq.n	80046ce <_printf_float+0xa2>
 8004788:	232d      	movs	r3, #45	@ 0x2d
 800478a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800478e:	e79e      	b.n	80046ce <_printf_float+0xa2>
 8004790:	9a06      	ldr	r2, [sp, #24]
 8004792:	2a47      	cmp	r2, #71	@ 0x47
 8004794:	d1c2      	bne.n	800471c <_printf_float+0xf0>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1c0      	bne.n	800471c <_printf_float+0xf0>
 800479a:	2301      	movs	r3, #1
 800479c:	e7bd      	b.n	800471a <_printf_float+0xee>
 800479e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047a2:	d9db      	bls.n	800475c <_printf_float+0x130>
 80047a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047a8:	d118      	bne.n	80047dc <_printf_float+0x1b0>
 80047aa:	2900      	cmp	r1, #0
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	dd0b      	ble.n	80047c8 <_printf_float+0x19c>
 80047b0:	6121      	str	r1, [r4, #16]
 80047b2:	b913      	cbnz	r3, 80047ba <_printf_float+0x18e>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	07d0      	lsls	r0, r2, #31
 80047b8:	d502      	bpl.n	80047c0 <_printf_float+0x194>
 80047ba:	3301      	adds	r3, #1
 80047bc:	440b      	add	r3, r1
 80047be:	6123      	str	r3, [r4, #16]
 80047c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	e7db      	b.n	8004780 <_printf_float+0x154>
 80047c8:	b913      	cbnz	r3, 80047d0 <_printf_float+0x1a4>
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	07d2      	lsls	r2, r2, #31
 80047ce:	d501      	bpl.n	80047d4 <_printf_float+0x1a8>
 80047d0:	3302      	adds	r3, #2
 80047d2:	e7f4      	b.n	80047be <_printf_float+0x192>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e7f2      	b.n	80047be <_printf_float+0x192>
 80047d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047de:	4299      	cmp	r1, r3
 80047e0:	db05      	blt.n	80047ee <_printf_float+0x1c2>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	6121      	str	r1, [r4, #16]
 80047e6:	07d8      	lsls	r0, r3, #31
 80047e8:	d5ea      	bpl.n	80047c0 <_printf_float+0x194>
 80047ea:	1c4b      	adds	r3, r1, #1
 80047ec:	e7e7      	b.n	80047be <_printf_float+0x192>
 80047ee:	2900      	cmp	r1, #0
 80047f0:	bfd4      	ite	le
 80047f2:	f1c1 0202 	rsble	r2, r1, #2
 80047f6:	2201      	movgt	r2, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	e7e0      	b.n	80047be <_printf_float+0x192>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	055a      	lsls	r2, r3, #21
 8004800:	d407      	bmi.n	8004812 <_printf_float+0x1e6>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	4642      	mov	r2, r8
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d12b      	bne.n	8004868 <_printf_float+0x23c>
 8004810:	e767      	b.n	80046e2 <_printf_float+0xb6>
 8004812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004816:	f240 80dd 	bls.w	80049d4 <_printf_float+0x3a8>
 800481a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800481e:	2200      	movs	r2, #0
 8004820:	2300      	movs	r3, #0
 8004822:	f7fc f959 	bl	8000ad8 <__aeabi_dcmpeq>
 8004826:	2800      	cmp	r0, #0
 8004828:	d033      	beq.n	8004892 <_printf_float+0x266>
 800482a:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <_printf_float+0x2dc>)
 800482c:	2301      	movs	r3, #1
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	f43f af54 	beq.w	80046e2 <_printf_float+0xb6>
 800483a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800483e:	4543      	cmp	r3, r8
 8004840:	db02      	blt.n	8004848 <_printf_float+0x21c>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	07d8      	lsls	r0, r3, #31
 8004846:	d50f      	bpl.n	8004868 <_printf_float+0x23c>
 8004848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	f43f af45 	beq.w	80046e2 <_printf_float+0xb6>
 8004858:	f04f 0900 	mov.w	r9, #0
 800485c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004860:	f104 0a1a 	add.w	sl, r4, #26
 8004864:	45c8      	cmp	r8, r9
 8004866:	dc09      	bgt.n	800487c <_printf_float+0x250>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	079b      	lsls	r3, r3, #30
 800486c:	f100 8103 	bmi.w	8004a76 <_printf_float+0x44a>
 8004870:	68e0      	ldr	r0, [r4, #12]
 8004872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004874:	4298      	cmp	r0, r3
 8004876:	bfb8      	it	lt
 8004878:	4618      	movlt	r0, r3
 800487a:	e734      	b.n	80046e6 <_printf_float+0xba>
 800487c:	2301      	movs	r3, #1
 800487e:	4652      	mov	r2, sl
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	f43f af2b 	beq.w	80046e2 <_printf_float+0xb6>
 800488c:	f109 0901 	add.w	r9, r9, #1
 8004890:	e7e8      	b.n	8004864 <_printf_float+0x238>
 8004892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	dc39      	bgt.n	800490c <_printf_float+0x2e0>
 8004898:	4a1b      	ldr	r2, [pc, #108]	@ (8004908 <_printf_float+0x2dc>)
 800489a:	2301      	movs	r3, #1
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	f43f af1d 	beq.w	80046e2 <_printf_float+0xb6>
 80048a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80048ac:	ea59 0303 	orrs.w	r3, r9, r3
 80048b0:	d102      	bne.n	80048b8 <_printf_float+0x28c>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	07d9      	lsls	r1, r3, #31
 80048b6:	d5d7      	bpl.n	8004868 <_printf_float+0x23c>
 80048b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f af0d 	beq.w	80046e2 <_printf_float+0xb6>
 80048c8:	f04f 0a00 	mov.w	sl, #0
 80048cc:	f104 0b1a 	add.w	fp, r4, #26
 80048d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d2:	425b      	negs	r3, r3
 80048d4:	4553      	cmp	r3, sl
 80048d6:	dc01      	bgt.n	80048dc <_printf_float+0x2b0>
 80048d8:	464b      	mov	r3, r9
 80048da:	e793      	b.n	8004804 <_printf_float+0x1d8>
 80048dc:	2301      	movs	r3, #1
 80048de:	465a      	mov	r2, fp
 80048e0:	4631      	mov	r1, r6
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b8      	blx	r7
 80048e6:	3001      	adds	r0, #1
 80048e8:	f43f aefb 	beq.w	80046e2 <_printf_float+0xb6>
 80048ec:	f10a 0a01 	add.w	sl, sl, #1
 80048f0:	e7ee      	b.n	80048d0 <_printf_float+0x2a4>
 80048f2:	bf00      	nop
 80048f4:	7fefffff 	.word	0x7fefffff
 80048f8:	08007338 	.word	0x08007338
 80048fc:	08007334 	.word	0x08007334
 8004900:	08007340 	.word	0x08007340
 8004904:	0800733c 	.word	0x0800733c
 8004908:	08007344 	.word	0x08007344
 800490c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800490e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004912:	4553      	cmp	r3, sl
 8004914:	bfa8      	it	ge
 8004916:	4653      	movge	r3, sl
 8004918:	2b00      	cmp	r3, #0
 800491a:	4699      	mov	r9, r3
 800491c:	dc36      	bgt.n	800498c <_printf_float+0x360>
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004926:	f104 021a 	add.w	r2, r4, #26
 800492a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800492c:	9306      	str	r3, [sp, #24]
 800492e:	eba3 0309 	sub.w	r3, r3, r9
 8004932:	455b      	cmp	r3, fp
 8004934:	dc31      	bgt.n	800499a <_printf_float+0x36e>
 8004936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004938:	459a      	cmp	sl, r3
 800493a:	dc3a      	bgt.n	80049b2 <_printf_float+0x386>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	07da      	lsls	r2, r3, #31
 8004940:	d437      	bmi.n	80049b2 <_printf_float+0x386>
 8004942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004944:	ebaa 0903 	sub.w	r9, sl, r3
 8004948:	9b06      	ldr	r3, [sp, #24]
 800494a:	ebaa 0303 	sub.w	r3, sl, r3
 800494e:	4599      	cmp	r9, r3
 8004950:	bfa8      	it	ge
 8004952:	4699      	movge	r9, r3
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	dc33      	bgt.n	80049c2 <_printf_float+0x396>
 800495a:	f04f 0800 	mov.w	r8, #0
 800495e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004962:	f104 0b1a 	add.w	fp, r4, #26
 8004966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004968:	ebaa 0303 	sub.w	r3, sl, r3
 800496c:	eba3 0309 	sub.w	r3, r3, r9
 8004970:	4543      	cmp	r3, r8
 8004972:	f77f af79 	ble.w	8004868 <_printf_float+0x23c>
 8004976:	2301      	movs	r3, #1
 8004978:	465a      	mov	r2, fp
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	f43f aeae 	beq.w	80046e2 <_printf_float+0xb6>
 8004986:	f108 0801 	add.w	r8, r8, #1
 800498a:	e7ec      	b.n	8004966 <_printf_float+0x33a>
 800498c:	4642      	mov	r2, r8
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	d1c2      	bne.n	800491e <_printf_float+0x2f2>
 8004998:	e6a3      	b.n	80046e2 <_printf_float+0xb6>
 800499a:	2301      	movs	r3, #1
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	9206      	str	r2, [sp, #24]
 80049a2:	47b8      	blx	r7
 80049a4:	3001      	adds	r0, #1
 80049a6:	f43f ae9c 	beq.w	80046e2 <_printf_float+0xb6>
 80049aa:	9a06      	ldr	r2, [sp, #24]
 80049ac:	f10b 0b01 	add.w	fp, fp, #1
 80049b0:	e7bb      	b.n	800492a <_printf_float+0x2fe>
 80049b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1c0      	bne.n	8004942 <_printf_float+0x316>
 80049c0:	e68f      	b.n	80046e2 <_printf_float+0xb6>
 80049c2:	9a06      	ldr	r2, [sp, #24]
 80049c4:	464b      	mov	r3, r9
 80049c6:	4442      	add	r2, r8
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	d1c3      	bne.n	800495a <_printf_float+0x32e>
 80049d2:	e686      	b.n	80046e2 <_printf_float+0xb6>
 80049d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80049d8:	f1ba 0f01 	cmp.w	sl, #1
 80049dc:	dc01      	bgt.n	80049e2 <_printf_float+0x3b6>
 80049de:	07db      	lsls	r3, r3, #31
 80049e0:	d536      	bpl.n	8004a50 <_printf_float+0x424>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4642      	mov	r2, r8
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f ae78 	beq.w	80046e2 <_printf_float+0xb6>
 80049f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	f43f ae70 	beq.w	80046e2 <_printf_float+0xb6>
 8004a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a06:	2200      	movs	r2, #0
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a0e:	f7fc f863 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a12:	b9c0      	cbnz	r0, 8004a46 <_printf_float+0x41a>
 8004a14:	4653      	mov	r3, sl
 8004a16:	f108 0201 	add.w	r2, r8, #1
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	d10c      	bne.n	8004a3e <_printf_float+0x412>
 8004a24:	e65d      	b.n	80046e2 <_printf_float+0xb6>
 8004a26:	2301      	movs	r3, #1
 8004a28:	465a      	mov	r2, fp
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	47b8      	blx	r7
 8004a30:	3001      	adds	r0, #1
 8004a32:	f43f ae56 	beq.w	80046e2 <_printf_float+0xb6>
 8004a36:	f108 0801 	add.w	r8, r8, #1
 8004a3a:	45d0      	cmp	r8, sl
 8004a3c:	dbf3      	blt.n	8004a26 <_printf_float+0x3fa>
 8004a3e:	464b      	mov	r3, r9
 8004a40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a44:	e6df      	b.n	8004806 <_printf_float+0x1da>
 8004a46:	f04f 0800 	mov.w	r8, #0
 8004a4a:	f104 0b1a 	add.w	fp, r4, #26
 8004a4e:	e7f4      	b.n	8004a3a <_printf_float+0x40e>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4642      	mov	r2, r8
 8004a54:	e7e1      	b.n	8004a1a <_printf_float+0x3ee>
 8004a56:	2301      	movs	r3, #1
 8004a58:	464a      	mov	r2, r9
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	f43f ae3e 	beq.w	80046e2 <_printf_float+0xb6>
 8004a66:	f108 0801 	add.w	r8, r8, #1
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	4543      	cmp	r3, r8
 8004a72:	dcf0      	bgt.n	8004a56 <_printf_float+0x42a>
 8004a74:	e6fc      	b.n	8004870 <_printf_float+0x244>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	f104 0919 	add.w	r9, r4, #25
 8004a7e:	e7f4      	b.n	8004a6a <_printf_float+0x43e>

08004a80 <_printf_common>:
 8004a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	4616      	mov	r6, r2
 8004a86:	4698      	mov	r8, r3
 8004a88:	688a      	ldr	r2, [r1, #8]
 8004a8a:	690b      	ldr	r3, [r1, #16]
 8004a8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	bfb8      	it	lt
 8004a94:	4613      	movlt	r3, r2
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	b10a      	cbz	r2, 8004aa6 <_printf_common+0x26>
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	6033      	str	r3, [r6, #0]
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	0699      	lsls	r1, r3, #26
 8004aaa:	bf42      	ittt	mi
 8004aac:	6833      	ldrmi	r3, [r6, #0]
 8004aae:	3302      	addmi	r3, #2
 8004ab0:	6033      	strmi	r3, [r6, #0]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	f015 0506 	ands.w	r5, r5, #6
 8004ab8:	d106      	bne.n	8004ac8 <_printf_common+0x48>
 8004aba:	f104 0a19 	add.w	sl, r4, #25
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	6832      	ldr	r2, [r6, #0]
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	42ab      	cmp	r3, r5
 8004ac6:	dc26      	bgt.n	8004b16 <_printf_common+0x96>
 8004ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	3b00      	subs	r3, #0
 8004ad0:	bf18      	it	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	0692      	lsls	r2, r2, #26
 8004ad6:	d42b      	bmi.n	8004b30 <_printf_common+0xb0>
 8004ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004adc:	4641      	mov	r1, r8
 8004ade:	4638      	mov	r0, r7
 8004ae0:	47c8      	blx	r9
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d01e      	beq.n	8004b24 <_printf_common+0xa4>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	6922      	ldr	r2, [r4, #16]
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	bf02      	ittt	eq
 8004af2:	68e5      	ldreq	r5, [r4, #12]
 8004af4:	6833      	ldreq	r3, [r6, #0]
 8004af6:	1aed      	subeq	r5, r5, r3
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	bf0c      	ite	eq
 8004afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b00:	2500      	movne	r5, #0
 8004b02:	4293      	cmp	r3, r2
 8004b04:	bfc4      	itt	gt
 8004b06:	1a9b      	subgt	r3, r3, r2
 8004b08:	18ed      	addgt	r5, r5, r3
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	42b5      	cmp	r5, r6
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xc8>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xa8>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	47c8      	blx	r9
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xac>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c6      	b.n	8004abe <_printf_common+0x3e>
 8004b30:	18e1      	adds	r1, r4, r3
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	2030      	movs	r0, #48	@ 0x30
 8004b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b3a:	4422      	add	r2, r4
 8004b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b44:	3302      	adds	r3, #2
 8004b46:	e7c7      	b.n	8004ad8 <_printf_common+0x58>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c8      	blx	r9
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xa4>
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7d9      	b.n	8004b0e <_printf_common+0x8e>
	...

08004b5c <_printf_i>:
 8004b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	7e0f      	ldrb	r7, [r1, #24]
 8004b62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b64:	2f78      	cmp	r7, #120	@ 0x78
 8004b66:	4691      	mov	r9, r2
 8004b68:	4680      	mov	r8, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	469a      	mov	sl, r3
 8004b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b72:	d807      	bhi.n	8004b84 <_printf_i+0x28>
 8004b74:	2f62      	cmp	r7, #98	@ 0x62
 8004b76:	d80a      	bhi.n	8004b8e <_printf_i+0x32>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	f000 80d1 	beq.w	8004d20 <_printf_i+0x1c4>
 8004b7e:	2f58      	cmp	r7, #88	@ 0x58
 8004b80:	f000 80b8 	beq.w	8004cf4 <_printf_i+0x198>
 8004b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b8c:	e03a      	b.n	8004c04 <_printf_i+0xa8>
 8004b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b92:	2b15      	cmp	r3, #21
 8004b94:	d8f6      	bhi.n	8004b84 <_printf_i+0x28>
 8004b96:	a101      	add	r1, pc, #4	@ (adr r1, 8004b9c <_printf_i+0x40>)
 8004b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004b85 	.word	0x08004b85
 8004ba8:	08004b85 	.word	0x08004b85
 8004bac:	08004b85 	.word	0x08004b85
 8004bb0:	08004b85 	.word	0x08004b85
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b85 	.word	0x08004b85
 8004bbc:	08004b85 	.word	0x08004b85
 8004bc0:	08004b85 	.word	0x08004b85
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08004d07 	.word	0x08004d07
 8004bcc:	08004c33 	.word	0x08004c33
 8004bd0:	08004cc1 	.word	0x08004cc1
 8004bd4:	08004b85 	.word	0x08004b85
 8004bd8:	08004b85 	.word	0x08004b85
 8004bdc:	08004d29 	.word	0x08004d29
 8004be0:	08004b85 	.word	0x08004b85
 8004be4:	08004c33 	.word	0x08004c33
 8004be8:	08004b85 	.word	0x08004b85
 8004bec:	08004b85 	.word	0x08004b85
 8004bf0:	08004cc9 	.word	0x08004cc9
 8004bf4:	6833      	ldr	r3, [r6, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6032      	str	r2, [r6, #0]
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c04:	2301      	movs	r3, #1
 8004c06:	e09c      	b.n	8004d42 <_printf_i+0x1e6>
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1d19      	adds	r1, r3, #4
 8004c0e:	6031      	str	r1, [r6, #0]
 8004c10:	0606      	lsls	r6, r0, #24
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0xbc>
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	e003      	b.n	8004c20 <_printf_i+0xc4>
 8004c18:	0645      	lsls	r5, r0, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0xb8>
 8004c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	da03      	bge.n	8004c2c <_printf_i+0xd0>
 8004c24:	232d      	movs	r3, #45	@ 0x2d
 8004c26:	426d      	negs	r5, r5
 8004c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2c:	4858      	ldr	r0, [pc, #352]	@ (8004d90 <_printf_i+0x234>)
 8004c2e:	230a      	movs	r3, #10
 8004c30:	e011      	b.n	8004c56 <_printf_i+0xfa>
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	6833      	ldr	r3, [r6, #0]
 8004c36:	0608      	lsls	r0, r1, #24
 8004c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c3c:	d402      	bmi.n	8004c44 <_printf_i+0xe8>
 8004c3e:	0649      	lsls	r1, r1, #25
 8004c40:	bf48      	it	mi
 8004c42:	b2ad      	uxthmi	r5, r5
 8004c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c46:	4852      	ldr	r0, [pc, #328]	@ (8004d90 <_printf_i+0x234>)
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	bf14      	ite	ne
 8004c4c:	230a      	movne	r3, #10
 8004c4e:	2308      	moveq	r3, #8
 8004c50:	2100      	movs	r1, #0
 8004c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c56:	6866      	ldr	r6, [r4, #4]
 8004c58:	60a6      	str	r6, [r4, #8]
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	db05      	blt.n	8004c6a <_printf_i+0x10e>
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	432e      	orrs	r6, r5
 8004c62:	f021 0104 	bic.w	r1, r1, #4
 8004c66:	6021      	str	r1, [r4, #0]
 8004c68:	d04b      	beq.n	8004d02 <_printf_i+0x1a6>
 8004c6a:	4616      	mov	r6, r2
 8004c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c70:	fb03 5711 	mls	r7, r3, r1, r5
 8004c74:	5dc7      	ldrb	r7, [r0, r7]
 8004c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c7a:	462f      	mov	r7, r5
 8004c7c:	42bb      	cmp	r3, r7
 8004c7e:	460d      	mov	r5, r1
 8004c80:	d9f4      	bls.n	8004c6c <_printf_i+0x110>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d10b      	bne.n	8004c9e <_printf_i+0x142>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07df      	lsls	r7, r3, #31
 8004c8a:	d508      	bpl.n	8004c9e <_printf_i+0x142>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	6861      	ldr	r1, [r4, #4]
 8004c90:	4299      	cmp	r1, r3
 8004c92:	bfde      	ittt	le
 8004c94:	2330      	movle	r3, #48	@ 0x30
 8004c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c9e:	1b92      	subs	r2, r2, r6
 8004ca0:	6122      	str	r2, [r4, #16]
 8004ca2:	f8cd a000 	str.w	sl, [sp]
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	aa03      	add	r2, sp, #12
 8004caa:	4621      	mov	r1, r4
 8004cac:	4640      	mov	r0, r8
 8004cae:	f7ff fee7 	bl	8004a80 <_printf_common>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d14a      	bne.n	8004d4c <_printf_i+0x1f0>
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	b004      	add	sp, #16
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f043 0320 	orr.w	r3, r3, #32
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	4832      	ldr	r0, [pc, #200]	@ (8004d94 <_printf_i+0x238>)
 8004cca:	2778      	movs	r7, #120	@ 0x78
 8004ccc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	6831      	ldr	r1, [r6, #0]
 8004cd4:	061f      	lsls	r7, r3, #24
 8004cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cda:	d402      	bmi.n	8004ce2 <_printf_i+0x186>
 8004cdc:	065f      	lsls	r7, r3, #25
 8004cde:	bf48      	it	mi
 8004ce0:	b2ad      	uxthmi	r5, r5
 8004ce2:	6031      	str	r1, [r6, #0]
 8004ce4:	07d9      	lsls	r1, r3, #31
 8004ce6:	bf44      	itt	mi
 8004ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cec:	6023      	strmi	r3, [r4, #0]
 8004cee:	b11d      	cbz	r5, 8004cf8 <_printf_i+0x19c>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	e7ad      	b.n	8004c50 <_printf_i+0xf4>
 8004cf4:	4826      	ldr	r0, [pc, #152]	@ (8004d90 <_printf_i+0x234>)
 8004cf6:	e7e9      	b.n	8004ccc <_printf_i+0x170>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	e7f6      	b.n	8004cf0 <_printf_i+0x194>
 8004d02:	4616      	mov	r6, r2
 8004d04:	e7bd      	b.n	8004c82 <_printf_i+0x126>
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	6825      	ldr	r5, [r4, #0]
 8004d0a:	6961      	ldr	r1, [r4, #20]
 8004d0c:	1d18      	adds	r0, r3, #4
 8004d0e:	6030      	str	r0, [r6, #0]
 8004d10:	062e      	lsls	r6, r5, #24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	d501      	bpl.n	8004d1a <_printf_i+0x1be>
 8004d16:	6019      	str	r1, [r3, #0]
 8004d18:	e002      	b.n	8004d20 <_printf_i+0x1c4>
 8004d1a:	0668      	lsls	r0, r5, #25
 8004d1c:	d5fb      	bpl.n	8004d16 <_printf_i+0x1ba>
 8004d1e:	8019      	strh	r1, [r3, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	4616      	mov	r6, r2
 8004d26:	e7bc      	b.n	8004ca2 <_printf_i+0x146>
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	1d1a      	adds	r2, r3, #4
 8004d2c:	6032      	str	r2, [r6, #0]
 8004d2e:	681e      	ldr	r6, [r3, #0]
 8004d30:	6862      	ldr	r2, [r4, #4]
 8004d32:	2100      	movs	r1, #0
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7fb fa53 	bl	80001e0 <memchr>
 8004d3a:	b108      	cbz	r0, 8004d40 <_printf_i+0x1e4>
 8004d3c:	1b80      	subs	r0, r0, r6
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4a:	e7aa      	b.n	8004ca2 <_printf_i+0x146>
 8004d4c:	6923      	ldr	r3, [r4, #16]
 8004d4e:	4632      	mov	r2, r6
 8004d50:	4649      	mov	r1, r9
 8004d52:	4640      	mov	r0, r8
 8004d54:	47d0      	blx	sl
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0ad      	beq.n	8004cb6 <_printf_i+0x15a>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	079b      	lsls	r3, r3, #30
 8004d5e:	d413      	bmi.n	8004d88 <_printf_i+0x22c>
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	4298      	cmp	r0, r3
 8004d66:	bfb8      	it	lt
 8004d68:	4618      	movlt	r0, r3
 8004d6a:	e7a6      	b.n	8004cba <_printf_i+0x15e>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4649      	mov	r1, r9
 8004d72:	4640      	mov	r0, r8
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d09d      	beq.n	8004cb6 <_printf_i+0x15a>
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	68e3      	ldr	r3, [r4, #12]
 8004d7e:	9903      	ldr	r1, [sp, #12]
 8004d80:	1a5b      	subs	r3, r3, r1
 8004d82:	42ab      	cmp	r3, r5
 8004d84:	dcf2      	bgt.n	8004d6c <_printf_i+0x210>
 8004d86:	e7eb      	b.n	8004d60 <_printf_i+0x204>
 8004d88:	2500      	movs	r5, #0
 8004d8a:	f104 0619 	add.w	r6, r4, #25
 8004d8e:	e7f5      	b.n	8004d7c <_printf_i+0x220>
 8004d90:	08007346 	.word	0x08007346
 8004d94:	08007357 	.word	0x08007357

08004d98 <std>:
 8004d98:	2300      	movs	r3, #0
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004da6:	6083      	str	r3, [r0, #8]
 8004da8:	8181      	strh	r1, [r0, #12]
 8004daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dac:	81c2      	strh	r2, [r0, #14]
 8004dae:	6183      	str	r3, [r0, #24]
 8004db0:	4619      	mov	r1, r3
 8004db2:	2208      	movs	r2, #8
 8004db4:	305c      	adds	r0, #92	@ 0x5c
 8004db6:	f000 fa1b 	bl	80051f0 <memset>
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <std+0x58>)
 8004dbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <std+0x5c>)
 8004dc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <std+0x60>)
 8004dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <std+0x64>)
 8004dc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <std+0x68>)
 8004dcc:	6224      	str	r4, [r4, #32]
 8004dce:	429c      	cmp	r4, r3
 8004dd0:	d006      	beq.n	8004de0 <std+0x48>
 8004dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dd6:	4294      	cmp	r4, r2
 8004dd8:	d002      	beq.n	8004de0 <std+0x48>
 8004dda:	33d0      	adds	r3, #208	@ 0xd0
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	d105      	bne.n	8004dec <std+0x54>
 8004de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de8:	f000 ba7e 	b.w	80052e8 <__retarget_lock_init_recursive>
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	bf00      	nop
 8004df0:	08005041 	.word	0x08005041
 8004df4:	08005063 	.word	0x08005063
 8004df8:	0800509b 	.word	0x0800509b
 8004dfc:	080050bf 	.word	0x080050bf
 8004e00:	200002f0 	.word	0x200002f0

08004e04 <stdio_exit_handler>:
 8004e04:	4a02      	ldr	r2, [pc, #8]	@ (8004e10 <stdio_exit_handler+0xc>)
 8004e06:	4903      	ldr	r1, [pc, #12]	@ (8004e14 <stdio_exit_handler+0x10>)
 8004e08:	4803      	ldr	r0, [pc, #12]	@ (8004e18 <stdio_exit_handler+0x14>)
 8004e0a:	f000 b869 	b.w	8004ee0 <_fwalk_sglue>
 8004e0e:	bf00      	nop
 8004e10:	2000000c 	.word	0x2000000c
 8004e14:	08006ed1 	.word	0x08006ed1
 8004e18:	2000001c 	.word	0x2000001c

08004e1c <cleanup_stdio>:
 8004e1c:	6841      	ldr	r1, [r0, #4]
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <cleanup_stdio+0x34>)
 8004e20:	4299      	cmp	r1, r3
 8004e22:	b510      	push	{r4, lr}
 8004e24:	4604      	mov	r4, r0
 8004e26:	d001      	beq.n	8004e2c <cleanup_stdio+0x10>
 8004e28:	f002 f852 	bl	8006ed0 <_fflush_r>
 8004e2c:	68a1      	ldr	r1, [r4, #8]
 8004e2e:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <cleanup_stdio+0x38>)
 8004e30:	4299      	cmp	r1, r3
 8004e32:	d002      	beq.n	8004e3a <cleanup_stdio+0x1e>
 8004e34:	4620      	mov	r0, r4
 8004e36:	f002 f84b 	bl	8006ed0 <_fflush_r>
 8004e3a:	68e1      	ldr	r1, [r4, #12]
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <cleanup_stdio+0x3c>)
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	d004      	beq.n	8004e4c <cleanup_stdio+0x30>
 8004e42:	4620      	mov	r0, r4
 8004e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e48:	f002 b842 	b.w	8006ed0 <_fflush_r>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	bf00      	nop
 8004e50:	200002f0 	.word	0x200002f0
 8004e54:	20000358 	.word	0x20000358
 8004e58:	200003c0 	.word	0x200003c0

08004e5c <global_stdio_init.part.0>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <global_stdio_init.part.0+0x30>)
 8004e60:	4c0b      	ldr	r4, [pc, #44]	@ (8004e90 <global_stdio_init.part.0+0x34>)
 8004e62:	4a0c      	ldr	r2, [pc, #48]	@ (8004e94 <global_stdio_init.part.0+0x38>)
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	4620      	mov	r0, r4
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	f7ff ff94 	bl	8004d98 <std>
 8004e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e74:	2201      	movs	r2, #1
 8004e76:	2109      	movs	r1, #9
 8004e78:	f7ff ff8e 	bl	8004d98 <std>
 8004e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e80:	2202      	movs	r2, #2
 8004e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e86:	2112      	movs	r1, #18
 8004e88:	f7ff bf86 	b.w	8004d98 <std>
 8004e8c:	20000428 	.word	0x20000428
 8004e90:	200002f0 	.word	0x200002f0
 8004e94:	08004e05 	.word	0x08004e05

08004e98 <__sfp_lock_acquire>:
 8004e98:	4801      	ldr	r0, [pc, #4]	@ (8004ea0 <__sfp_lock_acquire+0x8>)
 8004e9a:	f000 ba26 	b.w	80052ea <__retarget_lock_acquire_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20000431 	.word	0x20000431

08004ea4 <__sfp_lock_release>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	@ (8004eac <__sfp_lock_release+0x8>)
 8004ea6:	f000 ba21 	b.w	80052ec <__retarget_lock_release_recursive>
 8004eaa:	bf00      	nop
 8004eac:	20000431 	.word	0x20000431

08004eb0 <__sinit>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	f7ff fff0 	bl	8004e98 <__sfp_lock_acquire>
 8004eb8:	6a23      	ldr	r3, [r4, #32]
 8004eba:	b11b      	cbz	r3, 8004ec4 <__sinit+0x14>
 8004ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec0:	f7ff bff0 	b.w	8004ea4 <__sfp_lock_release>
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <__sinit+0x28>)
 8004ec6:	6223      	str	r3, [r4, #32]
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <__sinit+0x2c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f5      	bne.n	8004ebc <__sinit+0xc>
 8004ed0:	f7ff ffc4 	bl	8004e5c <global_stdio_init.part.0>
 8004ed4:	e7f2      	b.n	8004ebc <__sinit+0xc>
 8004ed6:	bf00      	nop
 8004ed8:	08004e1d 	.word	0x08004e1d
 8004edc:	20000428 	.word	0x20000428

08004ee0 <_fwalk_sglue>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	4688      	mov	r8, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	2600      	movs	r6, #0
 8004eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef4:	d505      	bpl.n	8004f02 <_fwalk_sglue+0x22>
 8004ef6:	6824      	ldr	r4, [r4, #0]
 8004ef8:	2c00      	cmp	r4, #0
 8004efa:	d1f7      	bne.n	8004eec <_fwalk_sglue+0xc>
 8004efc:	4630      	mov	r0, r6
 8004efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d907      	bls.n	8004f18 <_fwalk_sglue+0x38>
 8004f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	d003      	beq.n	8004f18 <_fwalk_sglue+0x38>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	4306      	orrs	r6, r0
 8004f18:	3568      	adds	r5, #104	@ 0x68
 8004f1a:	e7e9      	b.n	8004ef0 <_fwalk_sglue+0x10>

08004f1c <iprintf>:
 8004f1c:	b40f      	push	{r0, r1, r2, r3}
 8004f1e:	b507      	push	{r0, r1, r2, lr}
 8004f20:	4906      	ldr	r1, [pc, #24]	@ (8004f3c <iprintf+0x20>)
 8004f22:	ab04      	add	r3, sp, #16
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2a:	6881      	ldr	r1, [r0, #8]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	f001 fe33 	bl	8006b98 <_vfiprintf_r>
 8004f32:	b003      	add	sp, #12
 8004f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f38:	b004      	add	sp, #16
 8004f3a:	4770      	bx	lr
 8004f3c:	20000018 	.word	0x20000018

08004f40 <_puts_r>:
 8004f40:	6a03      	ldr	r3, [r0, #32]
 8004f42:	b570      	push	{r4, r5, r6, lr}
 8004f44:	6884      	ldr	r4, [r0, #8]
 8004f46:	4605      	mov	r5, r0
 8004f48:	460e      	mov	r6, r1
 8004f4a:	b90b      	cbnz	r3, 8004f50 <_puts_r+0x10>
 8004f4c:	f7ff ffb0 	bl	8004eb0 <__sinit>
 8004f50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f52:	07db      	lsls	r3, r3, #31
 8004f54:	d405      	bmi.n	8004f62 <_puts_r+0x22>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	0598      	lsls	r0, r3, #22
 8004f5a:	d402      	bmi.n	8004f62 <_puts_r+0x22>
 8004f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f5e:	f000 f9c4 	bl	80052ea <__retarget_lock_acquire_recursive>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	0719      	lsls	r1, r3, #28
 8004f66:	d502      	bpl.n	8004f6e <_puts_r+0x2e>
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d135      	bne.n	8004fda <_puts_r+0x9a>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 f8e7 	bl	8005144 <__swsetup_r>
 8004f76:	b380      	cbz	r0, 8004fda <_puts_r+0x9a>
 8004f78:	f04f 35ff 	mov.w	r5, #4294967295
 8004f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f7e:	07da      	lsls	r2, r3, #31
 8004f80:	d405      	bmi.n	8004f8e <_puts_r+0x4e>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	059b      	lsls	r3, r3, #22
 8004f86:	d402      	bmi.n	8004f8e <_puts_r+0x4e>
 8004f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8a:	f000 f9af 	bl	80052ec <__retarget_lock_release_recursive>
 8004f8e:	4628      	mov	r0, r5
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da04      	bge.n	8004fa0 <_puts_r+0x60>
 8004f96:	69a2      	ldr	r2, [r4, #24]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	dc17      	bgt.n	8004fcc <_puts_r+0x8c>
 8004f9c:	290a      	cmp	r1, #10
 8004f9e:	d015      	beq.n	8004fcc <_puts_r+0x8c>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	6022      	str	r2, [r4, #0]
 8004fa6:	7019      	strb	r1, [r3, #0]
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60a3      	str	r3, [r4, #8]
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	d1ed      	bne.n	8004f92 <_puts_r+0x52>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da11      	bge.n	8004fde <_puts_r+0x9e>
 8004fba:	4622      	mov	r2, r4
 8004fbc:	210a      	movs	r1, #10
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 f881 	bl	80050c6 <__swbuf_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d0d7      	beq.n	8004f78 <_puts_r+0x38>
 8004fc8:	250a      	movs	r5, #10
 8004fca:	e7d7      	b.n	8004f7c <_puts_r+0x3c>
 8004fcc:	4622      	mov	r2, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 f879 	bl	80050c6 <__swbuf_r>
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d1e7      	bne.n	8004fa8 <_puts_r+0x68>
 8004fd8:	e7ce      	b.n	8004f78 <_puts_r+0x38>
 8004fda:	3e01      	subs	r6, #1
 8004fdc:	e7e4      	b.n	8004fa8 <_puts_r+0x68>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	6022      	str	r2, [r4, #0]
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e7ee      	b.n	8004fc8 <_puts_r+0x88>
	...

08004fec <puts>:
 8004fec:	4b02      	ldr	r3, [pc, #8]	@ (8004ff8 <puts+0xc>)
 8004fee:	4601      	mov	r1, r0
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f7ff bfa5 	b.w	8004f40 <_puts_r>
 8004ff6:	bf00      	nop
 8004ff8:	20000018 	.word	0x20000018

08004ffc <siprintf>:
 8004ffc:	b40e      	push	{r1, r2, r3}
 8004ffe:	b510      	push	{r4, lr}
 8005000:	b09d      	sub	sp, #116	@ 0x74
 8005002:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005004:	9002      	str	r0, [sp, #8]
 8005006:	9006      	str	r0, [sp, #24]
 8005008:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800500c:	480a      	ldr	r0, [pc, #40]	@ (8005038 <siprintf+0x3c>)
 800500e:	9107      	str	r1, [sp, #28]
 8005010:	9104      	str	r1, [sp, #16]
 8005012:	490a      	ldr	r1, [pc, #40]	@ (800503c <siprintf+0x40>)
 8005014:	f853 2b04 	ldr.w	r2, [r3], #4
 8005018:	9105      	str	r1, [sp, #20]
 800501a:	2400      	movs	r4, #0
 800501c:	a902      	add	r1, sp, #8
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005024:	f001 fc92 	bl	800694c <_svfiprintf_r>
 8005028:	9b02      	ldr	r3, [sp, #8]
 800502a:	701c      	strb	r4, [r3, #0]
 800502c:	b01d      	add	sp, #116	@ 0x74
 800502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005032:	b003      	add	sp, #12
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000018 	.word	0x20000018
 800503c:	ffff0208 	.word	0xffff0208

08005040 <__sread>:
 8005040:	b510      	push	{r4, lr}
 8005042:	460c      	mov	r4, r1
 8005044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005048:	f000 f900 	bl	800524c <_read_r>
 800504c:	2800      	cmp	r0, #0
 800504e:	bfab      	itete	ge
 8005050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005052:	89a3      	ldrhlt	r3, [r4, #12]
 8005054:	181b      	addge	r3, r3, r0
 8005056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800505a:	bfac      	ite	ge
 800505c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800505e:	81a3      	strhlt	r3, [r4, #12]
 8005060:	bd10      	pop	{r4, pc}

08005062 <__swrite>:
 8005062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005066:	461f      	mov	r7, r3
 8005068:	898b      	ldrh	r3, [r1, #12]
 800506a:	05db      	lsls	r3, r3, #23
 800506c:	4605      	mov	r5, r0
 800506e:	460c      	mov	r4, r1
 8005070:	4616      	mov	r6, r2
 8005072:	d505      	bpl.n	8005080 <__swrite+0x1e>
 8005074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005078:	2302      	movs	r3, #2
 800507a:	2200      	movs	r2, #0
 800507c:	f000 f8d4 	bl	8005228 <_lseek_r>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	4632      	mov	r2, r6
 800508e:	463b      	mov	r3, r7
 8005090:	4628      	mov	r0, r5
 8005092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005096:	f000 b8eb 	b.w	8005270 <_write_r>

0800509a <__sseek>:
 800509a:	b510      	push	{r4, lr}
 800509c:	460c      	mov	r4, r1
 800509e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a2:	f000 f8c1 	bl	8005228 <_lseek_r>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	bf15      	itete	ne
 80050ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050b6:	81a3      	strheq	r3, [r4, #12]
 80050b8:	bf18      	it	ne
 80050ba:	81a3      	strhne	r3, [r4, #12]
 80050bc:	bd10      	pop	{r4, pc}

080050be <__sclose>:
 80050be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c2:	f000 b8a1 	b.w	8005208 <_close_r>

080050c6 <__swbuf_r>:
 80050c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c8:	460e      	mov	r6, r1
 80050ca:	4614      	mov	r4, r2
 80050cc:	4605      	mov	r5, r0
 80050ce:	b118      	cbz	r0, 80050d8 <__swbuf_r+0x12>
 80050d0:	6a03      	ldr	r3, [r0, #32]
 80050d2:	b90b      	cbnz	r3, 80050d8 <__swbuf_r+0x12>
 80050d4:	f7ff feec 	bl	8004eb0 <__sinit>
 80050d8:	69a3      	ldr	r3, [r4, #24]
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	071a      	lsls	r2, r3, #28
 80050e0:	d501      	bpl.n	80050e6 <__swbuf_r+0x20>
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b943      	cbnz	r3, 80050f8 <__swbuf_r+0x32>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f82b 	bl	8005144 <__swsetup_r>
 80050ee:	b118      	cbz	r0, 80050f8 <__swbuf_r+0x32>
 80050f0:	f04f 37ff 	mov.w	r7, #4294967295
 80050f4:	4638      	mov	r0, r7
 80050f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	6922      	ldr	r2, [r4, #16]
 80050fc:	1a98      	subs	r0, r3, r2
 80050fe:	6963      	ldr	r3, [r4, #20]
 8005100:	b2f6      	uxtb	r6, r6
 8005102:	4283      	cmp	r3, r0
 8005104:	4637      	mov	r7, r6
 8005106:	dc05      	bgt.n	8005114 <__swbuf_r+0x4e>
 8005108:	4621      	mov	r1, r4
 800510a:	4628      	mov	r0, r5
 800510c:	f001 fee0 	bl	8006ed0 <_fflush_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	d1ed      	bne.n	80050f0 <__swbuf_r+0x2a>
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	701e      	strb	r6, [r3, #0]
 8005122:	6962      	ldr	r2, [r4, #20]
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	429a      	cmp	r2, r3
 8005128:	d004      	beq.n	8005134 <__swbuf_r+0x6e>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	07db      	lsls	r3, r3, #31
 800512e:	d5e1      	bpl.n	80050f4 <__swbuf_r+0x2e>
 8005130:	2e0a      	cmp	r6, #10
 8005132:	d1df      	bne.n	80050f4 <__swbuf_r+0x2e>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f001 feca 	bl	8006ed0 <_fflush_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d0d9      	beq.n	80050f4 <__swbuf_r+0x2e>
 8005140:	e7d6      	b.n	80050f0 <__swbuf_r+0x2a>
	...

08005144 <__swsetup_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4b29      	ldr	r3, [pc, #164]	@ (80051ec <__swsetup_r+0xa8>)
 8005148:	4605      	mov	r5, r0
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	460c      	mov	r4, r1
 800514e:	b118      	cbz	r0, 8005158 <__swsetup_r+0x14>
 8005150:	6a03      	ldr	r3, [r0, #32]
 8005152:	b90b      	cbnz	r3, 8005158 <__swsetup_r+0x14>
 8005154:	f7ff feac 	bl	8004eb0 <__sinit>
 8005158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515c:	0719      	lsls	r1, r3, #28
 800515e:	d422      	bmi.n	80051a6 <__swsetup_r+0x62>
 8005160:	06da      	lsls	r2, r3, #27
 8005162:	d407      	bmi.n	8005174 <__swsetup_r+0x30>
 8005164:	2209      	movs	r2, #9
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	e033      	b.n	80051dc <__swsetup_r+0x98>
 8005174:	0758      	lsls	r0, r3, #29
 8005176:	d512      	bpl.n	800519e <__swsetup_r+0x5a>
 8005178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800517a:	b141      	cbz	r1, 800518e <__swsetup_r+0x4a>
 800517c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005180:	4299      	cmp	r1, r3
 8005182:	d002      	beq.n	800518a <__swsetup_r+0x46>
 8005184:	4628      	mov	r0, r5
 8005186:	f000 ff0b 	bl	8005fa0 <_free_r>
 800518a:	2300      	movs	r3, #0
 800518c:	6363      	str	r3, [r4, #52]	@ 0x34
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	2300      	movs	r3, #0
 8005198:	6063      	str	r3, [r4, #4]
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f043 0308 	orr.w	r3, r3, #8
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	b94b      	cbnz	r3, 80051be <__swsetup_r+0x7a>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b4:	d003      	beq.n	80051be <__swsetup_r+0x7a>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f001 fed7 	bl	8006f6c <__smakebuf_r>
 80051be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c2:	f013 0201 	ands.w	r2, r3, #1
 80051c6:	d00a      	beq.n	80051de <__swsetup_r+0x9a>
 80051c8:	2200      	movs	r2, #0
 80051ca:	60a2      	str	r2, [r4, #8]
 80051cc:	6962      	ldr	r2, [r4, #20]
 80051ce:	4252      	negs	r2, r2
 80051d0:	61a2      	str	r2, [r4, #24]
 80051d2:	6922      	ldr	r2, [r4, #16]
 80051d4:	b942      	cbnz	r2, 80051e8 <__swsetup_r+0xa4>
 80051d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051da:	d1c5      	bne.n	8005168 <__swsetup_r+0x24>
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	0799      	lsls	r1, r3, #30
 80051e0:	bf58      	it	pl
 80051e2:	6962      	ldrpl	r2, [r4, #20]
 80051e4:	60a2      	str	r2, [r4, #8]
 80051e6:	e7f4      	b.n	80051d2 <__swsetup_r+0x8e>
 80051e8:	2000      	movs	r0, #0
 80051ea:	e7f7      	b.n	80051dc <__swsetup_r+0x98>
 80051ec:	20000018 	.word	0x20000018

080051f0 <memset>:
 80051f0:	4402      	add	r2, r0
 80051f2:	4603      	mov	r3, r0
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d100      	bne.n	80051fa <memset+0xa>
 80051f8:	4770      	bx	lr
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e7f9      	b.n	80051f4 <memset+0x4>

08005200 <_localeconv_r>:
 8005200:	4800      	ldr	r0, [pc, #0]	@ (8005204 <_localeconv_r+0x4>)
 8005202:	4770      	bx	lr
 8005204:	20000158 	.word	0x20000158

08005208 <_close_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d06      	ldr	r5, [pc, #24]	@ (8005224 <_close_r+0x1c>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	f7fc fbd0 	bl	80019b8 <_close>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_close_r+0x1a>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_close_r+0x1a>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	2000042c 	.word	0x2000042c

08005228 <_lseek_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	@ (8005248 <_lseek_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fc fbe5 	bl	8001a06 <_lseek>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_lseek_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_lseek_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	2000042c 	.word	0x2000042c

0800524c <_read_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	@ (800526c <_read_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fc fb73 	bl	8001946 <_read>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_read_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_read_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	2000042c 	.word	0x2000042c

08005270 <_write_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	@ (8005290 <_write_r+0x20>)
 8005274:	4604      	mov	r4, r0
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	2200      	movs	r2, #0
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fc fb7e 	bl	8001980 <_write>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_write_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_write_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	2000042c 	.word	0x2000042c

08005294 <__errno>:
 8005294:	4b01      	ldr	r3, [pc, #4]	@ (800529c <__errno+0x8>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000018 	.word	0x20000018

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4d0d      	ldr	r5, [pc, #52]	@ (80052d8 <__libc_init_array+0x38>)
 80052a4:	4c0d      	ldr	r4, [pc, #52]	@ (80052dc <__libc_init_array+0x3c>)
 80052a6:	1b64      	subs	r4, r4, r5
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	2600      	movs	r6, #0
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	4d0b      	ldr	r5, [pc, #44]	@ (80052e0 <__libc_init_array+0x40>)
 80052b2:	4c0c      	ldr	r4, [pc, #48]	@ (80052e4 <__libc_init_array+0x44>)
 80052b4:	f001 ffd6 	bl	8007264 <_init>
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	2600      	movs	r6, #0
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	080076b4 	.word	0x080076b4
 80052dc:	080076b4 	.word	0x080076b4
 80052e0:	080076b4 	.word	0x080076b4
 80052e4:	080076b8 	.word	0x080076b8

080052e8 <__retarget_lock_init_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_acquire_recursive>:
 80052ea:	4770      	bx	lr

080052ec <__retarget_lock_release_recursive>:
 80052ec:	4770      	bx	lr

080052ee <quorem>:
 80052ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f2:	6903      	ldr	r3, [r0, #16]
 80052f4:	690c      	ldr	r4, [r1, #16]
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	4607      	mov	r7, r0
 80052fa:	db7e      	blt.n	80053fa <quorem+0x10c>
 80052fc:	3c01      	subs	r4, #1
 80052fe:	f101 0814 	add.w	r8, r1, #20
 8005302:	00a3      	lsls	r3, r4, #2
 8005304:	f100 0514 	add.w	r5, r0, #20
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005318:	3301      	adds	r3, #1
 800531a:	429a      	cmp	r2, r3
 800531c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005320:	fbb2 f6f3 	udiv	r6, r2, r3
 8005324:	d32e      	bcc.n	8005384 <quorem+0x96>
 8005326:	f04f 0a00 	mov.w	sl, #0
 800532a:	46c4      	mov	ip, r8
 800532c:	46ae      	mov	lr, r5
 800532e:	46d3      	mov	fp, sl
 8005330:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005334:	b298      	uxth	r0, r3
 8005336:	fb06 a000 	mla	r0, r6, r0, sl
 800533a:	0c02      	lsrs	r2, r0, #16
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	fb06 2303 	mla	r3, r6, r3, r2
 8005342:	f8de 2000 	ldr.w	r2, [lr]
 8005346:	b280      	uxth	r0, r0
 8005348:	b292      	uxth	r2, r2
 800534a:	1a12      	subs	r2, r2, r0
 800534c:	445a      	add	r2, fp
 800534e:	f8de 0000 	ldr.w	r0, [lr]
 8005352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005356:	b29b      	uxth	r3, r3
 8005358:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800535c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005360:	b292      	uxth	r2, r2
 8005362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005366:	45e1      	cmp	r9, ip
 8005368:	f84e 2b04 	str.w	r2, [lr], #4
 800536c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005370:	d2de      	bcs.n	8005330 <quorem+0x42>
 8005372:	9b00      	ldr	r3, [sp, #0]
 8005374:	58eb      	ldr	r3, [r5, r3]
 8005376:	b92b      	cbnz	r3, 8005384 <quorem+0x96>
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	3b04      	subs	r3, #4
 800537c:	429d      	cmp	r5, r3
 800537e:	461a      	mov	r2, r3
 8005380:	d32f      	bcc.n	80053e2 <quorem+0xf4>
 8005382:	613c      	str	r4, [r7, #16]
 8005384:	4638      	mov	r0, r7
 8005386:	f001 f97d 	bl	8006684 <__mcmp>
 800538a:	2800      	cmp	r0, #0
 800538c:	db25      	blt.n	80053da <quorem+0xec>
 800538e:	4629      	mov	r1, r5
 8005390:	2000      	movs	r0, #0
 8005392:	f858 2b04 	ldr.w	r2, [r8], #4
 8005396:	f8d1 c000 	ldr.w	ip, [r1]
 800539a:	fa1f fe82 	uxth.w	lr, r2
 800539e:	fa1f f38c 	uxth.w	r3, ip
 80053a2:	eba3 030e 	sub.w	r3, r3, lr
 80053a6:	4403      	add	r3, r0
 80053a8:	0c12      	lsrs	r2, r2, #16
 80053aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b8:	45c1      	cmp	r9, r8
 80053ba:	f841 3b04 	str.w	r3, [r1], #4
 80053be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053c2:	d2e6      	bcs.n	8005392 <quorem+0xa4>
 80053c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053cc:	b922      	cbnz	r2, 80053d8 <quorem+0xea>
 80053ce:	3b04      	subs	r3, #4
 80053d0:	429d      	cmp	r5, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	d30b      	bcc.n	80053ee <quorem+0x100>
 80053d6:	613c      	str	r4, [r7, #16]
 80053d8:	3601      	adds	r6, #1
 80053da:	4630      	mov	r0, r6
 80053dc:	b003      	add	sp, #12
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	3b04      	subs	r3, #4
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d1cb      	bne.n	8005382 <quorem+0x94>
 80053ea:	3c01      	subs	r4, #1
 80053ec:	e7c6      	b.n	800537c <quorem+0x8e>
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	3b04      	subs	r3, #4
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d1ef      	bne.n	80053d6 <quorem+0xe8>
 80053f6:	3c01      	subs	r4, #1
 80053f8:	e7ea      	b.n	80053d0 <quorem+0xe2>
 80053fa:	2000      	movs	r0, #0
 80053fc:	e7ee      	b.n	80053dc <quorem+0xee>
	...

08005400 <_dtoa_r>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	69c7      	ldr	r7, [r0, #28]
 8005406:	b097      	sub	sp, #92	@ 0x5c
 8005408:	ed8d 0b04 	vstr	d0, [sp, #16]
 800540c:	ec55 4b10 	vmov	r4, r5, d0
 8005410:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005412:	9107      	str	r1, [sp, #28]
 8005414:	4681      	mov	r9, r0
 8005416:	920c      	str	r2, [sp, #48]	@ 0x30
 8005418:	9311      	str	r3, [sp, #68]	@ 0x44
 800541a:	b97f      	cbnz	r7, 800543c <_dtoa_r+0x3c>
 800541c:	2010      	movs	r0, #16
 800541e:	f000 fe09 	bl	8006034 <malloc>
 8005422:	4602      	mov	r2, r0
 8005424:	f8c9 001c 	str.w	r0, [r9, #28]
 8005428:	b920      	cbnz	r0, 8005434 <_dtoa_r+0x34>
 800542a:	4ba9      	ldr	r3, [pc, #676]	@ (80056d0 <_dtoa_r+0x2d0>)
 800542c:	21ef      	movs	r1, #239	@ 0xef
 800542e:	48a9      	ldr	r0, [pc, #676]	@ (80056d4 <_dtoa_r+0x2d4>)
 8005430:	f001 fe32 	bl	8007098 <__assert_func>
 8005434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005438:	6007      	str	r7, [r0, #0]
 800543a:	60c7      	str	r7, [r0, #12]
 800543c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005440:	6819      	ldr	r1, [r3, #0]
 8005442:	b159      	cbz	r1, 800545c <_dtoa_r+0x5c>
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	604a      	str	r2, [r1, #4]
 8005448:	2301      	movs	r3, #1
 800544a:	4093      	lsls	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
 800544e:	4648      	mov	r0, r9
 8005450:	f000 fee6 	bl	8006220 <_Bfree>
 8005454:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	1e2b      	subs	r3, r5, #0
 800545e:	bfb9      	ittee	lt
 8005460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005464:	9305      	strlt	r3, [sp, #20]
 8005466:	2300      	movge	r3, #0
 8005468:	6033      	strge	r3, [r6, #0]
 800546a:	9f05      	ldr	r7, [sp, #20]
 800546c:	4b9a      	ldr	r3, [pc, #616]	@ (80056d8 <_dtoa_r+0x2d8>)
 800546e:	bfbc      	itt	lt
 8005470:	2201      	movlt	r2, #1
 8005472:	6032      	strlt	r2, [r6, #0]
 8005474:	43bb      	bics	r3, r7
 8005476:	d112      	bne.n	800549e <_dtoa_r+0x9e>
 8005478:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800547a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005484:	4323      	orrs	r3, r4
 8005486:	f000 855a 	beq.w	8005f3e <_dtoa_r+0xb3e>
 800548a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800548c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056ec <_dtoa_r+0x2ec>
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 855c 	beq.w	8005f4e <_dtoa_r+0xb4e>
 8005496:	f10a 0303 	add.w	r3, sl, #3
 800549a:	f000 bd56 	b.w	8005f4a <_dtoa_r+0xb4a>
 800549e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80054a2:	2200      	movs	r2, #0
 80054a4:	ec51 0b17 	vmov	r0, r1, d7
 80054a8:	2300      	movs	r3, #0
 80054aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80054ae:	f7fb fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b2:	4680      	mov	r8, r0
 80054b4:	b158      	cbz	r0, 80054ce <_dtoa_r+0xce>
 80054b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054b8:	2301      	movs	r3, #1
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054be:	b113      	cbz	r3, 80054c6 <_dtoa_r+0xc6>
 80054c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80054c2:	4b86      	ldr	r3, [pc, #536]	@ (80056dc <_dtoa_r+0x2dc>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80056f0 <_dtoa_r+0x2f0>
 80054ca:	f000 bd40 	b.w	8005f4e <_dtoa_r+0xb4e>
 80054ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80054d2:	aa14      	add	r2, sp, #80	@ 0x50
 80054d4:	a915      	add	r1, sp, #84	@ 0x54
 80054d6:	4648      	mov	r0, r9
 80054d8:	f001 f984 	bl	80067e4 <__d2b>
 80054dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	d078      	beq.n	80055d8 <_dtoa_r+0x1d8>
 80054e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005500:	4619      	mov	r1, r3
 8005502:	2200      	movs	r2, #0
 8005504:	4b76      	ldr	r3, [pc, #472]	@ (80056e0 <_dtoa_r+0x2e0>)
 8005506:	f7fa fec7 	bl	8000298 <__aeabi_dsub>
 800550a:	a36b      	add	r3, pc, #428	@ (adr r3, 80056b8 <_dtoa_r+0x2b8>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb f87a 	bl	8000608 <__aeabi_dmul>
 8005514:	a36a      	add	r3, pc, #424	@ (adr r3, 80056c0 <_dtoa_r+0x2c0>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa febf 	bl	800029c <__adddf3>
 800551e:	4604      	mov	r4, r0
 8005520:	4630      	mov	r0, r6
 8005522:	460d      	mov	r5, r1
 8005524:	f7fb f806 	bl	8000534 <__aeabi_i2d>
 8005528:	a367      	add	r3, pc, #412	@ (adr r3, 80056c8 <_dtoa_r+0x2c8>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb f86b 	bl	8000608 <__aeabi_dmul>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4620      	mov	r0, r4
 8005538:	4629      	mov	r1, r5
 800553a:	f7fa feaf 	bl	800029c <__adddf3>
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	f7fb fb11 	bl	8000b68 <__aeabi_d2iz>
 8005546:	2200      	movs	r2, #0
 8005548:	4607      	mov	r7, r0
 800554a:	2300      	movs	r3, #0
 800554c:	4620      	mov	r0, r4
 800554e:	4629      	mov	r1, r5
 8005550:	f7fb facc 	bl	8000aec <__aeabi_dcmplt>
 8005554:	b140      	cbz	r0, 8005568 <_dtoa_r+0x168>
 8005556:	4638      	mov	r0, r7
 8005558:	f7fa ffec 	bl	8000534 <__aeabi_i2d>
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f7fb faba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005564:	b900      	cbnz	r0, 8005568 <_dtoa_r+0x168>
 8005566:	3f01      	subs	r7, #1
 8005568:	2f16      	cmp	r7, #22
 800556a:	d852      	bhi.n	8005612 <_dtoa_r+0x212>
 800556c:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <_dtoa_r+0x2e4>)
 800556e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800557a:	f7fb fab7 	bl	8000aec <__aeabi_dcmplt>
 800557e:	2800      	cmp	r0, #0
 8005580:	d049      	beq.n	8005616 <_dtoa_r+0x216>
 8005582:	3f01      	subs	r7, #1
 8005584:	2300      	movs	r3, #0
 8005586:	9310      	str	r3, [sp, #64]	@ 0x40
 8005588:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800558a:	1b9b      	subs	r3, r3, r6
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	bf45      	ittet	mi
 8005590:	f1c3 0301 	rsbmi	r3, r3, #1
 8005594:	9300      	strmi	r3, [sp, #0]
 8005596:	2300      	movpl	r3, #0
 8005598:	2300      	movmi	r3, #0
 800559a:	9206      	str	r2, [sp, #24]
 800559c:	bf54      	ite	pl
 800559e:	9300      	strpl	r3, [sp, #0]
 80055a0:	9306      	strmi	r3, [sp, #24]
 80055a2:	2f00      	cmp	r7, #0
 80055a4:	db39      	blt.n	800561a <_dtoa_r+0x21a>
 80055a6:	9b06      	ldr	r3, [sp, #24]
 80055a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80055aa:	443b      	add	r3, r7
 80055ac:	9306      	str	r3, [sp, #24]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d863      	bhi.n	8005680 <_dtoa_r+0x280>
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	bfc4      	itt	gt
 80055bc:	3b04      	subgt	r3, #4
 80055be:	9307      	strgt	r3, [sp, #28]
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	f1a3 0302 	sub.w	r3, r3, #2
 80055c6:	bfcc      	ite	gt
 80055c8:	2400      	movgt	r4, #0
 80055ca:	2401      	movle	r4, #1
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d863      	bhi.n	8005698 <_dtoa_r+0x298>
 80055d0:	e8df f003 	tbb	[pc, r3]
 80055d4:	2b375452 	.word	0x2b375452
 80055d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055dc:	441e      	add	r6, r3
 80055de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	bfc1      	itttt	gt
 80055e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055ea:	409f      	lslgt	r7, r3
 80055ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055f4:	bfd6      	itet	le
 80055f6:	f1c3 0320 	rsble	r3, r3, #32
 80055fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80055fe:	fa04 f003 	lslle.w	r0, r4, r3
 8005602:	f7fa ff87 	bl	8000514 <__aeabi_ui2d>
 8005606:	2201      	movs	r2, #1
 8005608:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800560c:	3e01      	subs	r6, #1
 800560e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005610:	e776      	b.n	8005500 <_dtoa_r+0x100>
 8005612:	2301      	movs	r3, #1
 8005614:	e7b7      	b.n	8005586 <_dtoa_r+0x186>
 8005616:	9010      	str	r0, [sp, #64]	@ 0x40
 8005618:	e7b6      	b.n	8005588 <_dtoa_r+0x188>
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	1bdb      	subs	r3, r3, r7
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	427b      	negs	r3, r7
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	2300      	movs	r3, #0
 8005626:	930d      	str	r3, [sp, #52]	@ 0x34
 8005628:	e7c3      	b.n	80055b2 <_dtoa_r+0x1b2>
 800562a:	2301      	movs	r3, #1
 800562c:	9309      	str	r3, [sp, #36]	@ 0x24
 800562e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005630:	eb07 0b03 	add.w	fp, r7, r3
 8005634:	f10b 0301 	add.w	r3, fp, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	bfb8      	it	lt
 800563e:	2301      	movlt	r3, #1
 8005640:	e006      	b.n	8005650 <_dtoa_r+0x250>
 8005642:	2301      	movs	r3, #1
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	dd28      	ble.n	800569e <_dtoa_r+0x29e>
 800564c:	469b      	mov	fp, r3
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005654:	2100      	movs	r1, #0
 8005656:	2204      	movs	r2, #4
 8005658:	f102 0514 	add.w	r5, r2, #20
 800565c:	429d      	cmp	r5, r3
 800565e:	d926      	bls.n	80056ae <_dtoa_r+0x2ae>
 8005660:	6041      	str	r1, [r0, #4]
 8005662:	4648      	mov	r0, r9
 8005664:	f000 fd9c 	bl	80061a0 <_Balloc>
 8005668:	4682      	mov	sl, r0
 800566a:	2800      	cmp	r0, #0
 800566c:	d142      	bne.n	80056f4 <_dtoa_r+0x2f4>
 800566e:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <_dtoa_r+0x2e8>)
 8005670:	4602      	mov	r2, r0
 8005672:	f240 11af 	movw	r1, #431	@ 0x1af
 8005676:	e6da      	b.n	800542e <_dtoa_r+0x2e>
 8005678:	2300      	movs	r3, #0
 800567a:	e7e3      	b.n	8005644 <_dtoa_r+0x244>
 800567c:	2300      	movs	r3, #0
 800567e:	e7d5      	b.n	800562c <_dtoa_r+0x22c>
 8005680:	2401      	movs	r4, #1
 8005682:	2300      	movs	r3, #0
 8005684:	9307      	str	r3, [sp, #28]
 8005686:	9409      	str	r4, [sp, #36]	@ 0x24
 8005688:	f04f 3bff 	mov.w	fp, #4294967295
 800568c:	2200      	movs	r2, #0
 800568e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005692:	2312      	movs	r3, #18
 8005694:	920c      	str	r2, [sp, #48]	@ 0x30
 8005696:	e7db      	b.n	8005650 <_dtoa_r+0x250>
 8005698:	2301      	movs	r3, #1
 800569a:	9309      	str	r3, [sp, #36]	@ 0x24
 800569c:	e7f4      	b.n	8005688 <_dtoa_r+0x288>
 800569e:	f04f 0b01 	mov.w	fp, #1
 80056a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80056a6:	465b      	mov	r3, fp
 80056a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80056ac:	e7d0      	b.n	8005650 <_dtoa_r+0x250>
 80056ae:	3101      	adds	r1, #1
 80056b0:	0052      	lsls	r2, r2, #1
 80056b2:	e7d1      	b.n	8005658 <_dtoa_r+0x258>
 80056b4:	f3af 8000 	nop.w
 80056b8:	636f4361 	.word	0x636f4361
 80056bc:	3fd287a7 	.word	0x3fd287a7
 80056c0:	8b60c8b3 	.word	0x8b60c8b3
 80056c4:	3fc68a28 	.word	0x3fc68a28
 80056c8:	509f79fb 	.word	0x509f79fb
 80056cc:	3fd34413 	.word	0x3fd34413
 80056d0:	08007375 	.word	0x08007375
 80056d4:	0800738c 	.word	0x0800738c
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	08007345 	.word	0x08007345
 80056e0:	3ff80000 	.word	0x3ff80000
 80056e4:	080074e0 	.word	0x080074e0
 80056e8:	080073e4 	.word	0x080073e4
 80056ec:	08007371 	.word	0x08007371
 80056f0:	08007344 	.word	0x08007344
 80056f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056f8:	6018      	str	r0, [r3, #0]
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	2b0e      	cmp	r3, #14
 80056fe:	f200 80a1 	bhi.w	8005844 <_dtoa_r+0x444>
 8005702:	2c00      	cmp	r4, #0
 8005704:	f000 809e 	beq.w	8005844 <_dtoa_r+0x444>
 8005708:	2f00      	cmp	r7, #0
 800570a:	dd33      	ble.n	8005774 <_dtoa_r+0x374>
 800570c:	4b9c      	ldr	r3, [pc, #624]	@ (8005980 <_dtoa_r+0x580>)
 800570e:	f007 020f 	and.w	r2, r7, #15
 8005712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005716:	ed93 7b00 	vldr	d7, [r3]
 800571a:	05f8      	lsls	r0, r7, #23
 800571c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005720:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005724:	d516      	bpl.n	8005754 <_dtoa_r+0x354>
 8005726:	4b97      	ldr	r3, [pc, #604]	@ (8005984 <_dtoa_r+0x584>)
 8005728:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800572c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005730:	f7fb f894 	bl	800085c <__aeabi_ddiv>
 8005734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005738:	f004 040f 	and.w	r4, r4, #15
 800573c:	2603      	movs	r6, #3
 800573e:	4d91      	ldr	r5, [pc, #580]	@ (8005984 <_dtoa_r+0x584>)
 8005740:	b954      	cbnz	r4, 8005758 <_dtoa_r+0x358>
 8005742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800574a:	f7fb f887 	bl	800085c <__aeabi_ddiv>
 800574e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005752:	e028      	b.n	80057a6 <_dtoa_r+0x3a6>
 8005754:	2602      	movs	r6, #2
 8005756:	e7f2      	b.n	800573e <_dtoa_r+0x33e>
 8005758:	07e1      	lsls	r1, r4, #31
 800575a:	d508      	bpl.n	800576e <_dtoa_r+0x36e>
 800575c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005760:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005764:	f7fa ff50 	bl	8000608 <__aeabi_dmul>
 8005768:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800576c:	3601      	adds	r6, #1
 800576e:	1064      	asrs	r4, r4, #1
 8005770:	3508      	adds	r5, #8
 8005772:	e7e5      	b.n	8005740 <_dtoa_r+0x340>
 8005774:	f000 80af 	beq.w	80058d6 <_dtoa_r+0x4d6>
 8005778:	427c      	negs	r4, r7
 800577a:	4b81      	ldr	r3, [pc, #516]	@ (8005980 <_dtoa_r+0x580>)
 800577c:	4d81      	ldr	r5, [pc, #516]	@ (8005984 <_dtoa_r+0x584>)
 800577e:	f004 020f 	and.w	r2, r4, #15
 8005782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800578e:	f7fa ff3b 	bl	8000608 <__aeabi_dmul>
 8005792:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005796:	1124      	asrs	r4, r4, #4
 8005798:	2300      	movs	r3, #0
 800579a:	2602      	movs	r6, #2
 800579c:	2c00      	cmp	r4, #0
 800579e:	f040 808f 	bne.w	80058c0 <_dtoa_r+0x4c0>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1d3      	bne.n	800574e <_dtoa_r+0x34e>
 80057a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8094 	beq.w	80058da <_dtoa_r+0x4da>
 80057b2:	4b75      	ldr	r3, [pc, #468]	@ (8005988 <_dtoa_r+0x588>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f997 	bl	8000aec <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f000 808b 	beq.w	80058da <_dtoa_r+0x4da>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8087 	beq.w	80058da <_dtoa_r+0x4da>
 80057cc:	f1bb 0f00 	cmp.w	fp, #0
 80057d0:	dd34      	ble.n	800583c <_dtoa_r+0x43c>
 80057d2:	4620      	mov	r0, r4
 80057d4:	4b6d      	ldr	r3, [pc, #436]	@ (800598c <_dtoa_r+0x58c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fa ff15 	bl	8000608 <__aeabi_dmul>
 80057de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80057e6:	3601      	adds	r6, #1
 80057e8:	465c      	mov	r4, fp
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7fa fea2 	bl	8000534 <__aeabi_i2d>
 80057f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f4:	f7fa ff08 	bl	8000608 <__aeabi_dmul>
 80057f8:	4b65      	ldr	r3, [pc, #404]	@ (8005990 <_dtoa_r+0x590>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	f7fa fd4e 	bl	800029c <__adddf3>
 8005800:	4605      	mov	r5, r0
 8005802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005806:	2c00      	cmp	r4, #0
 8005808:	d16a      	bne.n	80058e0 <_dtoa_r+0x4e0>
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	4b61      	ldr	r3, [pc, #388]	@ (8005994 <_dtoa_r+0x594>)
 8005810:	2200      	movs	r2, #0
 8005812:	f7fa fd41 	bl	8000298 <__aeabi_dsub>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800581e:	462a      	mov	r2, r5
 8005820:	4633      	mov	r3, r6
 8005822:	f7fb f981 	bl	8000b28 <__aeabi_dcmpgt>
 8005826:	2800      	cmp	r0, #0
 8005828:	f040 8298 	bne.w	8005d5c <_dtoa_r+0x95c>
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	462a      	mov	r2, r5
 8005832:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005836:	f7fb f959 	bl	8000aec <__aeabi_dcmplt>
 800583a:	bb38      	cbnz	r0, 800588c <_dtoa_r+0x48c>
 800583c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005840:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005844:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	f2c0 8157 	blt.w	8005afa <_dtoa_r+0x6fa>
 800584c:	2f0e      	cmp	r7, #14
 800584e:	f300 8154 	bgt.w	8005afa <_dtoa_r+0x6fa>
 8005852:	4b4b      	ldr	r3, [pc, #300]	@ (8005980 <_dtoa_r+0x580>)
 8005854:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005858:	ed93 7b00 	vldr	d7, [r3]
 800585c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	ed8d 7b00 	vstr	d7, [sp]
 8005864:	f280 80e5 	bge.w	8005a32 <_dtoa_r+0x632>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f300 80e1 	bgt.w	8005a32 <_dtoa_r+0x632>
 8005870:	d10c      	bne.n	800588c <_dtoa_r+0x48c>
 8005872:	4b48      	ldr	r3, [pc, #288]	@ (8005994 <_dtoa_r+0x594>)
 8005874:	2200      	movs	r2, #0
 8005876:	ec51 0b17 	vmov	r0, r1, d7
 800587a:	f7fa fec5 	bl	8000608 <__aeabi_dmul>
 800587e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005882:	f7fb f947 	bl	8000b14 <__aeabi_dcmpge>
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 8266 	beq.w	8005d58 <_dtoa_r+0x958>
 800588c:	2400      	movs	r4, #0
 800588e:	4625      	mov	r5, r4
 8005890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005892:	4656      	mov	r6, sl
 8005894:	ea6f 0803 	mvn.w	r8, r3
 8005898:	2700      	movs	r7, #0
 800589a:	4621      	mov	r1, r4
 800589c:	4648      	mov	r0, r9
 800589e:	f000 fcbf 	bl	8006220 <_Bfree>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	f000 80bd 	beq.w	8005a22 <_dtoa_r+0x622>
 80058a8:	b12f      	cbz	r7, 80058b6 <_dtoa_r+0x4b6>
 80058aa:	42af      	cmp	r7, r5
 80058ac:	d003      	beq.n	80058b6 <_dtoa_r+0x4b6>
 80058ae:	4639      	mov	r1, r7
 80058b0:	4648      	mov	r0, r9
 80058b2:	f000 fcb5 	bl	8006220 <_Bfree>
 80058b6:	4629      	mov	r1, r5
 80058b8:	4648      	mov	r0, r9
 80058ba:	f000 fcb1 	bl	8006220 <_Bfree>
 80058be:	e0b0      	b.n	8005a22 <_dtoa_r+0x622>
 80058c0:	07e2      	lsls	r2, r4, #31
 80058c2:	d505      	bpl.n	80058d0 <_dtoa_r+0x4d0>
 80058c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058c8:	f7fa fe9e 	bl	8000608 <__aeabi_dmul>
 80058cc:	3601      	adds	r6, #1
 80058ce:	2301      	movs	r3, #1
 80058d0:	1064      	asrs	r4, r4, #1
 80058d2:	3508      	adds	r5, #8
 80058d4:	e762      	b.n	800579c <_dtoa_r+0x39c>
 80058d6:	2602      	movs	r6, #2
 80058d8:	e765      	b.n	80057a6 <_dtoa_r+0x3a6>
 80058da:	9c03      	ldr	r4, [sp, #12]
 80058dc:	46b8      	mov	r8, r7
 80058de:	e784      	b.n	80057ea <_dtoa_r+0x3ea>
 80058e0:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <_dtoa_r+0x580>)
 80058e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ec:	4454      	add	r4, sl
 80058ee:	2900      	cmp	r1, #0
 80058f0:	d054      	beq.n	800599c <_dtoa_r+0x59c>
 80058f2:	4929      	ldr	r1, [pc, #164]	@ (8005998 <_dtoa_r+0x598>)
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fa ffb1 	bl	800085c <__aeabi_ddiv>
 80058fa:	4633      	mov	r3, r6
 80058fc:	462a      	mov	r2, r5
 80058fe:	f7fa fccb 	bl	8000298 <__aeabi_dsub>
 8005902:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005906:	4656      	mov	r6, sl
 8005908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590c:	f7fb f92c 	bl	8000b68 <__aeabi_d2iz>
 8005910:	4605      	mov	r5, r0
 8005912:	f7fa fe0f 	bl	8000534 <__aeabi_i2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591e:	f7fa fcbb 	bl	8000298 <__aeabi_dsub>
 8005922:	3530      	adds	r5, #48	@ 0x30
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800592c:	f806 5b01 	strb.w	r5, [r6], #1
 8005930:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005934:	f7fb f8da 	bl	8000aec <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	d172      	bne.n	8005a22 <_dtoa_r+0x622>
 800593c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005940:	4911      	ldr	r1, [pc, #68]	@ (8005988 <_dtoa_r+0x588>)
 8005942:	2000      	movs	r0, #0
 8005944:	f7fa fca8 	bl	8000298 <__aeabi_dsub>
 8005948:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800594c:	f7fb f8ce 	bl	8000aec <__aeabi_dcmplt>
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 80b4 	bne.w	8005abe <_dtoa_r+0x6be>
 8005956:	42a6      	cmp	r6, r4
 8005958:	f43f af70 	beq.w	800583c <_dtoa_r+0x43c>
 800595c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <_dtoa_r+0x58c>)
 8005962:	2200      	movs	r2, #0
 8005964:	f7fa fe50 	bl	8000608 <__aeabi_dmul>
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <_dtoa_r+0x58c>)
 800596a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800596e:	2200      	movs	r2, #0
 8005970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005974:	f7fa fe48 	bl	8000608 <__aeabi_dmul>
 8005978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800597c:	e7c4      	b.n	8005908 <_dtoa_r+0x508>
 800597e:	bf00      	nop
 8005980:	080074e0 	.word	0x080074e0
 8005984:	080074b8 	.word	0x080074b8
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	40240000 	.word	0x40240000
 8005990:	401c0000 	.word	0x401c0000
 8005994:	40140000 	.word	0x40140000
 8005998:	3fe00000 	.word	0x3fe00000
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	f7fa fe32 	bl	8000608 <__aeabi_dmul>
 80059a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059aa:	4656      	mov	r6, sl
 80059ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b0:	f7fb f8da 	bl	8000b68 <__aeabi_d2iz>
 80059b4:	4605      	mov	r5, r0
 80059b6:	f7fa fdbd 	bl	8000534 <__aeabi_i2d>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c2:	f7fa fc69 	bl	8000298 <__aeabi_dsub>
 80059c6:	3530      	adds	r5, #48	@ 0x30
 80059c8:	f806 5b01 	strb.w	r5, [r6], #1
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	d124      	bne.n	8005a26 <_dtoa_r+0x626>
 80059dc:	4baf      	ldr	r3, [pc, #700]	@ (8005c9c <_dtoa_r+0x89c>)
 80059de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059e2:	f7fa fc5b 	bl	800029c <__adddf3>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	f7fb f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d163      	bne.n	8005abe <_dtoa_r+0x6be>
 80059f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059fa:	49a8      	ldr	r1, [pc, #672]	@ (8005c9c <_dtoa_r+0x89c>)
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7fa fc4b 	bl	8000298 <__aeabi_dsub>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a0a:	f7fb f86f 	bl	8000aec <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f43f af14 	beq.w	800583c <_dtoa_r+0x43c>
 8005a14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a16:	1e73      	subs	r3, r6, #1
 8005a18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a1e:	2b30      	cmp	r3, #48	@ 0x30
 8005a20:	d0f8      	beq.n	8005a14 <_dtoa_r+0x614>
 8005a22:	4647      	mov	r7, r8
 8005a24:	e03b      	b.n	8005a9e <_dtoa_r+0x69e>
 8005a26:	4b9e      	ldr	r3, [pc, #632]	@ (8005ca0 <_dtoa_r+0x8a0>)
 8005a28:	f7fa fdee 	bl	8000608 <__aeabi_dmul>
 8005a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a30:	e7bc      	b.n	80059ac <_dtoa_r+0x5ac>
 8005a32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a36:	4656      	mov	r6, sl
 8005a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa ff0c 	bl	800085c <__aeabi_ddiv>
 8005a44:	f7fb f890 	bl	8000b68 <__aeabi_d2iz>
 8005a48:	4680      	mov	r8, r0
 8005a4a:	f7fa fd73 	bl	8000534 <__aeabi_i2d>
 8005a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a52:	f7fa fdd9 	bl	8000608 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a62:	f7fa fc19 	bl	8000298 <__aeabi_dsub>
 8005a66:	f806 4b01 	strb.w	r4, [r6], #1
 8005a6a:	9d03      	ldr	r5, [sp, #12]
 8005a6c:	eba6 040a 	sub.w	r4, r6, sl
 8005a70:	42a5      	cmp	r5, r4
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	d133      	bne.n	8005ae0 <_dtoa_r+0x6e0>
 8005a78:	f7fa fc10 	bl	800029c <__adddf3>
 8005a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	f7fb f850 	bl	8000b28 <__aeabi_dcmpgt>
 8005a88:	b9c0      	cbnz	r0, 8005abc <_dtoa_r+0x6bc>
 8005a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fb f821 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a96:	b110      	cbz	r0, 8005a9e <_dtoa_r+0x69e>
 8005a98:	f018 0f01 	tst.w	r8, #1
 8005a9c:	d10e      	bne.n	8005abc <_dtoa_r+0x6bc>
 8005a9e:	9902      	ldr	r1, [sp, #8]
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	f000 fbbd 	bl	8006220 <_Bfree>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	7033      	strb	r3, [r6, #0]
 8005aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005aac:	3701      	adds	r7, #1
 8005aae:	601f      	str	r7, [r3, #0]
 8005ab0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 824b 	beq.w	8005f4e <_dtoa_r+0xb4e>
 8005ab8:	601e      	str	r6, [r3, #0]
 8005aba:	e248      	b.n	8005f4e <_dtoa_r+0xb4e>
 8005abc:	46b8      	mov	r8, r7
 8005abe:	4633      	mov	r3, r6
 8005ac0:	461e      	mov	r6, r3
 8005ac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ac6:	2a39      	cmp	r2, #57	@ 0x39
 8005ac8:	d106      	bne.n	8005ad8 <_dtoa_r+0x6d8>
 8005aca:	459a      	cmp	sl, r3
 8005acc:	d1f8      	bne.n	8005ac0 <_dtoa_r+0x6c0>
 8005ace:	2230      	movs	r2, #48	@ 0x30
 8005ad0:	f108 0801 	add.w	r8, r8, #1
 8005ad4:	f88a 2000 	strb.w	r2, [sl]
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	3201      	adds	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e7a0      	b.n	8005a22 <_dtoa_r+0x622>
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8005ca0 <_dtoa_r+0x8a0>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f7fa fd90 	bl	8000608 <__aeabi_dmul>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	4604      	mov	r4, r0
 8005aee:	460d      	mov	r5, r1
 8005af0:	f7fa fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d09f      	beq.n	8005a38 <_dtoa_r+0x638>
 8005af8:	e7d1      	b.n	8005a9e <_dtoa_r+0x69e>
 8005afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	f000 80ea 	beq.w	8005cd6 <_dtoa_r+0x8d6>
 8005b02:	9a07      	ldr	r2, [sp, #28]
 8005b04:	2a01      	cmp	r2, #1
 8005b06:	f300 80cd 	bgt.w	8005ca4 <_dtoa_r+0x8a4>
 8005b0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	f000 80c1 	beq.w	8005c94 <_dtoa_r+0x894>
 8005b12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b16:	9c08      	ldr	r4, [sp, #32]
 8005b18:	9e00      	ldr	r6, [sp, #0]
 8005b1a:	9a00      	ldr	r2, [sp, #0]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	9200      	str	r2, [sp, #0]
 8005b20:	9a06      	ldr	r2, [sp, #24]
 8005b22:	2101      	movs	r1, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	4648      	mov	r0, r9
 8005b28:	9206      	str	r2, [sp, #24]
 8005b2a:	f000 fc2d 	bl	8006388 <__i2b>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b166      	cbz	r6, 8005b4c <_dtoa_r+0x74c>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dd09      	ble.n	8005b4c <_dtoa_r+0x74c>
 8005b38:	42b3      	cmp	r3, r6
 8005b3a:	9a00      	ldr	r2, [sp, #0]
 8005b3c:	bfa8      	it	ge
 8005b3e:	4633      	movge	r3, r6
 8005b40:	1ad2      	subs	r2, r2, r3
 8005b42:	9200      	str	r2, [sp, #0]
 8005b44:	9a06      	ldr	r2, [sp, #24]
 8005b46:	1af6      	subs	r6, r6, r3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	9306      	str	r3, [sp, #24]
 8005b4c:	9b08      	ldr	r3, [sp, #32]
 8005b4e:	b30b      	cbz	r3, 8005b94 <_dtoa_r+0x794>
 8005b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80c6 	beq.w	8005ce4 <_dtoa_r+0x8e4>
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	f000 80c0 	beq.w	8005cde <_dtoa_r+0x8de>
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4622      	mov	r2, r4
 8005b62:	4648      	mov	r0, r9
 8005b64:	f000 fcc8 	bl	80064f8 <__pow5mult>
 8005b68:	9a02      	ldr	r2, [sp, #8]
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f000 fc20 	bl	80063b4 <__multiply>
 8005b74:	9902      	ldr	r1, [sp, #8]
 8005b76:	4680      	mov	r8, r0
 8005b78:	4648      	mov	r0, r9
 8005b7a:	f000 fb51 	bl	8006220 <_Bfree>
 8005b7e:	9b08      	ldr	r3, [sp, #32]
 8005b80:	1b1b      	subs	r3, r3, r4
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	f000 80b1 	beq.w	8005cea <_dtoa_r+0x8ea>
 8005b88:	9a08      	ldr	r2, [sp, #32]
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	4648      	mov	r0, r9
 8005b8e:	f000 fcb3 	bl	80064f8 <__pow5mult>
 8005b92:	9002      	str	r0, [sp, #8]
 8005b94:	2101      	movs	r1, #1
 8005b96:	4648      	mov	r0, r9
 8005b98:	f000 fbf6 	bl	8006388 <__i2b>
 8005b9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 81d8 	beq.w	8005f56 <_dtoa_r+0xb56>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4601      	mov	r1, r0
 8005baa:	4648      	mov	r0, r9
 8005bac:	f000 fca4 	bl	80064f8 <__pow5mult>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	f300 809f 	bgt.w	8005cf8 <_dtoa_r+0x8f8>
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8097 	bne.w	8005cf0 <_dtoa_r+0x8f0>
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 8093 	bne.w	8005cf4 <_dtoa_r+0x8f4>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	b133      	cbz	r3, 8005be8 <_dtoa_r+0x7e8>
 8005bda:	9b00      	ldr	r3, [sp, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	9b06      	ldr	r3, [sp, #24]
 8005be2:	3301      	adds	r3, #1
 8005be4:	9306      	str	r3, [sp, #24]
 8005be6:	2301      	movs	r3, #1
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 81b8 	beq.w	8005f62 <_dtoa_r+0xb62>
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bf8:	6918      	ldr	r0, [r3, #16]
 8005bfa:	f000 fb79 	bl	80062f0 <__hi0bits>
 8005bfe:	f1c0 0020 	rsb	r0, r0, #32
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	4418      	add	r0, r3
 8005c06:	f010 001f 	ands.w	r0, r0, #31
 8005c0a:	f000 8082 	beq.w	8005d12 <_dtoa_r+0x912>
 8005c0e:	f1c0 0320 	rsb	r3, r0, #32
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	dd73      	ble.n	8005cfe <_dtoa_r+0x8fe>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	f1c0 001c 	rsb	r0, r0, #28
 8005c1c:	4403      	add	r3, r0
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	4403      	add	r3, r0
 8005c24:	4406      	add	r6, r0
 8005c26:	9306      	str	r3, [sp, #24]
 8005c28:	9b00      	ldr	r3, [sp, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd05      	ble.n	8005c3a <_dtoa_r+0x83a>
 8005c2e:	9902      	ldr	r1, [sp, #8]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4648      	mov	r0, r9
 8005c34:	f000 fcba 	bl	80065ac <__lshift>
 8005c38:	9002      	str	r0, [sp, #8]
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd05      	ble.n	8005c4c <_dtoa_r+0x84c>
 8005c40:	4621      	mov	r1, r4
 8005c42:	461a      	mov	r2, r3
 8005c44:	4648      	mov	r0, r9
 8005c46:	f000 fcb1 	bl	80065ac <__lshift>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d061      	beq.n	8005d16 <_dtoa_r+0x916>
 8005c52:	9802      	ldr	r0, [sp, #8]
 8005c54:	4621      	mov	r1, r4
 8005c56:	f000 fd15 	bl	8006684 <__mcmp>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	da5b      	bge.n	8005d16 <_dtoa_r+0x916>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9902      	ldr	r1, [sp, #8]
 8005c62:	220a      	movs	r2, #10
 8005c64:	4648      	mov	r0, r9
 8005c66:	f000 fafd 	bl	8006264 <__multadd>
 8005c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8177 	beq.w	8005f66 <_dtoa_r+0xb66>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	4648      	mov	r0, r9
 8005c80:	f000 faf0 	bl	8006264 <__multadd>
 8005c84:	f1bb 0f00 	cmp.w	fp, #0
 8005c88:	4605      	mov	r5, r0
 8005c8a:	dc6f      	bgt.n	8005d6c <_dtoa_r+0x96c>
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	dc49      	bgt.n	8005d26 <_dtoa_r+0x926>
 8005c92:	e06b      	b.n	8005d6c <_dtoa_r+0x96c>
 8005c94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c9a:	e73c      	b.n	8005b16 <_dtoa_r+0x716>
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	40240000 	.word	0x40240000
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	1e5c      	subs	r4, r3, #1
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	db09      	blt.n	8005cc2 <_dtoa_r+0x8c2>
 8005cae:	1b1c      	subs	r4, r3, r4
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f6bf af30 	bge.w	8005b18 <_dtoa_r+0x718>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	1a9e      	subs	r6, r3, r2
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e72b      	b.n	8005b1a <_dtoa_r+0x71a>
 8005cc2:	9b08      	ldr	r3, [sp, #32]
 8005cc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cc6:	9408      	str	r4, [sp, #32]
 8005cc8:	1ae3      	subs	r3, r4, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	9e00      	ldr	r6, [sp, #0]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	e721      	b.n	8005b1a <_dtoa_r+0x71a>
 8005cd6:	9c08      	ldr	r4, [sp, #32]
 8005cd8:	9e00      	ldr	r6, [sp, #0]
 8005cda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005cdc:	e728      	b.n	8005b30 <_dtoa_r+0x730>
 8005cde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ce2:	e751      	b.n	8005b88 <_dtoa_r+0x788>
 8005ce4:	9a08      	ldr	r2, [sp, #32]
 8005ce6:	9902      	ldr	r1, [sp, #8]
 8005ce8:	e750      	b.n	8005b8c <_dtoa_r+0x78c>
 8005cea:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cee:	e751      	b.n	8005b94 <_dtoa_r+0x794>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e779      	b.n	8005be8 <_dtoa_r+0x7e8>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	e777      	b.n	8005be8 <_dtoa_r+0x7e8>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9308      	str	r3, [sp, #32]
 8005cfc:	e779      	b.n	8005bf2 <_dtoa_r+0x7f2>
 8005cfe:	d093      	beq.n	8005c28 <_dtoa_r+0x828>
 8005d00:	9a00      	ldr	r2, [sp, #0]
 8005d02:	331c      	adds	r3, #28
 8005d04:	441a      	add	r2, r3
 8005d06:	9200      	str	r2, [sp, #0]
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	441e      	add	r6, r3
 8005d0e:	9206      	str	r2, [sp, #24]
 8005d10:	e78a      	b.n	8005c28 <_dtoa_r+0x828>
 8005d12:	4603      	mov	r3, r0
 8005d14:	e7f4      	b.n	8005d00 <_dtoa_r+0x900>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	46b8      	mov	r8, r7
 8005d1c:	dc20      	bgt.n	8005d60 <_dtoa_r+0x960>
 8005d1e:	469b      	mov	fp, r3
 8005d20:	9b07      	ldr	r3, [sp, #28]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	dd1e      	ble.n	8005d64 <_dtoa_r+0x964>
 8005d26:	f1bb 0f00 	cmp.w	fp, #0
 8005d2a:	f47f adb1 	bne.w	8005890 <_dtoa_r+0x490>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	465b      	mov	r3, fp
 8005d32:	2205      	movs	r2, #5
 8005d34:	4648      	mov	r0, r9
 8005d36:	f000 fa95 	bl	8006264 <__multadd>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	9802      	ldr	r0, [sp, #8]
 8005d40:	f000 fca0 	bl	8006684 <__mcmp>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f77f ada3 	ble.w	8005890 <_dtoa_r+0x490>
 8005d4a:	4656      	mov	r6, sl
 8005d4c:	2331      	movs	r3, #49	@ 0x31
 8005d4e:	f806 3b01 	strb.w	r3, [r6], #1
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	e59f      	b.n	8005898 <_dtoa_r+0x498>
 8005d58:	9c03      	ldr	r4, [sp, #12]
 8005d5a:	46b8      	mov	r8, r7
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	e7f4      	b.n	8005d4a <_dtoa_r+0x94a>
 8005d60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8101 	beq.w	8005f6e <_dtoa_r+0xb6e>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	dd05      	ble.n	8005d7c <_dtoa_r+0x97c>
 8005d70:	4629      	mov	r1, r5
 8005d72:	4632      	mov	r2, r6
 8005d74:	4648      	mov	r0, r9
 8005d76:	f000 fc19 	bl	80065ac <__lshift>
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d05c      	beq.n	8005e3c <_dtoa_r+0xa3c>
 8005d82:	6869      	ldr	r1, [r5, #4]
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fa0b 	bl	80061a0 <_Balloc>
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b928      	cbnz	r0, 8005d9a <_dtoa_r+0x99a>
 8005d8e:	4b82      	ldr	r3, [pc, #520]	@ (8005f98 <_dtoa_r+0xb98>)
 8005d90:	4602      	mov	r2, r0
 8005d92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d96:	f7ff bb4a 	b.w	800542e <_dtoa_r+0x2e>
 8005d9a:	692a      	ldr	r2, [r5, #16]
 8005d9c:	3202      	adds	r2, #2
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	f105 010c 	add.w	r1, r5, #12
 8005da4:	300c      	adds	r0, #12
 8005da6:	f001 f969 	bl	800707c <memcpy>
 8005daa:	2201      	movs	r2, #1
 8005dac:	4631      	mov	r1, r6
 8005dae:	4648      	mov	r0, r9
 8005db0:	f000 fbfc 	bl	80065ac <__lshift>
 8005db4:	f10a 0301 	add.w	r3, sl, #1
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	eb0a 030b 	add.w	r3, sl, fp
 8005dbe:	9308      	str	r3, [sp, #32]
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	462f      	mov	r7, r5
 8005dc8:	9306      	str	r3, [sp, #24]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	9802      	ldr	r0, [sp, #8]
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005dd6:	f7ff fa8a 	bl	80052ee <quorem>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	3330      	adds	r3, #48	@ 0x30
 8005dde:	9003      	str	r0, [sp, #12]
 8005de0:	4639      	mov	r1, r7
 8005de2:	9802      	ldr	r0, [sp, #8]
 8005de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de6:	f000 fc4d 	bl	8006684 <__mcmp>
 8005dea:	462a      	mov	r2, r5
 8005dec:	9004      	str	r0, [sp, #16]
 8005dee:	4621      	mov	r1, r4
 8005df0:	4648      	mov	r0, r9
 8005df2:	f000 fc63 	bl	80066bc <__mdiff>
 8005df6:	68c2      	ldr	r2, [r0, #12]
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	bb02      	cbnz	r2, 8005e40 <_dtoa_r+0xa40>
 8005dfe:	4601      	mov	r1, r0
 8005e00:	9802      	ldr	r0, [sp, #8]
 8005e02:	f000 fc3f 	bl	8006684 <__mcmp>
 8005e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4648      	mov	r0, r9
 8005e0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e12:	f000 fa05 	bl	8006220 <_Bfree>
 8005e16:	9b07      	ldr	r3, [sp, #28]
 8005e18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e1a:	9e00      	ldr	r6, [sp, #0]
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	4319      	orrs	r1, r3
 8005e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e26:	d10d      	bne.n	8005e44 <_dtoa_r+0xa44>
 8005e28:	2b39      	cmp	r3, #57	@ 0x39
 8005e2a:	d027      	beq.n	8005e7c <_dtoa_r+0xa7c>
 8005e2c:	9a04      	ldr	r2, [sp, #16]
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	dd01      	ble.n	8005e36 <_dtoa_r+0xa36>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3331      	adds	r3, #49	@ 0x31
 8005e36:	f88b 3000 	strb.w	r3, [fp]
 8005e3a:	e52e      	b.n	800589a <_dtoa_r+0x49a>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e7b9      	b.n	8005db4 <_dtoa_r+0x9b4>
 8005e40:	2201      	movs	r2, #1
 8005e42:	e7e2      	b.n	8005e0a <_dtoa_r+0xa0a>
 8005e44:	9904      	ldr	r1, [sp, #16]
 8005e46:	2900      	cmp	r1, #0
 8005e48:	db04      	blt.n	8005e54 <_dtoa_r+0xa54>
 8005e4a:	9807      	ldr	r0, [sp, #28]
 8005e4c:	4301      	orrs	r1, r0
 8005e4e:	9806      	ldr	r0, [sp, #24]
 8005e50:	4301      	orrs	r1, r0
 8005e52:	d120      	bne.n	8005e96 <_dtoa_r+0xa96>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	ddee      	ble.n	8005e36 <_dtoa_r+0xa36>
 8005e58:	9902      	ldr	r1, [sp, #8]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4648      	mov	r0, r9
 8005e60:	f000 fba4 	bl	80065ac <__lshift>
 8005e64:	4621      	mov	r1, r4
 8005e66:	9002      	str	r0, [sp, #8]
 8005e68:	f000 fc0c 	bl	8006684 <__mcmp>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	9b00      	ldr	r3, [sp, #0]
 8005e70:	dc02      	bgt.n	8005e78 <_dtoa_r+0xa78>
 8005e72:	d1e0      	bne.n	8005e36 <_dtoa_r+0xa36>
 8005e74:	07da      	lsls	r2, r3, #31
 8005e76:	d5de      	bpl.n	8005e36 <_dtoa_r+0xa36>
 8005e78:	2b39      	cmp	r3, #57	@ 0x39
 8005e7a:	d1da      	bne.n	8005e32 <_dtoa_r+0xa32>
 8005e7c:	2339      	movs	r3, #57	@ 0x39
 8005e7e:	f88b 3000 	strb.w	r3, [fp]
 8005e82:	4633      	mov	r3, r6
 8005e84:	461e      	mov	r6, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e8c:	2a39      	cmp	r2, #57	@ 0x39
 8005e8e:	d04e      	beq.n	8005f2e <_dtoa_r+0xb2e>
 8005e90:	3201      	adds	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e501      	b.n	800589a <_dtoa_r+0x49a>
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	dd03      	ble.n	8005ea2 <_dtoa_r+0xaa2>
 8005e9a:	2b39      	cmp	r3, #57	@ 0x39
 8005e9c:	d0ee      	beq.n	8005e7c <_dtoa_r+0xa7c>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7c9      	b.n	8005e36 <_dtoa_r+0xa36>
 8005ea2:	9a00      	ldr	r2, [sp, #0]
 8005ea4:	9908      	ldr	r1, [sp, #32]
 8005ea6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	d028      	beq.n	8005f00 <_dtoa_r+0xb00>
 8005eae:	9902      	ldr	r1, [sp, #8]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f000 f9d5 	bl	8006264 <__multadd>
 8005eba:	42af      	cmp	r7, r5
 8005ebc:	9002      	str	r0, [sp, #8]
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f04f 020a 	mov.w	r2, #10
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	4648      	mov	r0, r9
 8005eca:	d107      	bne.n	8005edc <_dtoa_r+0xadc>
 8005ecc:	f000 f9ca 	bl	8006264 <__multadd>
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	e777      	b.n	8005dcc <_dtoa_r+0x9cc>
 8005edc:	f000 f9c2 	bl	8006264 <__multadd>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4607      	mov	r7, r0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	220a      	movs	r2, #10
 8005ee8:	4648      	mov	r0, r9
 8005eea:	f000 f9bb 	bl	8006264 <__multadd>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	e7f0      	b.n	8005ed4 <_dtoa_r+0xad4>
 8005ef2:	f1bb 0f00 	cmp.w	fp, #0
 8005ef6:	bfcc      	ite	gt
 8005ef8:	465e      	movgt	r6, fp
 8005efa:	2601      	movle	r6, #1
 8005efc:	4456      	add	r6, sl
 8005efe:	2700      	movs	r7, #0
 8005f00:	9902      	ldr	r1, [sp, #8]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 fb50 	bl	80065ac <__lshift>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	9002      	str	r0, [sp, #8]
 8005f10:	f000 fbb8 	bl	8006684 <__mcmp>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	dcb4      	bgt.n	8005e82 <_dtoa_r+0xa82>
 8005f18:	d102      	bne.n	8005f20 <_dtoa_r+0xb20>
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	07db      	lsls	r3, r3, #31
 8005f1e:	d4b0      	bmi.n	8005e82 <_dtoa_r+0xa82>
 8005f20:	4633      	mov	r3, r6
 8005f22:	461e      	mov	r6, r3
 8005f24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f28:	2a30      	cmp	r2, #48	@ 0x30
 8005f2a:	d0fa      	beq.n	8005f22 <_dtoa_r+0xb22>
 8005f2c:	e4b5      	b.n	800589a <_dtoa_r+0x49a>
 8005f2e:	459a      	cmp	sl, r3
 8005f30:	d1a8      	bne.n	8005e84 <_dtoa_r+0xa84>
 8005f32:	2331      	movs	r3, #49	@ 0x31
 8005f34:	f108 0801 	add.w	r8, r8, #1
 8005f38:	f88a 3000 	strb.w	r3, [sl]
 8005f3c:	e4ad      	b.n	800589a <_dtoa_r+0x49a>
 8005f3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f9c <_dtoa_r+0xb9c>
 8005f44:	b11b      	cbz	r3, 8005f4e <_dtoa_r+0xb4e>
 8005f46:	f10a 0308 	add.w	r3, sl, #8
 8005f4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4650      	mov	r0, sl
 8005f50:	b017      	add	sp, #92	@ 0x5c
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f77f ae2e 	ble.w	8005bba <_dtoa_r+0x7ba>
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	2001      	movs	r0, #1
 8005f64:	e64d      	b.n	8005c02 <_dtoa_r+0x802>
 8005f66:	f1bb 0f00 	cmp.w	fp, #0
 8005f6a:	f77f aed9 	ble.w	8005d20 <_dtoa_r+0x920>
 8005f6e:	4656      	mov	r6, sl
 8005f70:	9802      	ldr	r0, [sp, #8]
 8005f72:	4621      	mov	r1, r4
 8005f74:	f7ff f9bb 	bl	80052ee <quorem>
 8005f78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f80:	eba6 020a 	sub.w	r2, r6, sl
 8005f84:	4593      	cmp	fp, r2
 8005f86:	ddb4      	ble.n	8005ef2 <_dtoa_r+0xaf2>
 8005f88:	9902      	ldr	r1, [sp, #8]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 f968 	bl	8006264 <__multadd>
 8005f94:	9002      	str	r0, [sp, #8]
 8005f96:	e7eb      	b.n	8005f70 <_dtoa_r+0xb70>
 8005f98:	080073e4 	.word	0x080073e4
 8005f9c:	08007368 	.word	0x08007368

08005fa0 <_free_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d041      	beq.n	800602c <_free_r+0x8c>
 8005fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fac:	1f0c      	subs	r4, r1, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfb8      	it	lt
 8005fb2:	18e4      	addlt	r4, r4, r3
 8005fb4:	f000 f8e8 	bl	8006188 <__malloc_lock>
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <_free_r+0x90>)
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	b933      	cbnz	r3, 8005fcc <_free_r+0x2c>
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc8:	f000 b8e4 	b.w	8006194 <__malloc_unlock>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d908      	bls.n	8005fe2 <_free_r+0x42>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	1821      	adds	r1, r4, r0
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf01      	itttt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	1809      	addeq	r1, r1, r0
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	e7ed      	b.n	8005fbe <_free_r+0x1e>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b10b      	cbz	r3, 8005fec <_free_r+0x4c>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x42>
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	1850      	adds	r0, r2, r1
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x6c>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	4401      	add	r1, r0
 8005ff8:	1850      	adds	r0, r2, r1
 8005ffa:	4283      	cmp	r3, r0
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	d1e0      	bne.n	8005fc2 <_free_r+0x22>
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	4408      	add	r0, r1
 8006008:	6010      	str	r0, [r2, #0]
 800600a:	e7da      	b.n	8005fc2 <_free_r+0x22>
 800600c:	d902      	bls.n	8006014 <_free_r+0x74>
 800600e:	230c      	movs	r3, #12
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	e7d6      	b.n	8005fc2 <_free_r+0x22>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	1821      	adds	r1, r4, r0
 8006018:	428b      	cmp	r3, r1
 800601a:	bf04      	itt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1809      	addeq	r1, r1, r0
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6054      	str	r4, [r2, #4]
 800602a:	e7ca      	b.n	8005fc2 <_free_r+0x22>
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	20000438 	.word	0x20000438

08006034 <malloc>:
 8006034:	4b02      	ldr	r3, [pc, #8]	@ (8006040 <malloc+0xc>)
 8006036:	4601      	mov	r1, r0
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f000 b825 	b.w	8006088 <_malloc_r>
 800603e:	bf00      	nop
 8006040:	20000018 	.word	0x20000018

08006044 <sbrk_aligned>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	4e0f      	ldr	r6, [pc, #60]	@ (8006084 <sbrk_aligned+0x40>)
 8006048:	460c      	mov	r4, r1
 800604a:	6831      	ldr	r1, [r6, #0]
 800604c:	4605      	mov	r5, r0
 800604e:	b911      	cbnz	r1, 8006056 <sbrk_aligned+0x12>
 8006050:	f001 f804 	bl	800705c <_sbrk_r>
 8006054:	6030      	str	r0, [r6, #0]
 8006056:	4621      	mov	r1, r4
 8006058:	4628      	mov	r0, r5
 800605a:	f000 ffff 	bl	800705c <_sbrk_r>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	d103      	bne.n	800606a <sbrk_aligned+0x26>
 8006062:	f04f 34ff 	mov.w	r4, #4294967295
 8006066:	4620      	mov	r0, r4
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d0f8      	beq.n	8006066 <sbrk_aligned+0x22>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fff0 	bl	800705c <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d1f2      	bne.n	8006066 <sbrk_aligned+0x22>
 8006080:	e7ef      	b.n	8006062 <sbrk_aligned+0x1e>
 8006082:	bf00      	nop
 8006084:	20000434 	.word	0x20000434

08006088 <_malloc_r>:
 8006088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800608c:	1ccd      	adds	r5, r1, #3
 800608e:	f025 0503 	bic.w	r5, r5, #3
 8006092:	3508      	adds	r5, #8
 8006094:	2d0c      	cmp	r5, #12
 8006096:	bf38      	it	cc
 8006098:	250c      	movcc	r5, #12
 800609a:	2d00      	cmp	r5, #0
 800609c:	4606      	mov	r6, r0
 800609e:	db01      	blt.n	80060a4 <_malloc_r+0x1c>
 80060a0:	42a9      	cmp	r1, r5
 80060a2:	d904      	bls.n	80060ae <_malloc_r+0x26>
 80060a4:	230c      	movs	r3, #12
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	2000      	movs	r0, #0
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006184 <_malloc_r+0xfc>
 80060b2:	f000 f869 	bl	8006188 <__malloc_lock>
 80060b6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ba:	461c      	mov	r4, r3
 80060bc:	bb44      	cbnz	r4, 8006110 <_malloc_r+0x88>
 80060be:	4629      	mov	r1, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	f7ff ffbf 	bl	8006044 <sbrk_aligned>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	4604      	mov	r4, r0
 80060ca:	d158      	bne.n	800617e <_malloc_r+0xf6>
 80060cc:	f8d8 4000 	ldr.w	r4, [r8]
 80060d0:	4627      	mov	r7, r4
 80060d2:	2f00      	cmp	r7, #0
 80060d4:	d143      	bne.n	800615e <_malloc_r+0xd6>
 80060d6:	2c00      	cmp	r4, #0
 80060d8:	d04b      	beq.n	8006172 <_malloc_r+0xea>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	4639      	mov	r1, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	eb04 0903 	add.w	r9, r4, r3
 80060e4:	f000 ffba 	bl	800705c <_sbrk_r>
 80060e8:	4581      	cmp	r9, r0
 80060ea:	d142      	bne.n	8006172 <_malloc_r+0xea>
 80060ec:	6821      	ldr	r1, [r4, #0]
 80060ee:	1a6d      	subs	r5, r5, r1
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ffa6 	bl	8006044 <sbrk_aligned>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d03a      	beq.n	8006172 <_malloc_r+0xea>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	442b      	add	r3, r5
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	f8d8 3000 	ldr.w	r3, [r8]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	bb62      	cbnz	r2, 8006164 <_malloc_r+0xdc>
 800610a:	f8c8 7000 	str.w	r7, [r8]
 800610e:	e00f      	b.n	8006130 <_malloc_r+0xa8>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	1b52      	subs	r2, r2, r5
 8006114:	d420      	bmi.n	8006158 <_malloc_r+0xd0>
 8006116:	2a0b      	cmp	r2, #11
 8006118:	d917      	bls.n	800614a <_malloc_r+0xc2>
 800611a:	1961      	adds	r1, r4, r5
 800611c:	42a3      	cmp	r3, r4
 800611e:	6025      	str	r5, [r4, #0]
 8006120:	bf18      	it	ne
 8006122:	6059      	strne	r1, [r3, #4]
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	bf08      	it	eq
 8006128:	f8c8 1000 	streq.w	r1, [r8]
 800612c:	5162      	str	r2, [r4, r5]
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	4630      	mov	r0, r6
 8006132:	f000 f82f 	bl	8006194 <__malloc_unlock>
 8006136:	f104 000b 	add.w	r0, r4, #11
 800613a:	1d23      	adds	r3, r4, #4
 800613c:	f020 0007 	bic.w	r0, r0, #7
 8006140:	1ac2      	subs	r2, r0, r3
 8006142:	bf1c      	itt	ne
 8006144:	1a1b      	subne	r3, r3, r0
 8006146:	50a3      	strne	r3, [r4, r2]
 8006148:	e7af      	b.n	80060aa <_malloc_r+0x22>
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	42a3      	cmp	r3, r4
 800614e:	bf0c      	ite	eq
 8006150:	f8c8 2000 	streq.w	r2, [r8]
 8006154:	605a      	strne	r2, [r3, #4]
 8006156:	e7eb      	b.n	8006130 <_malloc_r+0xa8>
 8006158:	4623      	mov	r3, r4
 800615a:	6864      	ldr	r4, [r4, #4]
 800615c:	e7ae      	b.n	80060bc <_malloc_r+0x34>
 800615e:	463c      	mov	r4, r7
 8006160:	687f      	ldr	r7, [r7, #4]
 8006162:	e7b6      	b.n	80060d2 <_malloc_r+0x4a>
 8006164:	461a      	mov	r2, r3
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	42a3      	cmp	r3, r4
 800616a:	d1fb      	bne.n	8006164 <_malloc_r+0xdc>
 800616c:	2300      	movs	r3, #0
 800616e:	6053      	str	r3, [r2, #4]
 8006170:	e7de      	b.n	8006130 <_malloc_r+0xa8>
 8006172:	230c      	movs	r3, #12
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	4630      	mov	r0, r6
 8006178:	f000 f80c 	bl	8006194 <__malloc_unlock>
 800617c:	e794      	b.n	80060a8 <_malloc_r+0x20>
 800617e:	6005      	str	r5, [r0, #0]
 8006180:	e7d6      	b.n	8006130 <_malloc_r+0xa8>
 8006182:	bf00      	nop
 8006184:	20000438 	.word	0x20000438

08006188 <__malloc_lock>:
 8006188:	4801      	ldr	r0, [pc, #4]	@ (8006190 <__malloc_lock+0x8>)
 800618a:	f7ff b8ae 	b.w	80052ea <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	20000430 	.word	0x20000430

08006194 <__malloc_unlock>:
 8006194:	4801      	ldr	r0, [pc, #4]	@ (800619c <__malloc_unlock+0x8>)
 8006196:	f7ff b8a9 	b.w	80052ec <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	20000430 	.word	0x20000430

080061a0 <_Balloc>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	69c6      	ldr	r6, [r0, #28]
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	b976      	cbnz	r6, 80061c8 <_Balloc+0x28>
 80061aa:	2010      	movs	r0, #16
 80061ac:	f7ff ff42 	bl	8006034 <malloc>
 80061b0:	4602      	mov	r2, r0
 80061b2:	61e0      	str	r0, [r4, #28]
 80061b4:	b920      	cbnz	r0, 80061c0 <_Balloc+0x20>
 80061b6:	4b18      	ldr	r3, [pc, #96]	@ (8006218 <_Balloc+0x78>)
 80061b8:	4818      	ldr	r0, [pc, #96]	@ (800621c <_Balloc+0x7c>)
 80061ba:	216b      	movs	r1, #107	@ 0x6b
 80061bc:	f000 ff6c 	bl	8007098 <__assert_func>
 80061c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c4:	6006      	str	r6, [r0, #0]
 80061c6:	60c6      	str	r6, [r0, #12]
 80061c8:	69e6      	ldr	r6, [r4, #28]
 80061ca:	68f3      	ldr	r3, [r6, #12]
 80061cc:	b183      	cbz	r3, 80061f0 <_Balloc+0x50>
 80061ce:	69e3      	ldr	r3, [r4, #28]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061d6:	b9b8      	cbnz	r0, 8006208 <_Balloc+0x68>
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f605 	lsl.w	r6, r1, r5
 80061de:	1d72      	adds	r2, r6, #5
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 ff76 	bl	80070d4 <_calloc_r>
 80061e8:	b160      	cbz	r0, 8006204 <_Balloc+0x64>
 80061ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061ee:	e00e      	b.n	800620e <_Balloc+0x6e>
 80061f0:	2221      	movs	r2, #33	@ 0x21
 80061f2:	2104      	movs	r1, #4
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 ff6d 	bl	80070d4 <_calloc_r>
 80061fa:	69e3      	ldr	r3, [r4, #28]
 80061fc:	60f0      	str	r0, [r6, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e4      	bne.n	80061ce <_Balloc+0x2e>
 8006204:	2000      	movs	r0, #0
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	6802      	ldr	r2, [r0, #0]
 800620a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800620e:	2300      	movs	r3, #0
 8006210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006214:	e7f7      	b.n	8006206 <_Balloc+0x66>
 8006216:	bf00      	nop
 8006218:	08007375 	.word	0x08007375
 800621c:	080073f5 	.word	0x080073f5

08006220 <_Bfree>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	69c6      	ldr	r6, [r0, #28]
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b976      	cbnz	r6, 8006248 <_Bfree+0x28>
 800622a:	2010      	movs	r0, #16
 800622c:	f7ff ff02 	bl	8006034 <malloc>
 8006230:	4602      	mov	r2, r0
 8006232:	61e8      	str	r0, [r5, #28]
 8006234:	b920      	cbnz	r0, 8006240 <_Bfree+0x20>
 8006236:	4b09      	ldr	r3, [pc, #36]	@ (800625c <_Bfree+0x3c>)
 8006238:	4809      	ldr	r0, [pc, #36]	@ (8006260 <_Bfree+0x40>)
 800623a:	218f      	movs	r1, #143	@ 0x8f
 800623c:	f000 ff2c 	bl	8007098 <__assert_func>
 8006240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006244:	6006      	str	r6, [r0, #0]
 8006246:	60c6      	str	r6, [r0, #12]
 8006248:	b13c      	cbz	r4, 800625a <_Bfree+0x3a>
 800624a:	69eb      	ldr	r3, [r5, #28]
 800624c:	6862      	ldr	r2, [r4, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006254:	6021      	str	r1, [r4, #0]
 8006256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	08007375 	.word	0x08007375
 8006260:	080073f5 	.word	0x080073f5

08006264 <__multadd>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	690d      	ldr	r5, [r1, #16]
 800626a:	4607      	mov	r7, r0
 800626c:	460c      	mov	r4, r1
 800626e:	461e      	mov	r6, r3
 8006270:	f101 0c14 	add.w	ip, r1, #20
 8006274:	2000      	movs	r0, #0
 8006276:	f8dc 3000 	ldr.w	r3, [ip]
 800627a:	b299      	uxth	r1, r3
 800627c:	fb02 6101 	mla	r1, r2, r1, r6
 8006280:	0c1e      	lsrs	r6, r3, #16
 8006282:	0c0b      	lsrs	r3, r1, #16
 8006284:	fb02 3306 	mla	r3, r2, r6, r3
 8006288:	b289      	uxth	r1, r1
 800628a:	3001      	adds	r0, #1
 800628c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006290:	4285      	cmp	r5, r0
 8006292:	f84c 1b04 	str.w	r1, [ip], #4
 8006296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800629a:	dcec      	bgt.n	8006276 <__multadd+0x12>
 800629c:	b30e      	cbz	r6, 80062e2 <__multadd+0x7e>
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dc19      	bgt.n	80062d8 <__multadd+0x74>
 80062a4:	6861      	ldr	r1, [r4, #4]
 80062a6:	4638      	mov	r0, r7
 80062a8:	3101      	adds	r1, #1
 80062aa:	f7ff ff79 	bl	80061a0 <_Balloc>
 80062ae:	4680      	mov	r8, r0
 80062b0:	b928      	cbnz	r0, 80062be <__multadd+0x5a>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <__multadd+0x84>)
 80062b6:	480d      	ldr	r0, [pc, #52]	@ (80062ec <__multadd+0x88>)
 80062b8:	21ba      	movs	r1, #186	@ 0xba
 80062ba:	f000 feed 	bl	8007098 <__assert_func>
 80062be:	6922      	ldr	r2, [r4, #16]
 80062c0:	3202      	adds	r2, #2
 80062c2:	f104 010c 	add.w	r1, r4, #12
 80062c6:	0092      	lsls	r2, r2, #2
 80062c8:	300c      	adds	r0, #12
 80062ca:	f000 fed7 	bl	800707c <memcpy>
 80062ce:	4621      	mov	r1, r4
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ffa5 	bl	8006220 <_Bfree>
 80062d6:	4644      	mov	r4, r8
 80062d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062dc:	3501      	adds	r5, #1
 80062de:	615e      	str	r6, [r3, #20]
 80062e0:	6125      	str	r5, [r4, #16]
 80062e2:	4620      	mov	r0, r4
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	080073e4 	.word	0x080073e4
 80062ec:	080073f5 	.word	0x080073f5

080062f0 <__hi0bits>:
 80062f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062f4:	4603      	mov	r3, r0
 80062f6:	bf36      	itet	cc
 80062f8:	0403      	lslcc	r3, r0, #16
 80062fa:	2000      	movcs	r0, #0
 80062fc:	2010      	movcc	r0, #16
 80062fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006302:	bf3c      	itt	cc
 8006304:	021b      	lslcc	r3, r3, #8
 8006306:	3008      	addcc	r0, #8
 8006308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800630c:	bf3c      	itt	cc
 800630e:	011b      	lslcc	r3, r3, #4
 8006310:	3004      	addcc	r0, #4
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	bf3c      	itt	cc
 8006318:	009b      	lslcc	r3, r3, #2
 800631a:	3002      	addcc	r0, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	db05      	blt.n	800632c <__hi0bits+0x3c>
 8006320:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006324:	f100 0001 	add.w	r0, r0, #1
 8006328:	bf08      	it	eq
 800632a:	2020      	moveq	r0, #32
 800632c:	4770      	bx	lr

0800632e <__lo0bits>:
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	4602      	mov	r2, r0
 8006332:	f013 0007 	ands.w	r0, r3, #7
 8006336:	d00b      	beq.n	8006350 <__lo0bits+0x22>
 8006338:	07d9      	lsls	r1, r3, #31
 800633a:	d421      	bmi.n	8006380 <__lo0bits+0x52>
 800633c:	0798      	lsls	r0, r3, #30
 800633e:	bf49      	itett	mi
 8006340:	085b      	lsrmi	r3, r3, #1
 8006342:	089b      	lsrpl	r3, r3, #2
 8006344:	2001      	movmi	r0, #1
 8006346:	6013      	strmi	r3, [r2, #0]
 8006348:	bf5c      	itt	pl
 800634a:	6013      	strpl	r3, [r2, #0]
 800634c:	2002      	movpl	r0, #2
 800634e:	4770      	bx	lr
 8006350:	b299      	uxth	r1, r3
 8006352:	b909      	cbnz	r1, 8006358 <__lo0bits+0x2a>
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	2010      	movs	r0, #16
 8006358:	b2d9      	uxtb	r1, r3
 800635a:	b909      	cbnz	r1, 8006360 <__lo0bits+0x32>
 800635c:	3008      	adds	r0, #8
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	0719      	lsls	r1, r3, #28
 8006362:	bf04      	itt	eq
 8006364:	091b      	lsreq	r3, r3, #4
 8006366:	3004      	addeq	r0, #4
 8006368:	0799      	lsls	r1, r3, #30
 800636a:	bf04      	itt	eq
 800636c:	089b      	lsreq	r3, r3, #2
 800636e:	3002      	addeq	r0, #2
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	d403      	bmi.n	800637c <__lo0bits+0x4e>
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	f100 0001 	add.w	r0, r0, #1
 800637a:	d003      	beq.n	8006384 <__lo0bits+0x56>
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4770      	bx	lr
 8006380:	2000      	movs	r0, #0
 8006382:	4770      	bx	lr
 8006384:	2020      	movs	r0, #32
 8006386:	4770      	bx	lr

08006388 <__i2b>:
 8006388:	b510      	push	{r4, lr}
 800638a:	460c      	mov	r4, r1
 800638c:	2101      	movs	r1, #1
 800638e:	f7ff ff07 	bl	80061a0 <_Balloc>
 8006392:	4602      	mov	r2, r0
 8006394:	b928      	cbnz	r0, 80063a2 <__i2b+0x1a>
 8006396:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <__i2b+0x24>)
 8006398:	4805      	ldr	r0, [pc, #20]	@ (80063b0 <__i2b+0x28>)
 800639a:	f240 1145 	movw	r1, #325	@ 0x145
 800639e:	f000 fe7b 	bl	8007098 <__assert_func>
 80063a2:	2301      	movs	r3, #1
 80063a4:	6144      	str	r4, [r0, #20]
 80063a6:	6103      	str	r3, [r0, #16]
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	bf00      	nop
 80063ac:	080073e4 	.word	0x080073e4
 80063b0:	080073f5 	.word	0x080073f5

080063b4 <__multiply>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	4617      	mov	r7, r2
 80063ba:	690a      	ldr	r2, [r1, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	429a      	cmp	r2, r3
 80063c0:	bfa8      	it	ge
 80063c2:	463b      	movge	r3, r7
 80063c4:	4689      	mov	r9, r1
 80063c6:	bfa4      	itt	ge
 80063c8:	460f      	movge	r7, r1
 80063ca:	4699      	movge	r9, r3
 80063cc:	693d      	ldr	r5, [r7, #16]
 80063ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	eb05 060a 	add.w	r6, r5, sl
 80063da:	42b3      	cmp	r3, r6
 80063dc:	b085      	sub	sp, #20
 80063de:	bfb8      	it	lt
 80063e0:	3101      	addlt	r1, #1
 80063e2:	f7ff fedd 	bl	80061a0 <_Balloc>
 80063e6:	b930      	cbnz	r0, 80063f6 <__multiply+0x42>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b41      	ldr	r3, [pc, #260]	@ (80064f0 <__multiply+0x13c>)
 80063ec:	4841      	ldr	r0, [pc, #260]	@ (80064f4 <__multiply+0x140>)
 80063ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063f2:	f000 fe51 	bl	8007098 <__assert_func>
 80063f6:	f100 0414 	add.w	r4, r0, #20
 80063fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80063fe:	4623      	mov	r3, r4
 8006400:	2200      	movs	r2, #0
 8006402:	4573      	cmp	r3, lr
 8006404:	d320      	bcc.n	8006448 <__multiply+0x94>
 8006406:	f107 0814 	add.w	r8, r7, #20
 800640a:	f109 0114 	add.w	r1, r9, #20
 800640e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006412:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	1beb      	subs	r3, r5, r7
 800641a:	3b15      	subs	r3, #21
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	3304      	adds	r3, #4
 8006422:	3715      	adds	r7, #21
 8006424:	42bd      	cmp	r5, r7
 8006426:	bf38      	it	cc
 8006428:	2304      	movcc	r3, #4
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	9103      	str	r1, [sp, #12]
 8006430:	428b      	cmp	r3, r1
 8006432:	d80c      	bhi.n	800644e <__multiply+0x9a>
 8006434:	2e00      	cmp	r6, #0
 8006436:	dd03      	ble.n	8006440 <__multiply+0x8c>
 8006438:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800643c:	2b00      	cmp	r3, #0
 800643e:	d055      	beq.n	80064ec <__multiply+0x138>
 8006440:	6106      	str	r6, [r0, #16]
 8006442:	b005      	add	sp, #20
 8006444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006448:	f843 2b04 	str.w	r2, [r3], #4
 800644c:	e7d9      	b.n	8006402 <__multiply+0x4e>
 800644e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006452:	f1ba 0f00 	cmp.w	sl, #0
 8006456:	d01f      	beq.n	8006498 <__multiply+0xe4>
 8006458:	46c4      	mov	ip, r8
 800645a:	46a1      	mov	r9, r4
 800645c:	2700      	movs	r7, #0
 800645e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006462:	f8d9 3000 	ldr.w	r3, [r9]
 8006466:	fa1f fb82 	uxth.w	fp, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006470:	443b      	add	r3, r7
 8006472:	f8d9 7000 	ldr.w	r7, [r9]
 8006476:	0c12      	lsrs	r2, r2, #16
 8006478:	0c3f      	lsrs	r7, r7, #16
 800647a:	fb0a 7202 	mla	r2, sl, r2, r7
 800647e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006488:	4565      	cmp	r5, ip
 800648a:	f849 3b04 	str.w	r3, [r9], #4
 800648e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006492:	d8e4      	bhi.n	800645e <__multiply+0xaa>
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	50e7      	str	r7, [r4, r3]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800649e:	3104      	adds	r1, #4
 80064a0:	f1b9 0f00 	cmp.w	r9, #0
 80064a4:	d020      	beq.n	80064e8 <__multiply+0x134>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	4647      	mov	r7, r8
 80064aa:	46a4      	mov	ip, r4
 80064ac:	f04f 0a00 	mov.w	sl, #0
 80064b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80064b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80064b8:	fb09 220b 	mla	r2, r9, fp, r2
 80064bc:	4452      	add	r2, sl
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	f84c 3b04 	str.w	r3, [ip], #4
 80064c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80064cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80064d4:	fb09 330a 	mla	r3, r9, sl, r3
 80064d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80064dc:	42bd      	cmp	r5, r7
 80064de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064e2:	d8e5      	bhi.n	80064b0 <__multiply+0xfc>
 80064e4:	9a01      	ldr	r2, [sp, #4]
 80064e6:	50a3      	str	r3, [r4, r2]
 80064e8:	3404      	adds	r4, #4
 80064ea:	e79f      	b.n	800642c <__multiply+0x78>
 80064ec:	3e01      	subs	r6, #1
 80064ee:	e7a1      	b.n	8006434 <__multiply+0x80>
 80064f0:	080073e4 	.word	0x080073e4
 80064f4:	080073f5 	.word	0x080073f5

080064f8 <__pow5mult>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4615      	mov	r5, r2
 80064fe:	f012 0203 	ands.w	r2, r2, #3
 8006502:	4607      	mov	r7, r0
 8006504:	460e      	mov	r6, r1
 8006506:	d007      	beq.n	8006518 <__pow5mult+0x20>
 8006508:	4c25      	ldr	r4, [pc, #148]	@ (80065a0 <__pow5mult+0xa8>)
 800650a:	3a01      	subs	r2, #1
 800650c:	2300      	movs	r3, #0
 800650e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006512:	f7ff fea7 	bl	8006264 <__multadd>
 8006516:	4606      	mov	r6, r0
 8006518:	10ad      	asrs	r5, r5, #2
 800651a:	d03d      	beq.n	8006598 <__pow5mult+0xa0>
 800651c:	69fc      	ldr	r4, [r7, #28]
 800651e:	b97c      	cbnz	r4, 8006540 <__pow5mult+0x48>
 8006520:	2010      	movs	r0, #16
 8006522:	f7ff fd87 	bl	8006034 <malloc>
 8006526:	4602      	mov	r2, r0
 8006528:	61f8      	str	r0, [r7, #28]
 800652a:	b928      	cbnz	r0, 8006538 <__pow5mult+0x40>
 800652c:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <__pow5mult+0xac>)
 800652e:	481e      	ldr	r0, [pc, #120]	@ (80065a8 <__pow5mult+0xb0>)
 8006530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006534:	f000 fdb0 	bl	8007098 <__assert_func>
 8006538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	60c4      	str	r4, [r0, #12]
 8006540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006548:	b94c      	cbnz	r4, 800655e <__pow5mult+0x66>
 800654a:	f240 2171 	movw	r1, #625	@ 0x271
 800654e:	4638      	mov	r0, r7
 8006550:	f7ff ff1a 	bl	8006388 <__i2b>
 8006554:	2300      	movs	r3, #0
 8006556:	f8c8 0008 	str.w	r0, [r8, #8]
 800655a:	4604      	mov	r4, r0
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	f04f 0900 	mov.w	r9, #0
 8006562:	07eb      	lsls	r3, r5, #31
 8006564:	d50a      	bpl.n	800657c <__pow5mult+0x84>
 8006566:	4631      	mov	r1, r6
 8006568:	4622      	mov	r2, r4
 800656a:	4638      	mov	r0, r7
 800656c:	f7ff ff22 	bl	80063b4 <__multiply>
 8006570:	4631      	mov	r1, r6
 8006572:	4680      	mov	r8, r0
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff fe53 	bl	8006220 <_Bfree>
 800657a:	4646      	mov	r6, r8
 800657c:	106d      	asrs	r5, r5, #1
 800657e:	d00b      	beq.n	8006598 <__pow5mult+0xa0>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	b938      	cbnz	r0, 8006594 <__pow5mult+0x9c>
 8006584:	4622      	mov	r2, r4
 8006586:	4621      	mov	r1, r4
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ff13 	bl	80063b4 <__multiply>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	f8c0 9000 	str.w	r9, [r0]
 8006594:	4604      	mov	r4, r0
 8006596:	e7e4      	b.n	8006562 <__pow5mult+0x6a>
 8006598:	4630      	mov	r0, r6
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	bf00      	nop
 80065a0:	080074a8 	.word	0x080074a8
 80065a4:	08007375 	.word	0x08007375
 80065a8:	080073f5 	.word	0x080073f5

080065ac <__lshift>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	460c      	mov	r4, r1
 80065b2:	6849      	ldr	r1, [r1, #4]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	4607      	mov	r7, r0
 80065be:	4691      	mov	r9, r2
 80065c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065c4:	f108 0601 	add.w	r6, r8, #1
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	db0b      	blt.n	80065e4 <__lshift+0x38>
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff fde7 	bl	80061a0 <_Balloc>
 80065d2:	4605      	mov	r5, r0
 80065d4:	b948      	cbnz	r0, 80065ea <__lshift+0x3e>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b28      	ldr	r3, [pc, #160]	@ (800667c <__lshift+0xd0>)
 80065da:	4829      	ldr	r0, [pc, #164]	@ (8006680 <__lshift+0xd4>)
 80065dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065e0:	f000 fd5a 	bl	8007098 <__assert_func>
 80065e4:	3101      	adds	r1, #1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	e7ee      	b.n	80065c8 <__lshift+0x1c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f100 0114 	add.w	r1, r0, #20
 80065f0:	f100 0210 	add.w	r2, r0, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	4553      	cmp	r3, sl
 80065f8:	db33      	blt.n	8006662 <__lshift+0xb6>
 80065fa:	6920      	ldr	r0, [r4, #16]
 80065fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006600:	f104 0314 	add.w	r3, r4, #20
 8006604:	f019 091f 	ands.w	r9, r9, #31
 8006608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800660c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006610:	d02b      	beq.n	800666a <__lshift+0xbe>
 8006612:	f1c9 0e20 	rsb	lr, r9, #32
 8006616:	468a      	mov	sl, r1
 8006618:	2200      	movs	r2, #0
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	fa00 f009 	lsl.w	r0, r0, r9
 8006620:	4310      	orrs	r0, r2
 8006622:	f84a 0b04 	str.w	r0, [sl], #4
 8006626:	f853 2b04 	ldr.w	r2, [r3], #4
 800662a:	459c      	cmp	ip, r3
 800662c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006630:	d8f3      	bhi.n	800661a <__lshift+0x6e>
 8006632:	ebac 0304 	sub.w	r3, ip, r4
 8006636:	3b15      	subs	r3, #21
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	f104 0015 	add.w	r0, r4, #21
 8006642:	4560      	cmp	r0, ip
 8006644:	bf88      	it	hi
 8006646:	2304      	movhi	r3, #4
 8006648:	50ca      	str	r2, [r1, r3]
 800664a:	b10a      	cbz	r2, 8006650 <__lshift+0xa4>
 800664c:	f108 0602 	add.w	r6, r8, #2
 8006650:	3e01      	subs	r6, #1
 8006652:	4638      	mov	r0, r7
 8006654:	612e      	str	r6, [r5, #16]
 8006656:	4621      	mov	r1, r4
 8006658:	f7ff fde2 	bl	8006220 <_Bfree>
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	f842 0f04 	str.w	r0, [r2, #4]!
 8006666:	3301      	adds	r3, #1
 8006668:	e7c5      	b.n	80065f6 <__lshift+0x4a>
 800666a:	3904      	subs	r1, #4
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	f841 2f04 	str.w	r2, [r1, #4]!
 8006674:	459c      	cmp	ip, r3
 8006676:	d8f9      	bhi.n	800666c <__lshift+0xc0>
 8006678:	e7ea      	b.n	8006650 <__lshift+0xa4>
 800667a:	bf00      	nop
 800667c:	080073e4 	.word	0x080073e4
 8006680:	080073f5 	.word	0x080073f5

08006684 <__mcmp>:
 8006684:	690a      	ldr	r2, [r1, #16]
 8006686:	4603      	mov	r3, r0
 8006688:	6900      	ldr	r0, [r0, #16]
 800668a:	1a80      	subs	r0, r0, r2
 800668c:	b530      	push	{r4, r5, lr}
 800668e:	d10e      	bne.n	80066ae <__mcmp+0x2a>
 8006690:	3314      	adds	r3, #20
 8006692:	3114      	adds	r1, #20
 8006694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800669c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066a4:	4295      	cmp	r5, r2
 80066a6:	d003      	beq.n	80066b0 <__mcmp+0x2c>
 80066a8:	d205      	bcs.n	80066b6 <__mcmp+0x32>
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	bd30      	pop	{r4, r5, pc}
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d3f3      	bcc.n	800669c <__mcmp+0x18>
 80066b4:	e7fb      	b.n	80066ae <__mcmp+0x2a>
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7f9      	b.n	80066ae <__mcmp+0x2a>
	...

080066bc <__mdiff>:
 80066bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4689      	mov	r9, r1
 80066c2:	4606      	mov	r6, r0
 80066c4:	4611      	mov	r1, r2
 80066c6:	4648      	mov	r0, r9
 80066c8:	4614      	mov	r4, r2
 80066ca:	f7ff ffdb 	bl	8006684 <__mcmp>
 80066ce:	1e05      	subs	r5, r0, #0
 80066d0:	d112      	bne.n	80066f8 <__mdiff+0x3c>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff fd63 	bl	80061a0 <_Balloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	b928      	cbnz	r0, 80066ea <__mdiff+0x2e>
 80066de:	4b3f      	ldr	r3, [pc, #252]	@ (80067dc <__mdiff+0x120>)
 80066e0:	f240 2137 	movw	r1, #567	@ 0x237
 80066e4:	483e      	ldr	r0, [pc, #248]	@ (80067e0 <__mdiff+0x124>)
 80066e6:	f000 fcd7 	bl	8007098 <__assert_func>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066f0:	4610      	mov	r0, r2
 80066f2:	b003      	add	sp, #12
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	bfbc      	itt	lt
 80066fa:	464b      	movlt	r3, r9
 80066fc:	46a1      	movlt	r9, r4
 80066fe:	4630      	mov	r0, r6
 8006700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006704:	bfba      	itte	lt
 8006706:	461c      	movlt	r4, r3
 8006708:	2501      	movlt	r5, #1
 800670a:	2500      	movge	r5, #0
 800670c:	f7ff fd48 	bl	80061a0 <_Balloc>
 8006710:	4602      	mov	r2, r0
 8006712:	b918      	cbnz	r0, 800671c <__mdiff+0x60>
 8006714:	4b31      	ldr	r3, [pc, #196]	@ (80067dc <__mdiff+0x120>)
 8006716:	f240 2145 	movw	r1, #581	@ 0x245
 800671a:	e7e3      	b.n	80066e4 <__mdiff+0x28>
 800671c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006720:	6926      	ldr	r6, [r4, #16]
 8006722:	60c5      	str	r5, [r0, #12]
 8006724:	f109 0310 	add.w	r3, r9, #16
 8006728:	f109 0514 	add.w	r5, r9, #20
 800672c:	f104 0e14 	add.w	lr, r4, #20
 8006730:	f100 0b14 	add.w	fp, r0, #20
 8006734:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006738:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	46d9      	mov	r9, fp
 8006740:	f04f 0c00 	mov.w	ip, #0
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	f85e 0b04 	ldr.w	r0, [lr], #4
 800674a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	fa1f f38a 	uxth.w	r3, sl
 8006754:	4619      	mov	r1, r3
 8006756:	b283      	uxth	r3, r0
 8006758:	1acb      	subs	r3, r1, r3
 800675a:	0c00      	lsrs	r0, r0, #16
 800675c:	4463      	add	r3, ip
 800675e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006762:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800676c:	4576      	cmp	r6, lr
 800676e:	f849 3b04 	str.w	r3, [r9], #4
 8006772:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006776:	d8e5      	bhi.n	8006744 <__mdiff+0x88>
 8006778:	1b33      	subs	r3, r6, r4
 800677a:	3b15      	subs	r3, #21
 800677c:	f023 0303 	bic.w	r3, r3, #3
 8006780:	3415      	adds	r4, #21
 8006782:	3304      	adds	r3, #4
 8006784:	42a6      	cmp	r6, r4
 8006786:	bf38      	it	cc
 8006788:	2304      	movcc	r3, #4
 800678a:	441d      	add	r5, r3
 800678c:	445b      	add	r3, fp
 800678e:	461e      	mov	r6, r3
 8006790:	462c      	mov	r4, r5
 8006792:	4544      	cmp	r4, r8
 8006794:	d30e      	bcc.n	80067b4 <__mdiff+0xf8>
 8006796:	f108 0103 	add.w	r1, r8, #3
 800679a:	1b49      	subs	r1, r1, r5
 800679c:	f021 0103 	bic.w	r1, r1, #3
 80067a0:	3d03      	subs	r5, #3
 80067a2:	45a8      	cmp	r8, r5
 80067a4:	bf38      	it	cc
 80067a6:	2100      	movcc	r1, #0
 80067a8:	440b      	add	r3, r1
 80067aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067ae:	b191      	cbz	r1, 80067d6 <__mdiff+0x11a>
 80067b0:	6117      	str	r7, [r2, #16]
 80067b2:	e79d      	b.n	80066f0 <__mdiff+0x34>
 80067b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80067b8:	46e6      	mov	lr, ip
 80067ba:	0c08      	lsrs	r0, r1, #16
 80067bc:	fa1c fc81 	uxtah	ip, ip, r1
 80067c0:	4471      	add	r1, lr
 80067c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067c6:	b289      	uxth	r1, r1
 80067c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067cc:	f846 1b04 	str.w	r1, [r6], #4
 80067d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067d4:	e7dd      	b.n	8006792 <__mdiff+0xd6>
 80067d6:	3f01      	subs	r7, #1
 80067d8:	e7e7      	b.n	80067aa <__mdiff+0xee>
 80067da:	bf00      	nop
 80067dc:	080073e4 	.word	0x080073e4
 80067e0:	080073f5 	.word	0x080073f5

080067e4 <__d2b>:
 80067e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	460f      	mov	r7, r1
 80067ea:	2101      	movs	r1, #1
 80067ec:	ec59 8b10 	vmov	r8, r9, d0
 80067f0:	4616      	mov	r6, r2
 80067f2:	f7ff fcd5 	bl	80061a0 <_Balloc>
 80067f6:	4604      	mov	r4, r0
 80067f8:	b930      	cbnz	r0, 8006808 <__d2b+0x24>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4b23      	ldr	r3, [pc, #140]	@ (800688c <__d2b+0xa8>)
 80067fe:	4824      	ldr	r0, [pc, #144]	@ (8006890 <__d2b+0xac>)
 8006800:	f240 310f 	movw	r1, #783	@ 0x30f
 8006804:	f000 fc48 	bl	8007098 <__assert_func>
 8006808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800680c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006810:	b10d      	cbz	r5, 8006816 <__d2b+0x32>
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f1b8 0300 	subs.w	r3, r8, #0
 800681c:	d023      	beq.n	8006866 <__d2b+0x82>
 800681e:	4668      	mov	r0, sp
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	f7ff fd84 	bl	800632e <__lo0bits>
 8006826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800682a:	b1d0      	cbz	r0, 8006862 <__d2b+0x7e>
 800682c:	f1c0 0320 	rsb	r3, r0, #32
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	430b      	orrs	r3, r1
 8006836:	40c2      	lsrs	r2, r0
 8006838:	6163      	str	r3, [r4, #20]
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	61a3      	str	r3, [r4, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2201      	moveq	r2, #1
 8006846:	2202      	movne	r2, #2
 8006848:	6122      	str	r2, [r4, #16]
 800684a:	b1a5      	cbz	r5, 8006876 <__d2b+0x92>
 800684c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006850:	4405      	add	r5, r0
 8006852:	603d      	str	r5, [r7, #0]
 8006854:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4620      	mov	r0, r4
 800685c:	b003      	add	sp, #12
 800685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006862:	6161      	str	r1, [r4, #20]
 8006864:	e7ea      	b.n	800683c <__d2b+0x58>
 8006866:	a801      	add	r0, sp, #4
 8006868:	f7ff fd61 	bl	800632e <__lo0bits>
 800686c:	9b01      	ldr	r3, [sp, #4]
 800686e:	6163      	str	r3, [r4, #20]
 8006870:	3020      	adds	r0, #32
 8006872:	2201      	movs	r2, #1
 8006874:	e7e8      	b.n	8006848 <__d2b+0x64>
 8006876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800687a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800687e:	6038      	str	r0, [r7, #0]
 8006880:	6918      	ldr	r0, [r3, #16]
 8006882:	f7ff fd35 	bl	80062f0 <__hi0bits>
 8006886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800688a:	e7e5      	b.n	8006858 <__d2b+0x74>
 800688c:	080073e4 	.word	0x080073e4
 8006890:	080073f5 	.word	0x080073f5

08006894 <__ssputs_r>:
 8006894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	688e      	ldr	r6, [r1, #8]
 800689a:	461f      	mov	r7, r3
 800689c:	42be      	cmp	r6, r7
 800689e:	680b      	ldr	r3, [r1, #0]
 80068a0:	4682      	mov	sl, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	4690      	mov	r8, r2
 80068a6:	d82d      	bhi.n	8006904 <__ssputs_r+0x70>
 80068a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068b0:	d026      	beq.n	8006900 <__ssputs_r+0x6c>
 80068b2:	6965      	ldr	r5, [r4, #20]
 80068b4:	6909      	ldr	r1, [r1, #16]
 80068b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068ba:	eba3 0901 	sub.w	r9, r3, r1
 80068be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068c2:	1c7b      	adds	r3, r7, #1
 80068c4:	444b      	add	r3, r9
 80068c6:	106d      	asrs	r5, r5, #1
 80068c8:	429d      	cmp	r5, r3
 80068ca:	bf38      	it	cc
 80068cc:	461d      	movcc	r5, r3
 80068ce:	0553      	lsls	r3, r2, #21
 80068d0:	d527      	bpl.n	8006922 <__ssputs_r+0x8e>
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7ff fbd8 	bl	8006088 <_malloc_r>
 80068d8:	4606      	mov	r6, r0
 80068da:	b360      	cbz	r0, 8006936 <__ssputs_r+0xa2>
 80068dc:	6921      	ldr	r1, [r4, #16]
 80068de:	464a      	mov	r2, r9
 80068e0:	f000 fbcc 	bl	800707c <memcpy>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	6126      	str	r6, [r4, #16]
 80068f2:	6165      	str	r5, [r4, #20]
 80068f4:	444e      	add	r6, r9
 80068f6:	eba5 0509 	sub.w	r5, r5, r9
 80068fa:	6026      	str	r6, [r4, #0]
 80068fc:	60a5      	str	r5, [r4, #8]
 80068fe:	463e      	mov	r6, r7
 8006900:	42be      	cmp	r6, r7
 8006902:	d900      	bls.n	8006906 <__ssputs_r+0x72>
 8006904:	463e      	mov	r6, r7
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	4632      	mov	r2, r6
 800690a:	4641      	mov	r1, r8
 800690c:	f000 fb6a 	bl	8006fe4 <memmove>
 8006910:	68a3      	ldr	r3, [r4, #8]
 8006912:	1b9b      	subs	r3, r3, r6
 8006914:	60a3      	str	r3, [r4, #8]
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	4433      	add	r3, r6
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	2000      	movs	r0, #0
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	462a      	mov	r2, r5
 8006924:	f000 fbfc 	bl	8007120 <_realloc_r>
 8006928:	4606      	mov	r6, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	d1e0      	bne.n	80068f0 <__ssputs_r+0x5c>
 800692e:	6921      	ldr	r1, [r4, #16]
 8006930:	4650      	mov	r0, sl
 8006932:	f7ff fb35 	bl	8005fa0 <_free_r>
 8006936:	230c      	movs	r3, #12
 8006938:	f8ca 3000 	str.w	r3, [sl]
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e7e9      	b.n	800691e <__ssputs_r+0x8a>
	...

0800694c <_svfiprintf_r>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	4698      	mov	r8, r3
 8006952:	898b      	ldrh	r3, [r1, #12]
 8006954:	061b      	lsls	r3, r3, #24
 8006956:	b09d      	sub	sp, #116	@ 0x74
 8006958:	4607      	mov	r7, r0
 800695a:	460d      	mov	r5, r1
 800695c:	4614      	mov	r4, r2
 800695e:	d510      	bpl.n	8006982 <_svfiprintf_r+0x36>
 8006960:	690b      	ldr	r3, [r1, #16]
 8006962:	b973      	cbnz	r3, 8006982 <_svfiprintf_r+0x36>
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	f7ff fb8f 	bl	8006088 <_malloc_r>
 800696a:	6028      	str	r0, [r5, #0]
 800696c:	6128      	str	r0, [r5, #16]
 800696e:	b930      	cbnz	r0, 800697e <_svfiprintf_r+0x32>
 8006970:	230c      	movs	r3, #12
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	b01d      	add	sp, #116	@ 0x74
 800697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697e:	2340      	movs	r3, #64	@ 0x40
 8006980:	616b      	str	r3, [r5, #20]
 8006982:	2300      	movs	r3, #0
 8006984:	9309      	str	r3, [sp, #36]	@ 0x24
 8006986:	2320      	movs	r3, #32
 8006988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800698c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006990:	2330      	movs	r3, #48	@ 0x30
 8006992:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b30 <_svfiprintf_r+0x1e4>
 8006996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800699a:	f04f 0901 	mov.w	r9, #1
 800699e:	4623      	mov	r3, r4
 80069a0:	469a      	mov	sl, r3
 80069a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a6:	b10a      	cbz	r2, 80069ac <_svfiprintf_r+0x60>
 80069a8:	2a25      	cmp	r2, #37	@ 0x25
 80069aa:	d1f9      	bne.n	80069a0 <_svfiprintf_r+0x54>
 80069ac:	ebba 0b04 	subs.w	fp, sl, r4
 80069b0:	d00b      	beq.n	80069ca <_svfiprintf_r+0x7e>
 80069b2:	465b      	mov	r3, fp
 80069b4:	4622      	mov	r2, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7ff ff6b 	bl	8006894 <__ssputs_r>
 80069be:	3001      	adds	r0, #1
 80069c0:	f000 80a7 	beq.w	8006b12 <_svfiprintf_r+0x1c6>
 80069c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069c6:	445a      	add	r2, fp
 80069c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069ca:	f89a 3000 	ldrb.w	r3, [sl]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 809f 	beq.w	8006b12 <_svfiprintf_r+0x1c6>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f04f 32ff 	mov.w	r2, #4294967295
 80069da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069de:	f10a 0a01 	add.w	sl, sl, #1
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	9307      	str	r3, [sp, #28]
 80069e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ec:	4654      	mov	r4, sl
 80069ee:	2205      	movs	r2, #5
 80069f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f4:	484e      	ldr	r0, [pc, #312]	@ (8006b30 <_svfiprintf_r+0x1e4>)
 80069f6:	f7f9 fbf3 	bl	80001e0 <memchr>
 80069fa:	9a04      	ldr	r2, [sp, #16]
 80069fc:	b9d8      	cbnz	r0, 8006a36 <_svfiprintf_r+0xea>
 80069fe:	06d0      	lsls	r0, r2, #27
 8006a00:	bf44      	itt	mi
 8006a02:	2320      	movmi	r3, #32
 8006a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a08:	0711      	lsls	r1, r2, #28
 8006a0a:	bf44      	itt	mi
 8006a0c:	232b      	movmi	r3, #43	@ 0x2b
 8006a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a12:	f89a 3000 	ldrb.w	r3, [sl]
 8006a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a18:	d015      	beq.n	8006a46 <_svfiprintf_r+0xfa>
 8006a1a:	9a07      	ldr	r2, [sp, #28]
 8006a1c:	4654      	mov	r4, sl
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f04f 0c0a 	mov.w	ip, #10
 8006a24:	4621      	mov	r1, r4
 8006a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a2a:	3b30      	subs	r3, #48	@ 0x30
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d94b      	bls.n	8006ac8 <_svfiprintf_r+0x17c>
 8006a30:	b1b0      	cbz	r0, 8006a60 <_svfiprintf_r+0x114>
 8006a32:	9207      	str	r2, [sp, #28]
 8006a34:	e014      	b.n	8006a60 <_svfiprintf_r+0x114>
 8006a36:	eba0 0308 	sub.w	r3, r0, r8
 8006a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	46a2      	mov	sl, r4
 8006a44:	e7d2      	b.n	80069ec <_svfiprintf_r+0xa0>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	9103      	str	r1, [sp, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfbb      	ittet	lt
 8006a52:	425b      	neglt	r3, r3
 8006a54:	f042 0202 	orrlt.w	r2, r2, #2
 8006a58:	9307      	strge	r3, [sp, #28]
 8006a5a:	9307      	strlt	r3, [sp, #28]
 8006a5c:	bfb8      	it	lt
 8006a5e:	9204      	strlt	r2, [sp, #16]
 8006a60:	7823      	ldrb	r3, [r4, #0]
 8006a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a64:	d10a      	bne.n	8006a7c <_svfiprintf_r+0x130>
 8006a66:	7863      	ldrb	r3, [r4, #1]
 8006a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a6a:	d132      	bne.n	8006ad2 <_svfiprintf_r+0x186>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	1d1a      	adds	r2, r3, #4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	9203      	str	r2, [sp, #12]
 8006a74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a78:	3402      	adds	r4, #2
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b40 <_svfiprintf_r+0x1f4>
 8006a80:	7821      	ldrb	r1, [r4, #0]
 8006a82:	2203      	movs	r2, #3
 8006a84:	4650      	mov	r0, sl
 8006a86:	f7f9 fbab 	bl	80001e0 <memchr>
 8006a8a:	b138      	cbz	r0, 8006a9c <_svfiprintf_r+0x150>
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	eba0 000a 	sub.w	r0, r0, sl
 8006a92:	2240      	movs	r2, #64	@ 0x40
 8006a94:	4082      	lsls	r2, r0
 8006a96:	4313      	orrs	r3, r2
 8006a98:	3401      	adds	r4, #1
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa0:	4824      	ldr	r0, [pc, #144]	@ (8006b34 <_svfiprintf_r+0x1e8>)
 8006aa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006aa6:	2206      	movs	r2, #6
 8006aa8:	f7f9 fb9a 	bl	80001e0 <memchr>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d036      	beq.n	8006b1e <_svfiprintf_r+0x1d2>
 8006ab0:	4b21      	ldr	r3, [pc, #132]	@ (8006b38 <_svfiprintf_r+0x1ec>)
 8006ab2:	bb1b      	cbnz	r3, 8006afc <_svfiprintf_r+0x1b0>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	3307      	adds	r3, #7
 8006ab8:	f023 0307 	bic.w	r3, r3, #7
 8006abc:	3308      	adds	r3, #8
 8006abe:	9303      	str	r3, [sp, #12]
 8006ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac2:	4433      	add	r3, r6
 8006ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ac6:	e76a      	b.n	800699e <_svfiprintf_r+0x52>
 8006ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006acc:	460c      	mov	r4, r1
 8006ace:	2001      	movs	r0, #1
 8006ad0:	e7a8      	b.n	8006a24 <_svfiprintf_r+0xd8>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	3401      	adds	r4, #1
 8006ad6:	9305      	str	r3, [sp, #20]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f04f 0c0a 	mov.w	ip, #10
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ae4:	3a30      	subs	r2, #48	@ 0x30
 8006ae6:	2a09      	cmp	r2, #9
 8006ae8:	d903      	bls.n	8006af2 <_svfiprintf_r+0x1a6>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c6      	beq.n	8006a7c <_svfiprintf_r+0x130>
 8006aee:	9105      	str	r1, [sp, #20]
 8006af0:	e7c4      	b.n	8006a7c <_svfiprintf_r+0x130>
 8006af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006af6:	4604      	mov	r4, r0
 8006af8:	2301      	movs	r3, #1
 8006afa:	e7f0      	b.n	8006ade <_svfiprintf_r+0x192>
 8006afc:	ab03      	add	r3, sp, #12
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	462a      	mov	r2, r5
 8006b02:	4b0e      	ldr	r3, [pc, #56]	@ (8006b3c <_svfiprintf_r+0x1f0>)
 8006b04:	a904      	add	r1, sp, #16
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7fd fd90 	bl	800462c <_printf_float>
 8006b0c:	1c42      	adds	r2, r0, #1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	d1d6      	bne.n	8006ac0 <_svfiprintf_r+0x174>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	065b      	lsls	r3, r3, #25
 8006b16:	f53f af2d 	bmi.w	8006974 <_svfiprintf_r+0x28>
 8006b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b1c:	e72c      	b.n	8006978 <_svfiprintf_r+0x2c>
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	462a      	mov	r2, r5
 8006b24:	4b05      	ldr	r3, [pc, #20]	@ (8006b3c <_svfiprintf_r+0x1f0>)
 8006b26:	a904      	add	r1, sp, #16
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7fe f817 	bl	8004b5c <_printf_i>
 8006b2e:	e7ed      	b.n	8006b0c <_svfiprintf_r+0x1c0>
 8006b30:	0800744e 	.word	0x0800744e
 8006b34:	08007458 	.word	0x08007458
 8006b38:	0800462d 	.word	0x0800462d
 8006b3c:	08006895 	.word	0x08006895
 8006b40:	08007454 	.word	0x08007454

08006b44 <__sfputc_r>:
 8006b44:	6893      	ldr	r3, [r2, #8]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	b410      	push	{r4}
 8006b4c:	6093      	str	r3, [r2, #8]
 8006b4e:	da08      	bge.n	8006b62 <__sfputc_r+0x1e>
 8006b50:	6994      	ldr	r4, [r2, #24]
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	db01      	blt.n	8006b5a <__sfputc_r+0x16>
 8006b56:	290a      	cmp	r1, #10
 8006b58:	d103      	bne.n	8006b62 <__sfputc_r+0x1e>
 8006b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b5e:	f7fe bab2 	b.w	80050c6 <__swbuf_r>
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	1c58      	adds	r0, r3, #1
 8006b66:	6010      	str	r0, [r2, #0]
 8006b68:	7019      	strb	r1, [r3, #0]
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <__sfputs_r>:
 8006b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	18d5      	adds	r5, r2, r3
 8006b7c:	42ac      	cmp	r4, r5
 8006b7e:	d101      	bne.n	8006b84 <__sfputs_r+0x12>
 8006b80:	2000      	movs	r0, #0
 8006b82:	e007      	b.n	8006b94 <__sfputs_r+0x22>
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	463a      	mov	r2, r7
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ffda 	bl	8006b44 <__sfputc_r>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d1f3      	bne.n	8006b7c <__sfputs_r+0xa>
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b98 <_vfiprintf_r>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	460d      	mov	r5, r1
 8006b9e:	b09d      	sub	sp, #116	@ 0x74
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	4698      	mov	r8, r3
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	b118      	cbz	r0, 8006bb0 <_vfiprintf_r+0x18>
 8006ba8:	6a03      	ldr	r3, [r0, #32]
 8006baa:	b90b      	cbnz	r3, 8006bb0 <_vfiprintf_r+0x18>
 8006bac:	f7fe f980 	bl	8004eb0 <__sinit>
 8006bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bb2:	07d9      	lsls	r1, r3, #31
 8006bb4:	d405      	bmi.n	8006bc2 <_vfiprintf_r+0x2a>
 8006bb6:	89ab      	ldrh	r3, [r5, #12]
 8006bb8:	059a      	lsls	r2, r3, #22
 8006bba:	d402      	bmi.n	8006bc2 <_vfiprintf_r+0x2a>
 8006bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bbe:	f7fe fb94 	bl	80052ea <__retarget_lock_acquire_recursive>
 8006bc2:	89ab      	ldrh	r3, [r5, #12]
 8006bc4:	071b      	lsls	r3, r3, #28
 8006bc6:	d501      	bpl.n	8006bcc <_vfiprintf_r+0x34>
 8006bc8:	692b      	ldr	r3, [r5, #16]
 8006bca:	b99b      	cbnz	r3, 8006bf4 <_vfiprintf_r+0x5c>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7fe fab8 	bl	8005144 <__swsetup_r>
 8006bd4:	b170      	cbz	r0, 8006bf4 <_vfiprintf_r+0x5c>
 8006bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bd8:	07dc      	lsls	r4, r3, #31
 8006bda:	d504      	bpl.n	8006be6 <_vfiprintf_r+0x4e>
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	b01d      	add	sp, #116	@ 0x74
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	0598      	lsls	r0, r3, #22
 8006bea:	d4f7      	bmi.n	8006bdc <_vfiprintf_r+0x44>
 8006bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bee:	f7fe fb7d 	bl	80052ec <__retarget_lock_release_recursive>
 8006bf2:	e7f3      	b.n	8006bdc <_vfiprintf_r+0x44>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c02:	2330      	movs	r3, #48	@ 0x30
 8006c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006db4 <_vfiprintf_r+0x21c>
 8006c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c0c:	f04f 0901 	mov.w	r9, #1
 8006c10:	4623      	mov	r3, r4
 8006c12:	469a      	mov	sl, r3
 8006c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c18:	b10a      	cbz	r2, 8006c1e <_vfiprintf_r+0x86>
 8006c1a:	2a25      	cmp	r2, #37	@ 0x25
 8006c1c:	d1f9      	bne.n	8006c12 <_vfiprintf_r+0x7a>
 8006c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c22:	d00b      	beq.n	8006c3c <_vfiprintf_r+0xa4>
 8006c24:	465b      	mov	r3, fp
 8006c26:	4622      	mov	r2, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ffa1 	bl	8006b72 <__sfputs_r>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f000 80a7 	beq.w	8006d84 <_vfiprintf_r+0x1ec>
 8006c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c38:	445a      	add	r2, fp
 8006c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 809f 	beq.w	8006d84 <_vfiprintf_r+0x1ec>
 8006c46:	2300      	movs	r3, #0
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c50:	f10a 0a01 	add.w	sl, sl, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	9307      	str	r3, [sp, #28]
 8006c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c5e:	4654      	mov	r4, sl
 8006c60:	2205      	movs	r2, #5
 8006c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c66:	4853      	ldr	r0, [pc, #332]	@ (8006db4 <_vfiprintf_r+0x21c>)
 8006c68:	f7f9 faba 	bl	80001e0 <memchr>
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	b9d8      	cbnz	r0, 8006ca8 <_vfiprintf_r+0x110>
 8006c70:	06d1      	lsls	r1, r2, #27
 8006c72:	bf44      	itt	mi
 8006c74:	2320      	movmi	r3, #32
 8006c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c7a:	0713      	lsls	r3, r2, #28
 8006c7c:	bf44      	itt	mi
 8006c7e:	232b      	movmi	r3, #43	@ 0x2b
 8006c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c84:	f89a 3000 	ldrb.w	r3, [sl]
 8006c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8a:	d015      	beq.n	8006cb8 <_vfiprintf_r+0x120>
 8006c8c:	9a07      	ldr	r2, [sp, #28]
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2000      	movs	r0, #0
 8006c92:	f04f 0c0a 	mov.w	ip, #10
 8006c96:	4621      	mov	r1, r4
 8006c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c9c:	3b30      	subs	r3, #48	@ 0x30
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	d94b      	bls.n	8006d3a <_vfiprintf_r+0x1a2>
 8006ca2:	b1b0      	cbz	r0, 8006cd2 <_vfiprintf_r+0x13a>
 8006ca4:	9207      	str	r2, [sp, #28]
 8006ca6:	e014      	b.n	8006cd2 <_vfiprintf_r+0x13a>
 8006ca8:	eba0 0308 	sub.w	r3, r0, r8
 8006cac:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	46a2      	mov	sl, r4
 8006cb6:	e7d2      	b.n	8006c5e <_vfiprintf_r+0xc6>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	1d19      	adds	r1, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	9103      	str	r1, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfbb      	ittet	lt
 8006cc4:	425b      	neglt	r3, r3
 8006cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cca:	9307      	strge	r3, [sp, #28]
 8006ccc:	9307      	strlt	r3, [sp, #28]
 8006cce:	bfb8      	it	lt
 8006cd0:	9204      	strlt	r2, [sp, #16]
 8006cd2:	7823      	ldrb	r3, [r4, #0]
 8006cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cd6:	d10a      	bne.n	8006cee <_vfiprintf_r+0x156>
 8006cd8:	7863      	ldrb	r3, [r4, #1]
 8006cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cdc:	d132      	bne.n	8006d44 <_vfiprintf_r+0x1ac>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	9203      	str	r2, [sp, #12]
 8006ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cea:	3402      	adds	r4, #2
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006dc4 <_vfiprintf_r+0x22c>
 8006cf2:	7821      	ldrb	r1, [r4, #0]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f7f9 fa72 	bl	80001e0 <memchr>
 8006cfc:	b138      	cbz	r0, 8006d0e <_vfiprintf_r+0x176>
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	eba0 000a 	sub.w	r0, r0, sl
 8006d04:	2240      	movs	r2, #64	@ 0x40
 8006d06:	4082      	lsls	r2, r0
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	3401      	adds	r4, #1
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d12:	4829      	ldr	r0, [pc, #164]	@ (8006db8 <_vfiprintf_r+0x220>)
 8006d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d18:	2206      	movs	r2, #6
 8006d1a:	f7f9 fa61 	bl	80001e0 <memchr>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d03f      	beq.n	8006da2 <_vfiprintf_r+0x20a>
 8006d22:	4b26      	ldr	r3, [pc, #152]	@ (8006dbc <_vfiprintf_r+0x224>)
 8006d24:	bb1b      	cbnz	r3, 8006d6e <_vfiprintf_r+0x1d6>
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	3307      	adds	r3, #7
 8006d2a:	f023 0307 	bic.w	r3, r3, #7
 8006d2e:	3308      	adds	r3, #8
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d34:	443b      	add	r3, r7
 8006d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d38:	e76a      	b.n	8006c10 <_vfiprintf_r+0x78>
 8006d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d3e:	460c      	mov	r4, r1
 8006d40:	2001      	movs	r0, #1
 8006d42:	e7a8      	b.n	8006c96 <_vfiprintf_r+0xfe>
 8006d44:	2300      	movs	r3, #0
 8006d46:	3401      	adds	r4, #1
 8006d48:	9305      	str	r3, [sp, #20]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0c0a 	mov.w	ip, #10
 8006d50:	4620      	mov	r0, r4
 8006d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d56:	3a30      	subs	r2, #48	@ 0x30
 8006d58:	2a09      	cmp	r2, #9
 8006d5a:	d903      	bls.n	8006d64 <_vfiprintf_r+0x1cc>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0c6      	beq.n	8006cee <_vfiprintf_r+0x156>
 8006d60:	9105      	str	r1, [sp, #20]
 8006d62:	e7c4      	b.n	8006cee <_vfiprintf_r+0x156>
 8006d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d68:	4604      	mov	r4, r0
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7f0      	b.n	8006d50 <_vfiprintf_r+0x1b8>
 8006d6e:	ab03      	add	r3, sp, #12
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	462a      	mov	r2, r5
 8006d74:	4b12      	ldr	r3, [pc, #72]	@ (8006dc0 <_vfiprintf_r+0x228>)
 8006d76:	a904      	add	r1, sp, #16
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7fd fc57 	bl	800462c <_printf_float>
 8006d7e:	4607      	mov	r7, r0
 8006d80:	1c78      	adds	r0, r7, #1
 8006d82:	d1d6      	bne.n	8006d32 <_vfiprintf_r+0x19a>
 8006d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d86:	07d9      	lsls	r1, r3, #31
 8006d88:	d405      	bmi.n	8006d96 <_vfiprintf_r+0x1fe>
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	059a      	lsls	r2, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_vfiprintf_r+0x1fe>
 8006d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d92:	f7fe faab 	bl	80052ec <__retarget_lock_release_recursive>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	065b      	lsls	r3, r3, #25
 8006d9a:	f53f af1f 	bmi.w	8006bdc <_vfiprintf_r+0x44>
 8006d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da0:	e71e      	b.n	8006be0 <_vfiprintf_r+0x48>
 8006da2:	ab03      	add	r3, sp, #12
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	462a      	mov	r2, r5
 8006da8:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <_vfiprintf_r+0x228>)
 8006daa:	a904      	add	r1, sp, #16
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7fd fed5 	bl	8004b5c <_printf_i>
 8006db2:	e7e4      	b.n	8006d7e <_vfiprintf_r+0x1e6>
 8006db4:	0800744e 	.word	0x0800744e
 8006db8:	08007458 	.word	0x08007458
 8006dbc:	0800462d 	.word	0x0800462d
 8006dc0:	08006b73 	.word	0x08006b73
 8006dc4:	08007454 	.word	0x08007454

08006dc8 <__sflush_r>:
 8006dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	0716      	lsls	r6, r2, #28
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	d454      	bmi.n	8006e82 <__sflush_r+0xba>
 8006dd8:	684b      	ldr	r3, [r1, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dc02      	bgt.n	8006de4 <__sflush_r+0x1c>
 8006dde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dd48      	ble.n	8006e76 <__sflush_r+0xae>
 8006de4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	d045      	beq.n	8006e76 <__sflush_r+0xae>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006df0:	682f      	ldr	r7, [r5, #0]
 8006df2:	6a21      	ldr	r1, [r4, #32]
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	d030      	beq.n	8006e5a <__sflush_r+0x92>
 8006df8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	0759      	lsls	r1, r3, #29
 8006dfe:	d505      	bpl.n	8006e0c <__sflush_r+0x44>
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e06:	b10b      	cbz	r3, 8006e0c <__sflush_r+0x44>
 8006e08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e10:	6a21      	ldr	r1, [r4, #32]
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b0      	blx	r6
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	d106      	bne.n	8006e2a <__sflush_r+0x62>
 8006e1c:	6829      	ldr	r1, [r5, #0]
 8006e1e:	291d      	cmp	r1, #29
 8006e20:	d82b      	bhi.n	8006e7a <__sflush_r+0xb2>
 8006e22:	4a2a      	ldr	r2, [pc, #168]	@ (8006ecc <__sflush_r+0x104>)
 8006e24:	40ca      	lsrs	r2, r1
 8006e26:	07d6      	lsls	r6, r2, #31
 8006e28:	d527      	bpl.n	8006e7a <__sflush_r+0xb2>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	6062      	str	r2, [r4, #4]
 8006e2e:	04d9      	lsls	r1, r3, #19
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	d504      	bpl.n	8006e40 <__sflush_r+0x78>
 8006e36:	1c42      	adds	r2, r0, #1
 8006e38:	d101      	bne.n	8006e3e <__sflush_r+0x76>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	b903      	cbnz	r3, 8006e40 <__sflush_r+0x78>
 8006e3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e42:	602f      	str	r7, [r5, #0]
 8006e44:	b1b9      	cbz	r1, 8006e76 <__sflush_r+0xae>
 8006e46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	d002      	beq.n	8006e54 <__sflush_r+0x8c>
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff f8a6 	bl	8005fa0 <_free_r>
 8006e54:	2300      	movs	r3, #0
 8006e56:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e58:	e00d      	b.n	8006e76 <__sflush_r+0xae>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b0      	blx	r6
 8006e60:	4602      	mov	r2, r0
 8006e62:	1c50      	adds	r0, r2, #1
 8006e64:	d1c9      	bne.n	8006dfa <__sflush_r+0x32>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0c6      	beq.n	8006dfa <__sflush_r+0x32>
 8006e6c:	2b1d      	cmp	r3, #29
 8006e6e:	d001      	beq.n	8006e74 <__sflush_r+0xac>
 8006e70:	2b16      	cmp	r3, #22
 8006e72:	d11e      	bne.n	8006eb2 <__sflush_r+0xea>
 8006e74:	602f      	str	r7, [r5, #0]
 8006e76:	2000      	movs	r0, #0
 8006e78:	e022      	b.n	8006ec0 <__sflush_r+0xf8>
 8006e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	e01b      	b.n	8006eba <__sflush_r+0xf2>
 8006e82:	690f      	ldr	r7, [r1, #16]
 8006e84:	2f00      	cmp	r7, #0
 8006e86:	d0f6      	beq.n	8006e76 <__sflush_r+0xae>
 8006e88:	0793      	lsls	r3, r2, #30
 8006e8a:	680e      	ldr	r6, [r1, #0]
 8006e8c:	bf08      	it	eq
 8006e8e:	694b      	ldreq	r3, [r1, #20]
 8006e90:	600f      	str	r7, [r1, #0]
 8006e92:	bf18      	it	ne
 8006e94:	2300      	movne	r3, #0
 8006e96:	eba6 0807 	sub.w	r8, r6, r7
 8006e9a:	608b      	str	r3, [r1, #8]
 8006e9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ea0:	dde9      	ble.n	8006e76 <__sflush_r+0xae>
 8006ea2:	6a21      	ldr	r1, [r4, #32]
 8006ea4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ea6:	4643      	mov	r3, r8
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b0      	blx	r6
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dc08      	bgt.n	8006ec4 <__sflush_r+0xfc>
 8006eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	4407      	add	r7, r0
 8006ec6:	eba8 0800 	sub.w	r8, r8, r0
 8006eca:	e7e7      	b.n	8006e9c <__sflush_r+0xd4>
 8006ecc:	20400001 	.word	0x20400001

08006ed0 <_fflush_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	690b      	ldr	r3, [r1, #16]
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b913      	cbnz	r3, 8006ee0 <_fflush_r+0x10>
 8006eda:	2500      	movs	r5, #0
 8006edc:	4628      	mov	r0, r5
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	b118      	cbz	r0, 8006eea <_fflush_r+0x1a>
 8006ee2:	6a03      	ldr	r3, [r0, #32]
 8006ee4:	b90b      	cbnz	r3, 8006eea <_fflush_r+0x1a>
 8006ee6:	f7fd ffe3 	bl	8004eb0 <__sinit>
 8006eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f3      	beq.n	8006eda <_fflush_r+0xa>
 8006ef2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ef4:	07d0      	lsls	r0, r2, #31
 8006ef6:	d404      	bmi.n	8006f02 <_fflush_r+0x32>
 8006ef8:	0599      	lsls	r1, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_fflush_r+0x32>
 8006efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006efe:	f7fe f9f4 	bl	80052ea <__retarget_lock_acquire_recursive>
 8006f02:	4628      	mov	r0, r5
 8006f04:	4621      	mov	r1, r4
 8006f06:	f7ff ff5f 	bl	8006dc8 <__sflush_r>
 8006f0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f0c:	07da      	lsls	r2, r3, #31
 8006f0e:	4605      	mov	r5, r0
 8006f10:	d4e4      	bmi.n	8006edc <_fflush_r+0xc>
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	059b      	lsls	r3, r3, #22
 8006f16:	d4e1      	bmi.n	8006edc <_fflush_r+0xc>
 8006f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f1a:	f7fe f9e7 	bl	80052ec <__retarget_lock_release_recursive>
 8006f1e:	e7dd      	b.n	8006edc <_fflush_r+0xc>

08006f20 <__swhatbuf_r>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	b096      	sub	sp, #88	@ 0x58
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	461e      	mov	r6, r3
 8006f30:	da0d      	bge.n	8006f4e <__swhatbuf_r+0x2e>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f38:	f04f 0100 	mov.w	r1, #0
 8006f3c:	bf14      	ite	ne
 8006f3e:	2340      	movne	r3, #64	@ 0x40
 8006f40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f44:	2000      	movs	r0, #0
 8006f46:	6031      	str	r1, [r6, #0]
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	b016      	add	sp, #88	@ 0x58
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f000 f862 	bl	8007018 <_fstat_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dbec      	blt.n	8006f32 <__swhatbuf_r+0x12>
 8006f58:	9901      	ldr	r1, [sp, #4]
 8006f5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f62:	4259      	negs	r1, r3
 8006f64:	4159      	adcs	r1, r3
 8006f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f6a:	e7eb      	b.n	8006f44 <__swhatbuf_r+0x24>

08006f6c <__smakebuf_r>:
 8006f6c:	898b      	ldrh	r3, [r1, #12]
 8006f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f70:	079d      	lsls	r5, r3, #30
 8006f72:	4606      	mov	r6, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d507      	bpl.n	8006f88 <__smakebuf_r+0x1c>
 8006f78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	2301      	movs	r3, #1
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	b003      	add	sp, #12
 8006f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f88:	ab01      	add	r3, sp, #4
 8006f8a:	466a      	mov	r2, sp
 8006f8c:	f7ff ffc8 	bl	8006f20 <__swhatbuf_r>
 8006f90:	9f00      	ldr	r7, [sp, #0]
 8006f92:	4605      	mov	r5, r0
 8006f94:	4639      	mov	r1, r7
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff f876 	bl	8006088 <_malloc_r>
 8006f9c:	b948      	cbnz	r0, 8006fb2 <__smakebuf_r+0x46>
 8006f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa2:	059a      	lsls	r2, r3, #22
 8006fa4:	d4ee      	bmi.n	8006f84 <__smakebuf_r+0x18>
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	f043 0302 	orr.w	r3, r3, #2
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	e7e2      	b.n	8006f78 <__smakebuf_r+0xc>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	6020      	str	r0, [r4, #0]
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fc2:	b15b      	cbz	r3, 8006fdc <__smakebuf_r+0x70>
 8006fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f000 f837 	bl	800703c <_isatty_r>
 8006fce:	b128      	cbz	r0, 8006fdc <__smakebuf_r+0x70>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	431d      	orrs	r5, r3
 8006fe0:	81a5      	strh	r5, [r4, #12]
 8006fe2:	e7cf      	b.n	8006f84 <__smakebuf_r+0x18>

08006fe4 <memmove>:
 8006fe4:	4288      	cmp	r0, r1
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	eb01 0402 	add.w	r4, r1, r2
 8006fec:	d902      	bls.n	8006ff4 <memmove+0x10>
 8006fee:	4284      	cmp	r4, r0
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	d807      	bhi.n	8007004 <memmove+0x20>
 8006ff4:	1e43      	subs	r3, r0, #1
 8006ff6:	42a1      	cmp	r1, r4
 8006ff8:	d008      	beq.n	800700c <memmove+0x28>
 8006ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007002:	e7f8      	b.n	8006ff6 <memmove+0x12>
 8007004:	4402      	add	r2, r0
 8007006:	4601      	mov	r1, r0
 8007008:	428a      	cmp	r2, r1
 800700a:	d100      	bne.n	800700e <memmove+0x2a>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007016:	e7f7      	b.n	8007008 <memmove+0x24>

08007018 <_fstat_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_fstat_r+0x20>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	f7fa fcd3 	bl	80019d0 <_fstat>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d102      	bne.n	8007034 <_fstat_r+0x1c>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b103      	cbz	r3, 8007034 <_fstat_r+0x1c>
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	2000042c 	.word	0x2000042c

0800703c <_isatty_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	@ (8007058 <_isatty_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa fcd2 	bl	80019f0 <_isatty>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_isatty_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_isatty_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	2000042c 	.word	0x2000042c

0800705c <_sbrk_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d06      	ldr	r5, [pc, #24]	@ (8007078 <_sbrk_r+0x1c>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7fa fcda 	bl	8001a20 <_sbrk>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_sbrk_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_sbrk_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	2000042c 	.word	0x2000042c

0800707c <memcpy>:
 800707c:	440a      	add	r2, r1
 800707e:	4291      	cmp	r1, r2
 8007080:	f100 33ff 	add.w	r3, r0, #4294967295
 8007084:	d100      	bne.n	8007088 <memcpy+0xc>
 8007086:	4770      	bx	lr
 8007088:	b510      	push	{r4, lr}
 800708a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007092:	4291      	cmp	r1, r2
 8007094:	d1f9      	bne.n	800708a <memcpy+0xe>
 8007096:	bd10      	pop	{r4, pc}

08007098 <__assert_func>:
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800709a:	4614      	mov	r4, r2
 800709c:	461a      	mov	r2, r3
 800709e:	4b09      	ldr	r3, [pc, #36]	@ (80070c4 <__assert_func+0x2c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4605      	mov	r5, r0
 80070a4:	68d8      	ldr	r0, [r3, #12]
 80070a6:	b14c      	cbz	r4, 80070bc <__assert_func+0x24>
 80070a8:	4b07      	ldr	r3, [pc, #28]	@ (80070c8 <__assert_func+0x30>)
 80070aa:	9100      	str	r1, [sp, #0]
 80070ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070b0:	4906      	ldr	r1, [pc, #24]	@ (80070cc <__assert_func+0x34>)
 80070b2:	462b      	mov	r3, r5
 80070b4:	f000 f870 	bl	8007198 <fiprintf>
 80070b8:	f000 f880 	bl	80071bc <abort>
 80070bc:	4b04      	ldr	r3, [pc, #16]	@ (80070d0 <__assert_func+0x38>)
 80070be:	461c      	mov	r4, r3
 80070c0:	e7f3      	b.n	80070aa <__assert_func+0x12>
 80070c2:	bf00      	nop
 80070c4:	20000018 	.word	0x20000018
 80070c8:	08007469 	.word	0x08007469
 80070cc:	08007476 	.word	0x08007476
 80070d0:	080074a4 	.word	0x080074a4

080070d4 <_calloc_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	fba1 5402 	umull	r5, r4, r1, r2
 80070da:	b934      	cbnz	r4, 80070ea <_calloc_r+0x16>
 80070dc:	4629      	mov	r1, r5
 80070de:	f7fe ffd3 	bl	8006088 <_malloc_r>
 80070e2:	4606      	mov	r6, r0
 80070e4:	b928      	cbnz	r0, 80070f2 <_calloc_r+0x1e>
 80070e6:	4630      	mov	r0, r6
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
 80070ea:	220c      	movs	r2, #12
 80070ec:	6002      	str	r2, [r0, #0]
 80070ee:	2600      	movs	r6, #0
 80070f0:	e7f9      	b.n	80070e6 <_calloc_r+0x12>
 80070f2:	462a      	mov	r2, r5
 80070f4:	4621      	mov	r1, r4
 80070f6:	f7fe f87b 	bl	80051f0 <memset>
 80070fa:	e7f4      	b.n	80070e6 <_calloc_r+0x12>

080070fc <__ascii_mbtowc>:
 80070fc:	b082      	sub	sp, #8
 80070fe:	b901      	cbnz	r1, 8007102 <__ascii_mbtowc+0x6>
 8007100:	a901      	add	r1, sp, #4
 8007102:	b142      	cbz	r2, 8007116 <__ascii_mbtowc+0x1a>
 8007104:	b14b      	cbz	r3, 800711a <__ascii_mbtowc+0x1e>
 8007106:	7813      	ldrb	r3, [r2, #0]
 8007108:	600b      	str	r3, [r1, #0]
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	1e10      	subs	r0, r2, #0
 800710e:	bf18      	it	ne
 8007110:	2001      	movne	r0, #1
 8007112:	b002      	add	sp, #8
 8007114:	4770      	bx	lr
 8007116:	4610      	mov	r0, r2
 8007118:	e7fb      	b.n	8007112 <__ascii_mbtowc+0x16>
 800711a:	f06f 0001 	mvn.w	r0, #1
 800711e:	e7f8      	b.n	8007112 <__ascii_mbtowc+0x16>

08007120 <_realloc_r>:
 8007120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4607      	mov	r7, r0
 8007126:	4614      	mov	r4, r2
 8007128:	460d      	mov	r5, r1
 800712a:	b921      	cbnz	r1, 8007136 <_realloc_r+0x16>
 800712c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	4611      	mov	r1, r2
 8007132:	f7fe bfa9 	b.w	8006088 <_malloc_r>
 8007136:	b92a      	cbnz	r2, 8007144 <_realloc_r+0x24>
 8007138:	f7fe ff32 	bl	8005fa0 <_free_r>
 800713c:	4625      	mov	r5, r4
 800713e:	4628      	mov	r0, r5
 8007140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007144:	f000 f841 	bl	80071ca <_malloc_usable_size_r>
 8007148:	4284      	cmp	r4, r0
 800714a:	4606      	mov	r6, r0
 800714c:	d802      	bhi.n	8007154 <_realloc_r+0x34>
 800714e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007152:	d8f4      	bhi.n	800713e <_realloc_r+0x1e>
 8007154:	4621      	mov	r1, r4
 8007156:	4638      	mov	r0, r7
 8007158:	f7fe ff96 	bl	8006088 <_malloc_r>
 800715c:	4680      	mov	r8, r0
 800715e:	b908      	cbnz	r0, 8007164 <_realloc_r+0x44>
 8007160:	4645      	mov	r5, r8
 8007162:	e7ec      	b.n	800713e <_realloc_r+0x1e>
 8007164:	42b4      	cmp	r4, r6
 8007166:	4622      	mov	r2, r4
 8007168:	4629      	mov	r1, r5
 800716a:	bf28      	it	cs
 800716c:	4632      	movcs	r2, r6
 800716e:	f7ff ff85 	bl	800707c <memcpy>
 8007172:	4629      	mov	r1, r5
 8007174:	4638      	mov	r0, r7
 8007176:	f7fe ff13 	bl	8005fa0 <_free_r>
 800717a:	e7f1      	b.n	8007160 <_realloc_r+0x40>

0800717c <__ascii_wctomb>:
 800717c:	4603      	mov	r3, r0
 800717e:	4608      	mov	r0, r1
 8007180:	b141      	cbz	r1, 8007194 <__ascii_wctomb+0x18>
 8007182:	2aff      	cmp	r2, #255	@ 0xff
 8007184:	d904      	bls.n	8007190 <__ascii_wctomb+0x14>
 8007186:	228a      	movs	r2, #138	@ 0x8a
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	4770      	bx	lr
 8007190:	700a      	strb	r2, [r1, #0]
 8007192:	2001      	movs	r0, #1
 8007194:	4770      	bx	lr
	...

08007198 <fiprintf>:
 8007198:	b40e      	push	{r1, r2, r3}
 800719a:	b503      	push	{r0, r1, lr}
 800719c:	4601      	mov	r1, r0
 800719e:	ab03      	add	r3, sp, #12
 80071a0:	4805      	ldr	r0, [pc, #20]	@ (80071b8 <fiprintf+0x20>)
 80071a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	f7ff fcf5 	bl	8006b98 <_vfiprintf_r>
 80071ae:	b002      	add	sp, #8
 80071b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b4:	b003      	add	sp, #12
 80071b6:	4770      	bx	lr
 80071b8:	20000018 	.word	0x20000018

080071bc <abort>:
 80071bc:	b508      	push	{r3, lr}
 80071be:	2006      	movs	r0, #6
 80071c0:	f000 f834 	bl	800722c <raise>
 80071c4:	2001      	movs	r0, #1
 80071c6:	f7fa fbb3 	bl	8001930 <_exit>

080071ca <_malloc_usable_size_r>:
 80071ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ce:	1f18      	subs	r0, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bfbc      	itt	lt
 80071d4:	580b      	ldrlt	r3, [r1, r0]
 80071d6:	18c0      	addlt	r0, r0, r3
 80071d8:	4770      	bx	lr

080071da <_raise_r>:
 80071da:	291f      	cmp	r1, #31
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	d904      	bls.n	80071ee <_raise_r+0x14>
 80071e4:	2316      	movs	r3, #22
 80071e6:	6003      	str	r3, [r0, #0]
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071f0:	b112      	cbz	r2, 80071f8 <_raise_r+0x1e>
 80071f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071f6:	b94b      	cbnz	r3, 800720c <_raise_r+0x32>
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f831 	bl	8007260 <_getpid_r>
 80071fe:	4622      	mov	r2, r4
 8007200:	4601      	mov	r1, r0
 8007202:	4628      	mov	r0, r5
 8007204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007208:	f000 b818 	b.w	800723c <_kill_r>
 800720c:	2b01      	cmp	r3, #1
 800720e:	d00a      	beq.n	8007226 <_raise_r+0x4c>
 8007210:	1c59      	adds	r1, r3, #1
 8007212:	d103      	bne.n	800721c <_raise_r+0x42>
 8007214:	2316      	movs	r3, #22
 8007216:	6003      	str	r3, [r0, #0]
 8007218:	2001      	movs	r0, #1
 800721a:	e7e7      	b.n	80071ec <_raise_r+0x12>
 800721c:	2100      	movs	r1, #0
 800721e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007222:	4620      	mov	r0, r4
 8007224:	4798      	blx	r3
 8007226:	2000      	movs	r0, #0
 8007228:	e7e0      	b.n	80071ec <_raise_r+0x12>
	...

0800722c <raise>:
 800722c:	4b02      	ldr	r3, [pc, #8]	@ (8007238 <raise+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7ff bfd2 	b.w	80071da <_raise_r>
 8007236:	bf00      	nop
 8007238:	20000018 	.word	0x20000018

0800723c <_kill_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d07      	ldr	r5, [pc, #28]	@ (800725c <_kill_r+0x20>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7fa fb61 	bl	8001910 <_kill>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_kill_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_kill_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	2000042c 	.word	0x2000042c

08007260 <_getpid_r>:
 8007260:	f7fa bb4e 	b.w	8001900 <_getpid>

08007264 <_init>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr

08007270 <_fini>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr
