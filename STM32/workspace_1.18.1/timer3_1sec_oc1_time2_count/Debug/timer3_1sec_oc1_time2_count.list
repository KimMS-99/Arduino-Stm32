
timer3_1sec_oc1_time2_count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004550  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046f0  080046f0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004778  08004778  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004778  08004778  00005778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004780  08004780  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00005780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004788  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  080047f0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080047f0  00006308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca95  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8d  00000000  00000000  00012b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000147c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c5  00000000  00000000  00015440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f54  00000000  00000000  00015e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d635  00000000  00000000  0002cd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffb5  00000000  00000000  0003a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  000ca388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000cdfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046d8 	.word	0x080046d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080046d8 	.word	0x080046d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd3c 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f872 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa1c 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f9f0 	bl	80009a0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c0:	f000 f928 	bl	8000814 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c4:	f000 f8d4 	bl	8000770 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005c8:	f000 f99c 	bl	8000904 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("start main()\r\n");
 80005cc:	4827      	ldr	r0, [pc, #156]	@ (800066c <main+0xc0>)
 80005ce:	f003 fa21 	bl	8003a14 <puts>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80005d2:	4827      	ldr	r0, [pc, #156]	@ (8000670 <main+0xc4>)
 80005d4:	f001 fda8 	bl	8002128 <HAL_TIM_Base_Start_IT>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x36>
	  Error_Handler();
 80005de:	f000 facf 	bl	8000b80 <Error_Handler>
  if(HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4822      	ldr	r0, [pc, #136]	@ (8000670 <main+0xc4>)
 80005e6:	f001 fe5b 	bl	80022a0 <HAL_TIM_OC_Start_IT>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <main+0x48>
	  Error_Handler();
 80005f0:	f000 fac6 	bl	8000b80 <Error_Handler>
  if(HAL_TIM_Base_Start(&htim2) != HAL_OK)
 80005f4:	481f      	ldr	r0, [pc, #124]	@ (8000674 <main+0xc8>)
 80005f6:	f001 fd3d 	bl	8002074 <HAL_TIM_Base_Start>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x58>
	  Error_Handler();
 8000600:	f000 fabe 	bl	8000b80 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8000604:	481c      	ldr	r0, [pc, #112]	@ (8000678 <main+0xcc>)
 8000606:	f001 fd8f 	bl	8002128 <HAL_TIM_Base_Start_IT>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <main+0x68>
	  Error_Handler();
 8000610:	f000 fab6 	bl	8000b80 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(time3SecFlag)
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <main+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00f      	beq.n	800063c <main+0x90>
	  {
		  time3SecFlag = 0;
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <main+0xd0>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
		  printf("time3SecCnt : %d\r\n", time3SecCnt);
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <main+0xd4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <main+0xd8>)
 800062a:	f003 f98b 	bl	8003944 <iprintf>
		  printf("timer2 counter : %u\r\n", TIM2->CNT);
 800062e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	4814      	ldr	r0, [pc, #80]	@ (8000688 <main+0xdc>)
 8000638:	f003 f984 	bl	8003944 <iprintf>
	  }
	  if(time4MsFlag)
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <main+0xe0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e7      	beq.n	8000614 <main+0x68>
	  {
		  if(!(time4MsCnt % 100))
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <main+0xe4>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <main+0xe8>)
 800064a:	fba3 1302 	umull	r1, r3, r3, r2
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2164      	movs	r1, #100	@ 0x64
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <main+0xb8>
		  {
			  HAL_GPIO_TogglePin(TIM2_CLUCK_GPIO_Port, TIM2_CLUCK_Pin);
 800065c:	2102      	movs	r1, #2
 800065e:	480e      	ldr	r0, [pc, #56]	@ (8000698 <main+0xec>)
 8000660:	f001 f805 	bl	800166e <HAL_GPIO_TogglePin>
		  }
		  time4MsFlag = 0;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <main+0xe0>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	  if(time3SecFlag)
 800066a:	e7d3      	b.n	8000614 <main+0x68>
 800066c:	080046f0 	.word	0x080046f0
 8000670:	200000cc 	.word	0x200000cc
 8000674:	20000084 	.word	0x20000084
 8000678:	20000114 	.word	0x20000114
 800067c:	200001a8 	.word	0x200001a8
 8000680:	200001a4 	.word	0x200001a4
 8000684:	08004700 	.word	0x08004700
 8000688:	08004714 	.word	0x08004714
 800068c:	200001ac 	.word	0x200001ac
 8000690:	200001b0 	.word	0x200001b0
 8000694:	51eb851f 	.word	0x51eb851f
 8000698:	40020000 	.word	0x40020000

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fa92 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f000 ffbe 	bl	80016a4 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072e:	f000 fa27 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fa20 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 fa11 	bl	8000b80 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_TIM2_Init+0xa0>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_TIM2_Init+0xa0>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_TIM2_Init+0xa0>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007a2:	f04f 32ff 	mov.w	r2, #4294967295
 80007a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b6:	f001 fc0d 	bl	8001fd4 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007c0:	f000 f9de 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007de:	f001 ffa9 	bl	8002734 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f9ca 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007fa:	f002 fb53 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000804:	f000 f9bc 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000084 	.word	0x20000084

08000814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000844:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <MX_TIM3_Init+0xe8>)
 8000846:	4a2e      	ldr	r2, [pc, #184]	@ (8000900 <MX_TIM3_Init+0xec>)
 8000848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800084a:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <MX_TIM3_Init+0xe8>)
 800084c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <MX_TIM3_Init+0xe8>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <MX_TIM3_Init+0xe8>)
 800085a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800085e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <MX_TIM3_Init+0xe8>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000866:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <MX_TIM3_Init+0xe8>)
 8000868:	2280      	movs	r2, #128	@ 0x80
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086c:	4823      	ldr	r0, [pc, #140]	@ (80008fc <MX_TIM3_Init+0xe8>)
 800086e:	f001 fbb1 	bl	8001fd4 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000878:	f000 f982 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000886:	4619      	mov	r1, r3
 8000888:	481c      	ldr	r0, [pc, #112]	@ (80008fc <MX_TIM3_Init+0xe8>)
 800088a:	f001 ff53 	bl	8002734 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000894:	f000 f974 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000898:	4818      	ldr	r0, [pc, #96]	@ (80008fc <MX_TIM3_Init+0xe8>)
 800089a:	f001 fca7 	bl	80021ec <HAL_TIM_OC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008a4:	f000 f96c 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4619      	mov	r1, r3
 80008b6:	4811      	ldr	r0, [pc, #68]	@ (80008fc <MX_TIM3_Init+0xe8>)
 80008b8:	f002 faf4 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008c2:	f000 f95d 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008c6:	2330      	movs	r3, #48	@ 0x30
 80008c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 80008ca:	f241 3387 	movw	r3, #4999	@ 0x1387
 80008ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	4807      	ldr	r0, [pc, #28]	@ (80008fc <MX_TIM3_Init+0xe8>)
 80008e0:	f001 fecc 	bl	800267c <HAL_TIM_OC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80008ea:	f000 f949 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ee:	4803      	ldr	r0, [pc, #12]	@ (80008fc <MX_TIM3_Init+0xe8>)
 80008f0:	f000 f9f6 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	@ 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	40000400 	.word	0x40000400

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_TIM4_Init+0x98>)
 8000924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000928:	2253      	movs	r2, #83	@ 0x53
 800092a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM4_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000934:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_TIM4_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000948:	f001 fb44 	bl	8001fd4 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f915 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000964:	f001 fee6 	bl	8002734 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f907 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_TIM4_Init+0x94>)
 8000980:	f002 fa90 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800098a:	f000 f8f9 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000114 	.word	0x20000114
 800099c:	40000800 	.word	0x40000800

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f002 fae6 	bl	8002fa8 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f8cd 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000015c 	.word	0x2000015c
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIM2_CLUCK_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2122      	movs	r1, #34	@ 0x22
 8000a7e:	4812      	ldr	r0, [pc, #72]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a80:	f000 fddc 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_GPIO_Init+0xd8>)
 8000a9c:	f000 fc4a 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM2_CLUCK_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TIM2_CLUCK_Pin|LD2_Pin;
 8000aa0:	2322      	movs	r3, #34	@ 0x22
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000ab8:	f000 fc3c 	bl	8001334 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020800 	.word	0x40020800

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3) // timer3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d107      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		time3SecFlag = 1;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
		time3SecCnt++; // 1sec
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000af0:	6013      	str	r3, [r2, #0]
	}
	if(htim -> Instance == TIM4) // timer4
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d107      	bne.n	8000b0c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		time4MsFlag = 1;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
		time4MsCnt++; // 1ms
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b0a:	6013      	str	r3, [r2, #0]
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	200001a8 	.word	0x200001a8
 8000b20:	200001a4 	.word	0x200001a4
 8000b24:	40000800 	.word	0x40000800
 8000b28:	200001ac 	.word	0x200001ac
 8000b2c:	200001b0 	.word	0x200001b0

08000b30 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3) // timer3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d103      	bne.n	8000b4a <HAL_TIM_OC_DelayElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b42:	2120      	movs	r1, #32
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000b46:	f000 fd92 	bl	800166e <HAL_GPIO_TogglePin>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40020000 	.word	0x40020000

08000b5c <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <__io_putchar+0x20>)
 8000b6e:	f002 fa6b 	bl	8003048 <HAL_UART_Transmit>

  return ch;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000015c 	.word	0x2000015c

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f000 fb70 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bfc:	d12c      	bne.n	8000c58 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c46:	2301      	movs	r3, #1
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4820      	ldr	r0, [pc, #128]	@ (8000cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8000c52:	f000 fb6f 	bl	8001334 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c56:	e036      	b.n	8000cc6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xfc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d116      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201d      	movs	r0, #29
 8000c84:	f000 fb1f 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c88:	201d      	movs	r0, #29
 8000c8a:	f000 fb38 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8000c8e:	e01a      	b.n	8000cc6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	@ (8000cdc <HAL_TIM_Base_MspInit+0x100>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d115      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201e      	movs	r0, #30
 8000cbc:	f000 fb03 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f000 fb1c 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	@ 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d1e:	2340      	movs	r3, #64	@ 0x40
 8000d20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <HAL_TIM_MspPostInit+0x70>)
 8000d3a:	f000 fafb 	bl	8001334 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40000400 	.word	0x40000400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dae:	230c      	movs	r3, #12
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_UART_MspInit+0x8c>)
 8000dca:	f000 fab3 	bl	8001334 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f949 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <TIM3_IRQHandler+0x10>)
 8000e4a:	f001 fb27 	bl	800249c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000cc 	.word	0x200000cc

08000e58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <TIM4_IRQHandler+0x10>)
 8000e5e:	f001 fb1d 	bl	800249c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000114 	.word	0x20000114

08000e6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
  }

  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e009      	b.n	8000ecc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe4b 	bl	8000b5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf1      	blt.n	8000eb8 <_write+0x12>
  }
  return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f002 fe7a 	bl	8003c70 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200001b4 	.word	0x200001b4
 8000fb0:	20000308 	.word	0x20000308

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fdc:	f7ff ffea 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	@ (8001018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001006:	f002 fe39 	bl	8003c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff facf 	bl	80005ac <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800101c:	08004788 	.word	0x08004788
  ldr r2, =_sbss
 8001020:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001024:	20000308 	.word	0x20000308

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92b 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fd94 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f943 	bl	800131a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90b 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	@ (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200001b8 	.word	0x200001b8

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200001b8 	.word	0x200001b8

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	@ (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	@ 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e159      	b.n	8001604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	429a      	cmp	r2, r3
 800136a:	f040 8148 	bne.w	80015fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b01      	cmp	r3, #1
 8001378:	d005      	beq.n	8001386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	2b02      	cmp	r3, #2
 8001384:	d130      	bne.n	80013e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 0201 	and.w	r2, r3, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d017      	beq.n	8001424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d123      	bne.n	8001478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	69b9      	ldr	r1, [r7, #24]
 8001474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a2 	beq.w	80015fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b57      	ldr	r3, [pc, #348]	@ (800161c <HAL_GPIO_Init+0x2e8>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a56      	ldr	r2, [pc, #344]	@ (800161c <HAL_GPIO_Init+0x2e8>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b54      	ldr	r3, [pc, #336]	@ (800161c <HAL_GPIO_Init+0x2e8>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d6:	4a52      	ldr	r2, [pc, #328]	@ (8001620 <HAL_GPIO_Init+0x2ec>)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a49      	ldr	r2, [pc, #292]	@ (8001624 <HAL_GPIO_Init+0x2f0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x202>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a48      	ldr	r2, [pc, #288]	@ (8001628 <HAL_GPIO_Init+0x2f4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x1fe>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a47      	ldr	r2, [pc, #284]	@ (800162c <HAL_GPIO_Init+0x2f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x1fa>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a46      	ldr	r2, [pc, #280]	@ (8001630 <HAL_GPIO_Init+0x2fc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x1f6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a45      	ldr	r2, [pc, #276]	@ (8001634 <HAL_GPIO_Init+0x300>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x1f2>
 8001522:	2304      	movs	r3, #4
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001526:	2307      	movs	r3, #7
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x204>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x204>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001536:	2300      	movs	r3, #0
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001548:	4935      	ldr	r1, [pc, #212]	@ (8001620 <HAL_GPIO_Init+0x2ec>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <HAL_GPIO_Init+0x304>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a2f      	ldr	r2, [pc, #188]	@ (8001638 <HAL_GPIO_Init+0x304>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_GPIO_Init+0x304>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <HAL_GPIO_Init+0x304>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <HAL_GPIO_Init+0x304>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001638 <HAL_GPIO_Init+0x304>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_GPIO_Init+0x304>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001638 <HAL_GPIO_Init+0x304>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	f67f aea2 	bls.w	8001350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020800 	.word	0x40020800
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40021000 	.word	0x40021000
 8001638:	40013c00 	.word	0x40013c00

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	041a      	lsls	r2, r3, #16
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43d9      	mvns	r1, r3
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	400b      	ands	r3, r1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e267      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d075      	beq.n	80017ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016c2:	4b88      	ldr	r3, [pc, #544]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d00c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b85      	ldr	r3, [pc, #532]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d112      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b82      	ldr	r3, [pc, #520]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b7e      	ldr	r3, [pc, #504]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05b      	beq.n	80017ac <HAL_RCC_OscConfig+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d157      	bne.n	80017ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e242      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x74>
 800170a:	4b76      	ldr	r3, [pc, #472]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a75      	ldr	r2, [pc, #468]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x98>
 8001722:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6f      	ldr	r2, [pc, #444]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6d      	ldr	r3, [pc, #436]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6c      	ldr	r2, [pc, #432]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 800173c:	4b69      	ldr	r3, [pc, #420]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a68      	ldr	r2, [pc, #416]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b66      	ldr	r3, [pc, #408]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a65      	ldr	r2, [pc, #404]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fccc 	bl	80010f8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fcc8 	bl	80010f8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e207      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5b      	ldr	r3, [pc, #364]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fcb8 	bl	80010f8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fcb4 	bl	80010f8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1f3      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b51      	ldr	r3, [pc, #324]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0xe8>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c7      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4937      	ldr	r1, [pc, #220]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <HAL_RCC_OscConfig+0x244>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fc6d 	bl	80010f8 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fc69 	bl	80010f8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a8      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4925      	ldr	r1, [pc, #148]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_RCC_OscConfig+0x244>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fc4c 	bl	80010f8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc48 	bl	80010f8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e187      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d036      	beq.n	80018fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_RCC_OscConfig+0x248>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fc2c 	bl	80010f8 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc28 	bl	80010f8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e167      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x200>
 80018c2:	e01b      	b.n	80018fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c4:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_OscConfig+0x248>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fc15 	bl	80010f8 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	e00e      	b.n	80018f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff fc11 	bl	80010f8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d907      	bls.n	80018f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e150      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	42470000 	.word	0x42470000
 80018ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4b88      	ldr	r3, [pc, #544]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ea      	bne.n	80018d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8097 	beq.w	8001a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b81      	ldr	r3, [pc, #516]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a7c      	ldr	r2, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b77      	ldr	r3, [pc, #476]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001946:	4b74      	ldr	r3, [pc, #464]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a73      	ldr	r2, [pc, #460]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001952:	f7ff fbd1 	bl	80010f8 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fbcd 	bl	80010f8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e10c      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x2ea>
 8001980:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001984:	4a63      	ldr	r2, [pc, #396]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	@ 0x70
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x324>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x30c>
 8001996:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x324>
 80019b0:	4b58      	ldr	r3, [pc, #352]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a57      	ldr	r2, [pc, #348]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80019bc:	4b55      	ldr	r3, [pc, #340]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c0:	4a54      	ldr	r2, [pc, #336]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb92 	bl	80010f8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff fb8e 	bl	80010f8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0cb      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	4b49      	ldr	r3, [pc, #292]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ee      	beq.n	80019d8 <HAL_RCC_OscConfig+0x334>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fb7c 	bl	80010f8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fb78 	bl	80010f8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0b5      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ee      	bne.n	8001a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a38      	ldr	r2, [pc, #224]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a1 	beq.w	8001b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d05c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d141      	bne.n	8001ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb4c 	bl	80010f8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fb48 	bl	80010f8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e087      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	019b      	lsls	r3, r3, #6
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb21 	bl	80010f8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb1d 	bl	80010f8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e05c      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x416>
 8001ad8:	e054      	b.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb0a 	bl	80010f8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fb06 	bl	80010f8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e045      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x444>
 8001b06:	e03d      	b.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e038      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x4ec>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d121      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa38 	bl	80010f8 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fa34 	bl	80010f8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f998 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	0800472c 	.word	0x0800472c
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d64:	b094      	sub	sp, #80	@ 0x50
 8001d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	4b79      	ldr	r3, [pc, #484]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d00d      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	f200 80e1 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d92:	e0db      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b73      	ldr	r3, [pc, #460]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d98:	e0db      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9a:	4b73      	ldr	r3, [pc, #460]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d9e:	e0d8      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001daa:	4b6d      	ldr	r3, [pc, #436]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	0159      	lsls	r1, r3, #5
 8001de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de4:	0150      	lsls	r0, r2, #5
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4621      	mov	r1, r4
 8001dec:	1a51      	subs	r1, r2, r1
 8001dee:	6139      	str	r1, [r7, #16]
 8001df0:	4629      	mov	r1, r5
 8001df2:	eb63 0301 	sbc.w	r3, r3, r1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e04:	4659      	mov	r1, fp
 8001e06:	018b      	lsls	r3, r1, #6
 8001e08:	4651      	mov	r1, sl
 8001e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e0e:	4651      	mov	r1, sl
 8001e10:	018a      	lsls	r2, r1, #6
 8001e12:	4651      	mov	r1, sl
 8001e14:	ebb2 0801 	subs.w	r8, r2, r1
 8001e18:	4659      	mov	r1, fp
 8001e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e32:	4690      	mov	r8, r2
 8001e34:	4699      	mov	r9, r3
 8001e36:	4623      	mov	r3, r4
 8001e38:	eb18 0303 	adds.w	r3, r8, r3
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	462b      	mov	r3, r5
 8001e40:	eb49 0303 	adc.w	r3, r9, r3
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e52:	4629      	mov	r1, r5
 8001e54:	024b      	lsls	r3, r1, #9
 8001e56:	4621      	mov	r1, r4
 8001e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	024a      	lsls	r2, r1, #9
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e66:	2200      	movs	r2, #0
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e70:	f7fe fa06 	bl	8000280 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e7c:	e058      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	2200      	movs	r2, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	4611      	mov	r1, r2
 8001e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e98:	4642      	mov	r2, r8
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	0159      	lsls	r1, r3, #5
 8001ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eaa:	0150      	lsls	r0, r2, #5
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	00eb      	lsls	r3, r5, #3
 8001ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee6:	00e2      	lsls	r2, r4, #3
 8001ee8:	4614      	mov	r4, r2
 8001eea:	461d      	mov	r5, r3
 8001eec:	4643      	mov	r3, r8
 8001eee:	18e3      	adds	r3, r4, r3
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	eb45 0303 	adc.w	r3, r5, r3
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f06:	4629      	mov	r1, r5
 8001f08:	028b      	lsls	r3, r1, #10
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f10:	4621      	mov	r1, r4
 8001f12:	028a      	lsls	r2, r1, #10
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	61fa      	str	r2, [r7, #28]
 8001f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f24:	f7fe f9ac 	bl	8000280 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3750      	adds	r7, #80	@ 0x50
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	0800473c 	.word	0x0800473c

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	@ (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	0800473c 	.word	0x0800473c

08001fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e041      	b.n	800206a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fdee 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f000 fc74 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e03c      	b.n	8002106 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_TIM_Base_Start+0xa0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d018      	beq.n	80020d0 <HAL_TIM_Base_Start+0x5c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a6:	d013      	beq.n	80020d0 <HAL_TIM_Base_Start+0x5c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_TIM_Base_Start+0xa4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00e      	beq.n	80020d0 <HAL_TIM_Base_Start+0x5c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_TIM_Base_Start+0xa8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_TIM_Base_Start+0x5c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a17      	ldr	r2, [pc, #92]	@ (8002120 <HAL_TIM_Base_Start+0xac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_TIM_Base_Start+0x5c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_TIM_Base_Start+0xb0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d111      	bne.n	80020f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d010      	beq.n	8002104 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	e007      	b.n	8002104 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40014000 	.word	0x40014000

08002128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e044      	b.n	80021ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <HAL_TIM_Base_Start_IT+0xb4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e041      	b.n	8002282 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f839 	bl	800228a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 fb68 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_TIM_OC_Start_IT+0x28>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e022      	b.n	800230e <HAL_TIM_OC_Start_IT+0x6e>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d109      	bne.n	80022e2 <HAL_TIM_OC_Start_IT+0x42>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	bf14      	ite	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	2300      	moveq	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e015      	b.n	800230e <HAL_TIM_OC_Start_IT+0x6e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d109      	bne.n	80022fc <HAL_TIM_OC_Start_IT+0x5c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e008      	b.n	800230e <HAL_TIM_OC_Start_IT+0x6e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0b3      	b.n	800247e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_OC_Start_IT+0x86>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002324:	e013      	b.n	800234e <HAL_TIM_OC_Start_IT+0xae>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_OC_Start_IT+0x96>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002334:	e00b      	b.n	800234e <HAL_TIM_OC_Start_IT+0xae>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_OC_Start_IT+0xa6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002344:	e003      	b.n	800234e <HAL_TIM_OC_Start_IT+0xae>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d841      	bhi.n	80023d8 <HAL_TIM_OC_Start_IT+0x138>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <HAL_TIM_OC_Start_IT+0xbc>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	08002391 	.word	0x08002391
 8002360:	080023d9 	.word	0x080023d9
 8002364:	080023d9 	.word	0x080023d9
 8002368:	080023d9 	.word	0x080023d9
 800236c:	080023a3 	.word	0x080023a3
 8002370:	080023d9 	.word	0x080023d9
 8002374:	080023d9 	.word	0x080023d9
 8002378:	080023d9 	.word	0x080023d9
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023d9 	.word	0x080023d9
 8002384:	080023d9 	.word	0x080023d9
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080023c7 	.word	0x080023c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0202 	orr.w	r2, r2, #2
 800239e:	60da      	str	r2, [r3, #12]
      break;
 80023a0:	e01d      	b.n	80023de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0204 	orr.w	r2, r2, #4
 80023b0:	60da      	str	r2, [r3, #12]
      break;
 80023b2:	e014      	b.n	80023de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0208 	orr.w	r2, r2, #8
 80023c2:	60da      	str	r2, [r3, #12]
      break;
 80023c4:	e00b      	b.n	80023de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0210 	orr.w	r2, r2, #16
 80023d4:	60da      	str	r2, [r3, #12]
      break;
 80023d6:	e002      	b.n	80023de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d14b      	bne.n	800247c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd33 	bl	8002e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a24      	ldr	r2, [pc, #144]	@ (8002488 <HAL_TIM_OC_Start_IT+0x1e8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d107      	bne.n	800240c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800240a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1d      	ldr	r2, [pc, #116]	@ (8002488 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_TIM_OC_Start_IT+0x1a8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241e:	d013      	beq.n	8002448 <HAL_TIM_OC_Start_IT+0x1a8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_TIM_OC_Start_IT+0x1ec>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_TIM_OC_Start_IT+0x1a8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a18      	ldr	r2, [pc, #96]	@ (8002490 <HAL_TIM_OC_Start_IT+0x1f0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_TIM_OC_Start_IT+0x1a8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_TIM_OC_Start_IT+0x1f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_TIM_OC_Start_IT+0x1a8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <HAL_TIM_OC_Start_IT+0x1f8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d111      	bne.n	800246c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b06      	cmp	r3, #6
 8002458:	d010      	beq.n	800247c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	e007      	b.n	800247c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800
 8002494:	40000c00 	.word	0x40000c00
 8002498:	40014000 	.word	0x40014000

0800249c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d020      	beq.n	8002500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0202 	mvn.w	r2, #2
 80024d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9eb 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fb1e 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f9ee 	bl	80028d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0204 	mvn.w	r2, #4
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f9c5 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe faf8 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f9c8 	bl	80028d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0208 	mvn.w	r2, #8
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f99f 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fad2 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9a2 	bl	80028d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0210 	mvn.w	r2, #16
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2208      	movs	r2, #8
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f979 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe faac 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f97c 	bl	80028d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0201 	mvn.w	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fa64 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fcb4 	bl	8002f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f94d 	bl	80028ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fc86 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e048      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0xb0>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d839      	bhi.n	800271c <HAL_TIM_OC_ConfigChannel+0xa0>
 80026a8:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	0800271d 	.word	0x0800271d
 80026b8:	0800271d 	.word	0x0800271d
 80026bc:	0800271d 	.word	0x0800271d
 80026c0:	080026f3 	.word	0x080026f3
 80026c4:	0800271d 	.word	0x0800271d
 80026c8:	0800271d 	.word	0x0800271d
 80026cc:	0800271d 	.word	0x0800271d
 80026d0:	08002701 	.word	0x08002701
 80026d4:	0800271d 	.word	0x0800271d
 80026d8:	0800271d 	.word	0x0800271d
 80026dc:	0800271d 	.word	0x0800271d
 80026e0:	0800270f 	.word	0x0800270f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f98e 	bl	8002a0c <TIM_OC1_SetConfig>
      break;
 80026f0:	e017      	b.n	8002722 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f9ed 	bl	8002ad8 <TIM_OC2_SetConfig>
      break;
 80026fe:	e010      	b.n	8002722 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa52 	bl	8002bb0 <TIM_OC3_SetConfig>
      break;
 800270c:	e009      	b.n	8002722 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fab5 	bl	8002c84 <TIM_OC4_SetConfig>
      break;
 800271a:	e002      	b.n	8002722 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	75fb      	strb	r3, [r7, #23]
      break;
 8002720:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_TIM_ConfigClockSource+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e0b4      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x186>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800276e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002788:	d03e      	beq.n	8002808 <HAL_TIM_ConfigClockSource+0xd4>
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278e:	f200 8087 	bhi.w	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002796:	f000 8086 	beq.w	80028a6 <HAL_TIM_ConfigClockSource+0x172>
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279e:	d87f      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b70      	cmp	r3, #112	@ 0x70
 80027a2:	d01a      	beq.n	80027da <HAL_TIM_ConfigClockSource+0xa6>
 80027a4:	2b70      	cmp	r3, #112	@ 0x70
 80027a6:	d87b      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b60      	cmp	r3, #96	@ 0x60
 80027aa:	d050      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x11a>
 80027ac:	2b60      	cmp	r3, #96	@ 0x60
 80027ae:	d877      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b50      	cmp	r3, #80	@ 0x50
 80027b2:	d03c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0xfa>
 80027b4:	2b50      	cmp	r3, #80	@ 0x50
 80027b6:	d873      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b40      	cmp	r3, #64	@ 0x40
 80027ba:	d058      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x13a>
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d86f      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b30      	cmp	r3, #48	@ 0x30
 80027c2:	d064      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	2b30      	cmp	r3, #48	@ 0x30
 80027c6:	d86b      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d060      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d867      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05c      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d05a      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	e062      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	f000 fb15 	bl	8002e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	609a      	str	r2, [r3, #8]
      break;
 8002806:	e04f      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	f000 fafe 	bl	8002e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800282a:	609a      	str	r2, [r3, #8]
      break;
 800282c:	e03c      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	461a      	mov	r2, r3
 800283c:	f000 fa72 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2150      	movs	r1, #80	@ 0x50
 8002846:	4618      	mov	r0, r3
 8002848:	f000 facb 	bl	8002de2 <TIM_ITRx_SetConfig>
      break;
 800284c:	e02c      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	461a      	mov	r2, r3
 800285c:	f000 fa91 	bl	8002d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2160      	movs	r1, #96	@ 0x60
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fabb 	bl	8002de2 <TIM_ITRx_SetConfig>
      break;
 800286c:	e01c      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	461a      	mov	r2, r3
 800287c:	f000 fa52 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2140      	movs	r1, #64	@ 0x40
 8002886:	4618      	mov	r0, r3
 8002888:	f000 faab 	bl	8002de2 <TIM_ITRx_SetConfig>
      break;
 800288c:	e00c      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f000 faa2 	bl	8002de2 <TIM_ITRx_SetConfig>
      break;
 800289e:	e003      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      break;
 80028a4:	e000      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a37      	ldr	r2, [pc, #220]	@ (80029f0 <TIM_Base_SetConfig+0xf0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00f      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291e:	d00b      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a34      	ldr	r2, [pc, #208]	@ (80029f4 <TIM_Base_SetConfig+0xf4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <TIM_Base_SetConfig+0xf8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a32      	ldr	r2, [pc, #200]	@ (80029fc <TIM_Base_SetConfig+0xfc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d108      	bne.n	800294a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <TIM_Base_SetConfig+0xf0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01b      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002958:	d017      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a25      	ldr	r2, [pc, #148]	@ (80029f4 <TIM_Base_SetConfig+0xf4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a24      	ldr	r2, [pc, #144]	@ (80029f8 <TIM_Base_SetConfig+0xf8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00f      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a23      	ldr	r2, [pc, #140]	@ (80029fc <TIM_Base_SetConfig+0xfc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <TIM_Base_SetConfig+0x100>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a21      	ldr	r2, [pc, #132]	@ (8002a04 <TIM_Base_SetConfig+0x104>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a20      	ldr	r2, [pc, #128]	@ (8002a08 <TIM_Base_SetConfig+0x108>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <TIM_Base_SetConfig+0xf0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d103      	bne.n	80029ca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800

08002a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f023 0201 	bic.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f023 0302 	bic.w	r3, r3, #2
 8002a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <TIM_OC1_SetConfig+0xc8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10c      	bne.n	8002a82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0308 	bic.w	r3, r3, #8
 8002a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <TIM_OC1_SetConfig+0xc8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40010000 	.word	0x40010000

08002ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 0210 	bic.w	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0320 	bic.w	r3, r3, #32
 8002b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <TIM_OC2_SetConfig+0xd4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10d      	bne.n	8002b54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <TIM_OC2_SetConfig+0xd4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d113      	bne.n	8002b84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000

08002bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <TIM_OC3_SetConfig+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10d      	bne.n	8002c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <TIM_OC3_SetConfig+0xd0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d113      	bne.n	8002c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	621a      	str	r2, [r3, #32]
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40010000 	.word	0x40010000

08002c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a10      	ldr	r2, [pc, #64]	@ (8002d20 <TIM_OC4_SetConfig+0x9c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d109      	bne.n	8002cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000

08002d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 030a 	bic.w	r3, r3, #10
 8002d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b087      	sub	sp, #28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f023 0210 	bic.w	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	031b      	lsls	r3, r3, #12
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f043 0307 	orr.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e050      	b.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d018      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f08:	d013      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a16      	ldr	r2, [pc, #88]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40014000 	.word	0x40014000

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e042      	b.n	8003040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fec0 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	@ 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f973 	bl	80032d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	d175      	bne.n	8003154 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Transmit+0x2c>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e06e      	b.n	8003156 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2221      	movs	r2, #33	@ 0x21
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003086:	f7fe f837 	bl	80010f8 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a0:	d108      	bne.n	80030b4 <HAL_UART_Transmit+0x6c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e003      	b.n	80030bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030bc:	e02e      	b.n	800311c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2180      	movs	r1, #128	@ 0x80
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f848 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e03a      	b.n	8003156 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	3302      	adds	r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e007      	b.n	800310e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1cb      	bne.n	80030be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2140      	movs	r1, #64	@ 0x40
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f814 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e006      	b.n	8003156 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	e03b      	b.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d037      	beq.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7fd ffbe 	bl	80010f8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	6a3a      	ldr	r2, [r7, #32]
 8003184:	429a      	cmp	r2, r3
 8003186:	d302      	bcc.n	800318e <UART_WaitOnFlagUntilTimeout+0x30>
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e03a      	b.n	8003208 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b80      	cmp	r3, #128	@ 0x80
 80031a4:	d020      	beq.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d01d      	beq.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d116      	bne.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f81d 	bl	8003210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2208      	movs	r2, #8
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e00f      	b.n	8003208 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4013      	ands	r3, r2
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	429a      	cmp	r2, r3
 8003204:	d0b4      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003210:	b480      	push	{r7}
 8003212:	b095      	sub	sp, #84	@ 0x54
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003238:	643a      	str	r2, [r7, #64]	@ 0x40
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800323e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	61fb      	str	r3, [r7, #28]
   return(result);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800326c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	2b01      	cmp	r3, #1
 8003286:	d119      	bne.n	80032bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60bb      	str	r3, [r7, #8]
   return(result);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a8:	61ba      	str	r2, [r7, #24]
 80032aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6979      	ldr	r1, [r7, #20]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	613b      	str	r3, [r7, #16]
   return(result);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032ca:	bf00      	nop
 80032cc:	3754      	adds	r7, #84	@ 0x54
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b0c0      	sub	sp, #256	@ 0x100
 80032de:	af00      	add	r7, sp, #0
 80032e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	ea40 0301 	orr.w	r3, r0, r1
 8003300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003330:	f021 010c 	bic.w	r1, r1, #12
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800333e:	430b      	orrs	r3, r1
 8003340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003352:	6999      	ldr	r1, [r3, #24]
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	ea40 0301 	orr.w	r3, r0, r1
 800335e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b8f      	ldr	r3, [pc, #572]	@ (80035a4 <UART_SetConfig+0x2cc>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d005      	beq.n	8003378 <UART_SetConfig+0xa0>
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b8d      	ldr	r3, [pc, #564]	@ (80035a8 <UART_SetConfig+0x2d0>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d104      	bne.n	8003382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fe18 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 800337c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003380:	e003      	b.n	800338a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003382:	f7fe fdff 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8003386:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003394:	f040 810c 	bne.w	80035b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	1891      	adds	r1, r2, r2
 80033b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033b2:	415b      	adcs	r3, r3
 80033b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ba:	4621      	mov	r1, r4
 80033bc:	eb12 0801 	adds.w	r8, r2, r1
 80033c0:	4629      	mov	r1, r5
 80033c2:	eb43 0901 	adc.w	r9, r3, r1
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033da:	4690      	mov	r8, r2
 80033dc:	4699      	mov	r9, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	eb18 0303 	adds.w	r3, r8, r3
 80033e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033e8:	462b      	mov	r3, r5
 80033ea:	eb49 0303 	adc.w	r3, r9, r3
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003406:	460b      	mov	r3, r1
 8003408:	18db      	adds	r3, r3, r3
 800340a:	653b      	str	r3, [r7, #80]	@ 0x50
 800340c:	4613      	mov	r3, r2
 800340e:	eb42 0303 	adc.w	r3, r2, r3
 8003412:	657b      	str	r3, [r7, #84]	@ 0x54
 8003414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800341c:	f7fc ff30 	bl	8000280 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <UART_SetConfig+0x2d4>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	011c      	lsls	r4, r3, #4
 800342e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003438:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800343c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	1891      	adds	r1, r2, r2
 8003446:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003448:	415b      	adcs	r3, r3
 800344a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800344c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003450:	4641      	mov	r1, r8
 8003452:	eb12 0a01 	adds.w	sl, r2, r1
 8003456:	4649      	mov	r1, r9
 8003458:	eb43 0b01 	adc.w	fp, r3, r1
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800346c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003470:	4692      	mov	sl, r2
 8003472:	469b      	mov	fp, r3
 8003474:	4643      	mov	r3, r8
 8003476:	eb1a 0303 	adds.w	r3, sl, r3
 800347a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800347e:	464b      	mov	r3, r9
 8003480:	eb4b 0303 	adc.w	r3, fp, r3
 8003484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003494:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800349c:	460b      	mov	r3, r1
 800349e:	18db      	adds	r3, r3, r3
 80034a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034a2:	4613      	mov	r3, r2
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034b2:	f7fc fee5 	bl	8000280 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ac <UART_SetConfig+0x2d4>)
 80034be:	fba3 2301 	umull	r2, r3, r3, r1
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2264      	movs	r2, #100	@ 0x64
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	1acb      	subs	r3, r1, r3
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <UART_SetConfig+0x2d4>)
 80034d4:	fba3 2302 	umull	r2, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034e0:	441c      	add	r4, r3
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034fc:	415b      	adcs	r3, r3
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6339      	str	r1, [r7, #48]	@ 0x30
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003550:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003558:	460b      	mov	r3, r1
 800355a:	18db      	adds	r3, r3, r3
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800355e:	4613      	mov	r3, r2
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800356a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800356e:	f7fc fe87 	bl	8000280 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <UART_SetConfig+0x2d4>)
 8003578:	fba3 1302 	umull	r1, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	2164      	movs	r1, #100	@ 0x64
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	3332      	adds	r3, #50	@ 0x32
 800358a:	4a08      	ldr	r2, [pc, #32]	@ (80035ac <UART_SetConfig+0x2d4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	f003 0207 	and.w	r2, r3, #7
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4422      	add	r2, r4
 800359e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035a0:	e106      	b.n	80037b0 <UART_SetConfig+0x4d8>
 80035a2:	bf00      	nop
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40011400 	.word	0x40011400
 80035ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	6239      	str	r1, [r7, #32]
 80035ca:	415b      	adcs	r3, r3
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035d2:	4641      	mov	r1, r8
 80035d4:	1854      	adds	r4, r2, r1
 80035d6:	4649      	mov	r1, r9
 80035d8:	eb43 0501 	adc.w	r5, r3, r1
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	00eb      	lsls	r3, r5, #3
 80035e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ea:	00e2      	lsls	r2, r4, #3
 80035ec:	4614      	mov	r4, r2
 80035ee:	461d      	mov	r5, r3
 80035f0:	4643      	mov	r3, r8
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035f8:	464b      	mov	r3, r9
 80035fa:	eb45 0303 	adc.w	r3, r5, r3
 80035fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800360e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800361e:	4629      	mov	r1, r5
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003628:	4621      	mov	r1, r4
 800362a:	008a      	lsls	r2, r1, #2
 800362c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003630:	f7fc fe26 	bl	8000280 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4b60      	ldr	r3, [pc, #384]	@ (80037bc <UART_SetConfig+0x4e4>)
 800363a:	fba3 2302 	umull	r2, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	011c      	lsls	r4, r3, #4
 8003642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800364c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	61b9      	str	r1, [r7, #24]
 800365c:	415b      	adcs	r3, r3
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003664:	4641      	mov	r1, r8
 8003666:	1851      	adds	r1, r2, r1
 8003668:	6139      	str	r1, [r7, #16]
 800366a:	4649      	mov	r1, r9
 800366c:	414b      	adcs	r3, r1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800367c:	4659      	mov	r1, fp
 800367e:	00cb      	lsls	r3, r1, #3
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003686:	4651      	mov	r1, sl
 8003688:	00ca      	lsls	r2, r1, #3
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	4603      	mov	r3, r0
 8003690:	4642      	mov	r2, r8
 8003692:	189b      	adds	r3, r3, r2
 8003694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003698:	464b      	mov	r3, r9
 800369a:	460a      	mov	r2, r1
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036bc:	4649      	mov	r1, r9
 80036be:	008b      	lsls	r3, r1, #2
 80036c0:	4641      	mov	r1, r8
 80036c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c6:	4641      	mov	r1, r8
 80036c8:	008a      	lsls	r2, r1, #2
 80036ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036ce:	f7fc fdd7 	bl	8000280 <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	4b38      	ldr	r3, [pc, #224]	@ (80037bc <UART_SetConfig+0x4e4>)
 80036da:	fba3 2301 	umull	r2, r3, r3, r1
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2264      	movs	r2, #100	@ 0x64
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	1acb      	subs	r3, r1, r3
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	3332      	adds	r3, #50	@ 0x32
 80036ec:	4a33      	ldr	r2, [pc, #204]	@ (80037bc <UART_SetConfig+0x4e4>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	673b      	str	r3, [r7, #112]	@ 0x70
 8003702:	677a      	str	r2, [r7, #116]	@ 0x74
 8003704:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	1891      	adds	r1, r2, r2
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	415b      	adcs	r3, r3
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003718:	4641      	mov	r1, r8
 800371a:	1851      	adds	r1, r2, r1
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	4649      	mov	r1, r9
 8003720:	414b      	adcs	r3, r1
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003730:	4659      	mov	r1, fp
 8003732:	00cb      	lsls	r3, r1, #3
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373a:	4651      	mov	r1, sl
 800373c:	00ca      	lsls	r2, r1, #3
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	4603      	mov	r3, r0
 8003744:	4642      	mov	r2, r8
 8003746:	189b      	adds	r3, r3, r2
 8003748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800374a:	464b      	mov	r3, r9
 800374c:	460a      	mov	r2, r1
 800374e:	eb42 0303 	adc.w	r3, r2, r3
 8003752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	663b      	str	r3, [r7, #96]	@ 0x60
 800375e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800376c:	4649      	mov	r1, r9
 800376e:	008b      	lsls	r3, r1, #2
 8003770:	4641      	mov	r1, r8
 8003772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003776:	4641      	mov	r1, r8
 8003778:	008a      	lsls	r2, r1, #2
 800377a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800377e:	f7fc fd7f 	bl	8000280 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <UART_SetConfig+0x4e4>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	@ 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	3332      	adds	r3, #50	@ 0x32
 800379a:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <UART_SetConfig+0x4e4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 020f 	and.w	r2, r3, #15
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4422      	add	r2, r4
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037bc:	51eb851f 	.word	0x51eb851f

080037c0 <std>:
 80037c0:	2300      	movs	r3, #0
 80037c2:	b510      	push	{r4, lr}
 80037c4:	4604      	mov	r4, r0
 80037c6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ce:	6083      	str	r3, [r0, #8]
 80037d0:	8181      	strh	r1, [r0, #12]
 80037d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80037d4:	81c2      	strh	r2, [r0, #14]
 80037d6:	6183      	str	r3, [r0, #24]
 80037d8:	4619      	mov	r1, r3
 80037da:	2208      	movs	r2, #8
 80037dc:	305c      	adds	r0, #92	@ 0x5c
 80037de:	f000 f9f9 	bl	8003bd4 <memset>
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <std+0x58>)
 80037e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <std+0x5c>)
 80037e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <std+0x60>)
 80037ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <std+0x64>)
 80037f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <std+0x68>)
 80037f4:	6224      	str	r4, [r4, #32]
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d006      	beq.n	8003808 <std+0x48>
 80037fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037fe:	4294      	cmp	r4, r2
 8003800:	d002      	beq.n	8003808 <std+0x48>
 8003802:	33d0      	adds	r3, #208	@ 0xd0
 8003804:	429c      	cmp	r4, r3
 8003806:	d105      	bne.n	8003814 <std+0x54>
 8003808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003810:	f000 ba58 	b.w	8003cc4 <__retarget_lock_init_recursive>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	08003a25 	.word	0x08003a25
 800381c:	08003a47 	.word	0x08003a47
 8003820:	08003a7f 	.word	0x08003a7f
 8003824:	08003aa3 	.word	0x08003aa3
 8003828:	200001bc 	.word	0x200001bc

0800382c <stdio_exit_handler>:
 800382c:	4a02      	ldr	r2, [pc, #8]	@ (8003838 <stdio_exit_handler+0xc>)
 800382e:	4903      	ldr	r1, [pc, #12]	@ (800383c <stdio_exit_handler+0x10>)
 8003830:	4803      	ldr	r0, [pc, #12]	@ (8003840 <stdio_exit_handler+0x14>)
 8003832:	f000 b869 	b.w	8003908 <_fwalk_sglue>
 8003836:	bf00      	nop
 8003838:	2000000c 	.word	0x2000000c
 800383c:	08004561 	.word	0x08004561
 8003840:	2000001c 	.word	0x2000001c

08003844 <cleanup_stdio>:
 8003844:	6841      	ldr	r1, [r0, #4]
 8003846:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <cleanup_stdio+0x34>)
 8003848:	4299      	cmp	r1, r3
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	d001      	beq.n	8003854 <cleanup_stdio+0x10>
 8003850:	f000 fe86 	bl	8004560 <_fflush_r>
 8003854:	68a1      	ldr	r1, [r4, #8]
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <cleanup_stdio+0x38>)
 8003858:	4299      	cmp	r1, r3
 800385a:	d002      	beq.n	8003862 <cleanup_stdio+0x1e>
 800385c:	4620      	mov	r0, r4
 800385e:	f000 fe7f 	bl	8004560 <_fflush_r>
 8003862:	68e1      	ldr	r1, [r4, #12]
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <cleanup_stdio+0x3c>)
 8003866:	4299      	cmp	r1, r3
 8003868:	d004      	beq.n	8003874 <cleanup_stdio+0x30>
 800386a:	4620      	mov	r0, r4
 800386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003870:	f000 be76 	b.w	8004560 <_fflush_r>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	bf00      	nop
 8003878:	200001bc 	.word	0x200001bc
 800387c:	20000224 	.word	0x20000224
 8003880:	2000028c 	.word	0x2000028c

08003884 <global_stdio_init.part.0>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <global_stdio_init.part.0+0x30>)
 8003888:	4c0b      	ldr	r4, [pc, #44]	@ (80038b8 <global_stdio_init.part.0+0x34>)
 800388a:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <global_stdio_init.part.0+0x38>)
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4620      	mov	r0, r4
 8003890:	2200      	movs	r2, #0
 8003892:	2104      	movs	r1, #4
 8003894:	f7ff ff94 	bl	80037c0 <std>
 8003898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800389c:	2201      	movs	r2, #1
 800389e:	2109      	movs	r1, #9
 80038a0:	f7ff ff8e 	bl	80037c0 <std>
 80038a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038a8:	2202      	movs	r2, #2
 80038aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ae:	2112      	movs	r1, #18
 80038b0:	f7ff bf86 	b.w	80037c0 <std>
 80038b4:	200002f4 	.word	0x200002f4
 80038b8:	200001bc 	.word	0x200001bc
 80038bc:	0800382d 	.word	0x0800382d

080038c0 <__sfp_lock_acquire>:
 80038c0:	4801      	ldr	r0, [pc, #4]	@ (80038c8 <__sfp_lock_acquire+0x8>)
 80038c2:	f000 ba00 	b.w	8003cc6 <__retarget_lock_acquire_recursive>
 80038c6:	bf00      	nop
 80038c8:	200002fd 	.word	0x200002fd

080038cc <__sfp_lock_release>:
 80038cc:	4801      	ldr	r0, [pc, #4]	@ (80038d4 <__sfp_lock_release+0x8>)
 80038ce:	f000 b9fb 	b.w	8003cc8 <__retarget_lock_release_recursive>
 80038d2:	bf00      	nop
 80038d4:	200002fd 	.word	0x200002fd

080038d8 <__sinit>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	4604      	mov	r4, r0
 80038dc:	f7ff fff0 	bl	80038c0 <__sfp_lock_acquire>
 80038e0:	6a23      	ldr	r3, [r4, #32]
 80038e2:	b11b      	cbz	r3, 80038ec <__sinit+0x14>
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f7ff bff0 	b.w	80038cc <__sfp_lock_release>
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__sinit+0x28>)
 80038ee:	6223      	str	r3, [r4, #32]
 80038f0:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <__sinit+0x2c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f5      	bne.n	80038e4 <__sinit+0xc>
 80038f8:	f7ff ffc4 	bl	8003884 <global_stdio_init.part.0>
 80038fc:	e7f2      	b.n	80038e4 <__sinit+0xc>
 80038fe:	bf00      	nop
 8003900:	08003845 	.word	0x08003845
 8003904:	200002f4 	.word	0x200002f4

08003908 <_fwalk_sglue>:
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	4607      	mov	r7, r0
 800390e:	4688      	mov	r8, r1
 8003910:	4614      	mov	r4, r2
 8003912:	2600      	movs	r6, #0
 8003914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003918:	f1b9 0901 	subs.w	r9, r9, #1
 800391c:	d505      	bpl.n	800392a <_fwalk_sglue+0x22>
 800391e:	6824      	ldr	r4, [r4, #0]
 8003920:	2c00      	cmp	r4, #0
 8003922:	d1f7      	bne.n	8003914 <_fwalk_sglue+0xc>
 8003924:	4630      	mov	r0, r6
 8003926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392a:	89ab      	ldrh	r3, [r5, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d907      	bls.n	8003940 <_fwalk_sglue+0x38>
 8003930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003934:	3301      	adds	r3, #1
 8003936:	d003      	beq.n	8003940 <_fwalk_sglue+0x38>
 8003938:	4629      	mov	r1, r5
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	4306      	orrs	r6, r0
 8003940:	3568      	adds	r5, #104	@ 0x68
 8003942:	e7e9      	b.n	8003918 <_fwalk_sglue+0x10>

08003944 <iprintf>:
 8003944:	b40f      	push	{r0, r1, r2, r3}
 8003946:	b507      	push	{r0, r1, r2, lr}
 8003948:	4906      	ldr	r1, [pc, #24]	@ (8003964 <iprintf+0x20>)
 800394a:	ab04      	add	r3, sp, #16
 800394c:	6808      	ldr	r0, [r1, #0]
 800394e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003952:	6881      	ldr	r1, [r0, #8]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	f000 fadb 	bl	8003f10 <_vfiprintf_r>
 800395a:	b003      	add	sp, #12
 800395c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003960:	b004      	add	sp, #16
 8003962:	4770      	bx	lr
 8003964:	20000018 	.word	0x20000018

08003968 <_puts_r>:
 8003968:	6a03      	ldr	r3, [r0, #32]
 800396a:	b570      	push	{r4, r5, r6, lr}
 800396c:	6884      	ldr	r4, [r0, #8]
 800396e:	4605      	mov	r5, r0
 8003970:	460e      	mov	r6, r1
 8003972:	b90b      	cbnz	r3, 8003978 <_puts_r+0x10>
 8003974:	f7ff ffb0 	bl	80038d8 <__sinit>
 8003978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800397a:	07db      	lsls	r3, r3, #31
 800397c:	d405      	bmi.n	800398a <_puts_r+0x22>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	0598      	lsls	r0, r3, #22
 8003982:	d402      	bmi.n	800398a <_puts_r+0x22>
 8003984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003986:	f000 f99e 	bl	8003cc6 <__retarget_lock_acquire_recursive>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	0719      	lsls	r1, r3, #28
 800398e:	d502      	bpl.n	8003996 <_puts_r+0x2e>
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d135      	bne.n	8003a02 <_puts_r+0x9a>
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f8c5 	bl	8003b28 <__swsetup_r>
 800399e:	b380      	cbz	r0, 8003a02 <_puts_r+0x9a>
 80039a0:	f04f 35ff 	mov.w	r5, #4294967295
 80039a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a6:	07da      	lsls	r2, r3, #31
 80039a8:	d405      	bmi.n	80039b6 <_puts_r+0x4e>
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	059b      	lsls	r3, r3, #22
 80039ae:	d402      	bmi.n	80039b6 <_puts_r+0x4e>
 80039b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039b2:	f000 f989 	bl	8003cc8 <__retarget_lock_release_recursive>
 80039b6:	4628      	mov	r0, r5
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da04      	bge.n	80039c8 <_puts_r+0x60>
 80039be:	69a2      	ldr	r2, [r4, #24]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dc17      	bgt.n	80039f4 <_puts_r+0x8c>
 80039c4:	290a      	cmp	r1, #10
 80039c6:	d015      	beq.n	80039f4 <_puts_r+0x8c>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	6022      	str	r2, [r4, #0]
 80039ce:	7019      	strb	r1, [r3, #0]
 80039d0:	68a3      	ldr	r3, [r4, #8]
 80039d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039d6:	3b01      	subs	r3, #1
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	2900      	cmp	r1, #0
 80039dc:	d1ed      	bne.n	80039ba <_puts_r+0x52>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da11      	bge.n	8003a06 <_puts_r+0x9e>
 80039e2:	4622      	mov	r2, r4
 80039e4:	210a      	movs	r1, #10
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f85f 	bl	8003aaa <__swbuf_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0d7      	beq.n	80039a0 <_puts_r+0x38>
 80039f0:	250a      	movs	r5, #10
 80039f2:	e7d7      	b.n	80039a4 <_puts_r+0x3c>
 80039f4:	4622      	mov	r2, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 f857 	bl	8003aaa <__swbuf_r>
 80039fc:	3001      	adds	r0, #1
 80039fe:	d1e7      	bne.n	80039d0 <_puts_r+0x68>
 8003a00:	e7ce      	b.n	80039a0 <_puts_r+0x38>
 8003a02:	3e01      	subs	r6, #1
 8003a04:	e7e4      	b.n	80039d0 <_puts_r+0x68>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e7ee      	b.n	80039f0 <_puts_r+0x88>
	...

08003a14 <puts>:
 8003a14:	4b02      	ldr	r3, [pc, #8]	@ (8003a20 <puts+0xc>)
 8003a16:	4601      	mov	r1, r0
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f7ff bfa5 	b.w	8003968 <_puts_r>
 8003a1e:	bf00      	nop
 8003a20:	20000018 	.word	0x20000018

08003a24 <__sread>:
 8003a24:	b510      	push	{r4, lr}
 8003a26:	460c      	mov	r4, r1
 8003a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2c:	f000 f8fc 	bl	8003c28 <_read_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	bfab      	itete	ge
 8003a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a36:	89a3      	ldrhlt	r3, [r4, #12]
 8003a38:	181b      	addge	r3, r3, r0
 8003a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a3e:	bfac      	ite	ge
 8003a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a42:	81a3      	strhlt	r3, [r4, #12]
 8003a44:	bd10      	pop	{r4, pc}

08003a46 <__swrite>:
 8003a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	461f      	mov	r7, r3
 8003a4c:	898b      	ldrh	r3, [r1, #12]
 8003a4e:	05db      	lsls	r3, r3, #23
 8003a50:	4605      	mov	r5, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	4616      	mov	r6, r2
 8003a56:	d505      	bpl.n	8003a64 <__swrite+0x1e>
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f000 f8d0 	bl	8003c04 <_lseek_r>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	4628      	mov	r0, r5
 8003a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7a:	f000 b8e7 	b.w	8003c4c <_write_r>

08003a7e <__sseek>:
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	460c      	mov	r4, r1
 8003a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a86:	f000 f8bd 	bl	8003c04 <_lseek_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	bf15      	itete	ne
 8003a90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a9a:	81a3      	strheq	r3, [r4, #12]
 8003a9c:	bf18      	it	ne
 8003a9e:	81a3      	strhne	r3, [r4, #12]
 8003aa0:	bd10      	pop	{r4, pc}

08003aa2 <__sclose>:
 8003aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa6:	f000 b89d 	b.w	8003be4 <_close_r>

08003aaa <__swbuf_r>:
 8003aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aac:	460e      	mov	r6, r1
 8003aae:	4614      	mov	r4, r2
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b118      	cbz	r0, 8003abc <__swbuf_r+0x12>
 8003ab4:	6a03      	ldr	r3, [r0, #32]
 8003ab6:	b90b      	cbnz	r3, 8003abc <__swbuf_r+0x12>
 8003ab8:	f7ff ff0e 	bl	80038d8 <__sinit>
 8003abc:	69a3      	ldr	r3, [r4, #24]
 8003abe:	60a3      	str	r3, [r4, #8]
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	071a      	lsls	r2, r3, #28
 8003ac4:	d501      	bpl.n	8003aca <__swbuf_r+0x20>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	b943      	cbnz	r3, 8003adc <__swbuf_r+0x32>
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 f82b 	bl	8003b28 <__swsetup_r>
 8003ad2:	b118      	cbz	r0, 8003adc <__swbuf_r+0x32>
 8003ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ad8:	4638      	mov	r0, r7
 8003ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	6922      	ldr	r2, [r4, #16]
 8003ae0:	1a98      	subs	r0, r3, r2
 8003ae2:	6963      	ldr	r3, [r4, #20]
 8003ae4:	b2f6      	uxtb	r6, r6
 8003ae6:	4283      	cmp	r3, r0
 8003ae8:	4637      	mov	r7, r6
 8003aea:	dc05      	bgt.n	8003af8 <__swbuf_r+0x4e>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 fd36 	bl	8004560 <_fflush_r>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d1ed      	bne.n	8003ad4 <__swbuf_r+0x2a>
 8003af8:	68a3      	ldr	r3, [r4, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	60a3      	str	r3, [r4, #8]
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	701e      	strb	r6, [r3, #0]
 8003b06:	6962      	ldr	r2, [r4, #20]
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d004      	beq.n	8003b18 <__swbuf_r+0x6e>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	07db      	lsls	r3, r3, #31
 8003b12:	d5e1      	bpl.n	8003ad8 <__swbuf_r+0x2e>
 8003b14:	2e0a      	cmp	r6, #10
 8003b16:	d1df      	bne.n	8003ad8 <__swbuf_r+0x2e>
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 fd20 	bl	8004560 <_fflush_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d0d9      	beq.n	8003ad8 <__swbuf_r+0x2e>
 8003b24:	e7d6      	b.n	8003ad4 <__swbuf_r+0x2a>
	...

08003b28 <__swsetup_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4b29      	ldr	r3, [pc, #164]	@ (8003bd0 <__swsetup_r+0xa8>)
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	460c      	mov	r4, r1
 8003b32:	b118      	cbz	r0, 8003b3c <__swsetup_r+0x14>
 8003b34:	6a03      	ldr	r3, [r0, #32]
 8003b36:	b90b      	cbnz	r3, 8003b3c <__swsetup_r+0x14>
 8003b38:	f7ff fece 	bl	80038d8 <__sinit>
 8003b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b40:	0719      	lsls	r1, r3, #28
 8003b42:	d422      	bmi.n	8003b8a <__swsetup_r+0x62>
 8003b44:	06da      	lsls	r2, r3, #27
 8003b46:	d407      	bmi.n	8003b58 <__swsetup_r+0x30>
 8003b48:	2209      	movs	r2, #9
 8003b4a:	602a      	str	r2, [r5, #0]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	e033      	b.n	8003bc0 <__swsetup_r+0x98>
 8003b58:	0758      	lsls	r0, r3, #29
 8003b5a:	d512      	bpl.n	8003b82 <__swsetup_r+0x5a>
 8003b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b5e:	b141      	cbz	r1, 8003b72 <__swsetup_r+0x4a>
 8003b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d002      	beq.n	8003b6e <__swsetup_r+0x46>
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 f8af 	bl	8003ccc <_free_r>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	b94b      	cbnz	r3, 8003ba2 <__swsetup_r+0x7a>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b98:	d003      	beq.n	8003ba2 <__swsetup_r+0x7a>
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f000 fd2d 	bl	80045fc <__smakebuf_r>
 8003ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba6:	f013 0201 	ands.w	r2, r3, #1
 8003baa:	d00a      	beq.n	8003bc2 <__swsetup_r+0x9a>
 8003bac:	2200      	movs	r2, #0
 8003bae:	60a2      	str	r2, [r4, #8]
 8003bb0:	6962      	ldr	r2, [r4, #20]
 8003bb2:	4252      	negs	r2, r2
 8003bb4:	61a2      	str	r2, [r4, #24]
 8003bb6:	6922      	ldr	r2, [r4, #16]
 8003bb8:	b942      	cbnz	r2, 8003bcc <__swsetup_r+0xa4>
 8003bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bbe:	d1c5      	bne.n	8003b4c <__swsetup_r+0x24>
 8003bc0:	bd38      	pop	{r3, r4, r5, pc}
 8003bc2:	0799      	lsls	r1, r3, #30
 8003bc4:	bf58      	it	pl
 8003bc6:	6962      	ldrpl	r2, [r4, #20]
 8003bc8:	60a2      	str	r2, [r4, #8]
 8003bca:	e7f4      	b.n	8003bb6 <__swsetup_r+0x8e>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e7f7      	b.n	8003bc0 <__swsetup_r+0x98>
 8003bd0:	20000018 	.word	0x20000018

08003bd4 <memset>:
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <_close_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d06      	ldr	r5, [pc, #24]	@ (8003c00 <_close_r+0x1c>)
 8003be8:	2300      	movs	r3, #0
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7fd f975 	bl	8000ede <_close>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_close_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_close_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	200002f8 	.word	0x200002f8

08003c04 <_lseek_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	@ (8003c24 <_lseek_r+0x20>)
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7fd f98a 	bl	8000f2c <_lseek>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_lseek_r+0x1e>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_lseek_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	200002f8 	.word	0x200002f8

08003c28 <_read_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4d07      	ldr	r5, [pc, #28]	@ (8003c48 <_read_r+0x20>)
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	4608      	mov	r0, r1
 8003c30:	4611      	mov	r1, r2
 8003c32:	2200      	movs	r2, #0
 8003c34:	602a      	str	r2, [r5, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f7fd f918 	bl	8000e6c <_read>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_read_r+0x1e>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_read_r+0x1e>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	200002f8 	.word	0x200002f8

08003c4c <_write_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4d07      	ldr	r5, [pc, #28]	@ (8003c6c <_write_r+0x20>)
 8003c50:	4604      	mov	r4, r0
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	602a      	str	r2, [r5, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f7fd f923 	bl	8000ea6 <_write>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_write_r+0x1e>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_write_r+0x1e>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	200002f8 	.word	0x200002f8

08003c70 <__errno>:
 8003c70:	4b01      	ldr	r3, [pc, #4]	@ (8003c78 <__errno+0x8>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000018 	.word	0x20000018

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cb4 <__libc_init_array+0x38>)
 8003c80:	4c0d      	ldr	r4, [pc, #52]	@ (8003cb8 <__libc_init_array+0x3c>)
 8003c82:	1b64      	subs	r4, r4, r5
 8003c84:	10a4      	asrs	r4, r4, #2
 8003c86:	2600      	movs	r6, #0
 8003c88:	42a6      	cmp	r6, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003cbc <__libc_init_array+0x40>)
 8003c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003cc0 <__libc_init_array+0x44>)
 8003c90:	f000 fd22 	bl	80046d8 <_init>
 8003c94:	1b64      	subs	r4, r4, r5
 8003c96:	10a4      	asrs	r4, r4, #2
 8003c98:	2600      	movs	r6, #0
 8003c9a:	42a6      	cmp	r6, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca4:	4798      	blx	r3
 8003ca6:	3601      	adds	r6, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cae:	4798      	blx	r3
 8003cb0:	3601      	adds	r6, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	08004780 	.word	0x08004780
 8003cb8:	08004780 	.word	0x08004780
 8003cbc:	08004780 	.word	0x08004780
 8003cc0:	08004784 	.word	0x08004784

08003cc4 <__retarget_lock_init_recursive>:
 8003cc4:	4770      	bx	lr

08003cc6 <__retarget_lock_acquire_recursive>:
 8003cc6:	4770      	bx	lr

08003cc8 <__retarget_lock_release_recursive>:
 8003cc8:	4770      	bx	lr
	...

08003ccc <_free_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4605      	mov	r5, r0
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d041      	beq.n	8003d58 <_free_r+0x8c>
 8003cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd8:	1f0c      	subs	r4, r1, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bfb8      	it	lt
 8003cde:	18e4      	addlt	r4, r4, r3
 8003ce0:	f000 f8e0 	bl	8003ea4 <__malloc_lock>
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <_free_r+0x90>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	b933      	cbnz	r3, 8003cf8 <_free_r+0x2c>
 8003cea:	6063      	str	r3, [r4, #4]
 8003cec:	6014      	str	r4, [r2, #0]
 8003cee:	4628      	mov	r0, r5
 8003cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cf4:	f000 b8dc 	b.w	8003eb0 <__malloc_unlock>
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d908      	bls.n	8003d0e <_free_r+0x42>
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	1821      	adds	r1, r4, r0
 8003d00:	428b      	cmp	r3, r1
 8003d02:	bf01      	itttt	eq
 8003d04:	6819      	ldreq	r1, [r3, #0]
 8003d06:	685b      	ldreq	r3, [r3, #4]
 8003d08:	1809      	addeq	r1, r1, r0
 8003d0a:	6021      	streq	r1, [r4, #0]
 8003d0c:	e7ed      	b.n	8003cea <_free_r+0x1e>
 8003d0e:	461a      	mov	r2, r3
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b10b      	cbz	r3, 8003d18 <_free_r+0x4c>
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	d9fa      	bls.n	8003d0e <_free_r+0x42>
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	1850      	adds	r0, r2, r1
 8003d1c:	42a0      	cmp	r0, r4
 8003d1e:	d10b      	bne.n	8003d38 <_free_r+0x6c>
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	4401      	add	r1, r0
 8003d24:	1850      	adds	r0, r2, r1
 8003d26:	4283      	cmp	r3, r0
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	d1e0      	bne.n	8003cee <_free_r+0x22>
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	6053      	str	r3, [r2, #4]
 8003d32:	4408      	add	r0, r1
 8003d34:	6010      	str	r0, [r2, #0]
 8003d36:	e7da      	b.n	8003cee <_free_r+0x22>
 8003d38:	d902      	bls.n	8003d40 <_free_r+0x74>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	e7d6      	b.n	8003cee <_free_r+0x22>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	1821      	adds	r1, r4, r0
 8003d44:	428b      	cmp	r3, r1
 8003d46:	bf04      	itt	eq
 8003d48:	6819      	ldreq	r1, [r3, #0]
 8003d4a:	685b      	ldreq	r3, [r3, #4]
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	bf04      	itt	eq
 8003d50:	1809      	addeq	r1, r1, r0
 8003d52:	6021      	streq	r1, [r4, #0]
 8003d54:	6054      	str	r4, [r2, #4]
 8003d56:	e7ca      	b.n	8003cee <_free_r+0x22>
 8003d58:	bd38      	pop	{r3, r4, r5, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000304 	.word	0x20000304

08003d60 <sbrk_aligned>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4e0f      	ldr	r6, [pc, #60]	@ (8003da0 <sbrk_aligned+0x40>)
 8003d64:	460c      	mov	r4, r1
 8003d66:	6831      	ldr	r1, [r6, #0]
 8003d68:	4605      	mov	r5, r0
 8003d6a:	b911      	cbnz	r1, 8003d72 <sbrk_aligned+0x12>
 8003d6c:	f000 fca4 	bl	80046b8 <_sbrk_r>
 8003d70:	6030      	str	r0, [r6, #0]
 8003d72:	4621      	mov	r1, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 fc9f 	bl	80046b8 <_sbrk_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d103      	bne.n	8003d86 <sbrk_aligned+0x26>
 8003d7e:	f04f 34ff 	mov.w	r4, #4294967295
 8003d82:	4620      	mov	r0, r4
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
 8003d86:	1cc4      	adds	r4, r0, #3
 8003d88:	f024 0403 	bic.w	r4, r4, #3
 8003d8c:	42a0      	cmp	r0, r4
 8003d8e:	d0f8      	beq.n	8003d82 <sbrk_aligned+0x22>
 8003d90:	1a21      	subs	r1, r4, r0
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 fc90 	bl	80046b8 <_sbrk_r>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d1f2      	bne.n	8003d82 <sbrk_aligned+0x22>
 8003d9c:	e7ef      	b.n	8003d7e <sbrk_aligned+0x1e>
 8003d9e:	bf00      	nop
 8003da0:	20000300 	.word	0x20000300

08003da4 <_malloc_r>:
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da8:	1ccd      	adds	r5, r1, #3
 8003daa:	f025 0503 	bic.w	r5, r5, #3
 8003dae:	3508      	adds	r5, #8
 8003db0:	2d0c      	cmp	r5, #12
 8003db2:	bf38      	it	cc
 8003db4:	250c      	movcc	r5, #12
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	4606      	mov	r6, r0
 8003dba:	db01      	blt.n	8003dc0 <_malloc_r+0x1c>
 8003dbc:	42a9      	cmp	r1, r5
 8003dbe:	d904      	bls.n	8003dca <_malloc_r+0x26>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ea0 <_malloc_r+0xfc>
 8003dce:	f000 f869 	bl	8003ea4 <__malloc_lock>
 8003dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	bb44      	cbnz	r4, 8003e2c <_malloc_r+0x88>
 8003dda:	4629      	mov	r1, r5
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f7ff ffbf 	bl	8003d60 <sbrk_aligned>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	4604      	mov	r4, r0
 8003de6:	d158      	bne.n	8003e9a <_malloc_r+0xf6>
 8003de8:	f8d8 4000 	ldr.w	r4, [r8]
 8003dec:	4627      	mov	r7, r4
 8003dee:	2f00      	cmp	r7, #0
 8003df0:	d143      	bne.n	8003e7a <_malloc_r+0xd6>
 8003df2:	2c00      	cmp	r4, #0
 8003df4:	d04b      	beq.n	8003e8e <_malloc_r+0xea>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	4639      	mov	r1, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	eb04 0903 	add.w	r9, r4, r3
 8003e00:	f000 fc5a 	bl	80046b8 <_sbrk_r>
 8003e04:	4581      	cmp	r9, r0
 8003e06:	d142      	bne.n	8003e8e <_malloc_r+0xea>
 8003e08:	6821      	ldr	r1, [r4, #0]
 8003e0a:	1a6d      	subs	r5, r5, r1
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f7ff ffa6 	bl	8003d60 <sbrk_aligned>
 8003e14:	3001      	adds	r0, #1
 8003e16:	d03a      	beq.n	8003e8e <_malloc_r+0xea>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	442b      	add	r3, r5
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	bb62      	cbnz	r2, 8003e80 <_malloc_r+0xdc>
 8003e26:	f8c8 7000 	str.w	r7, [r8]
 8003e2a:	e00f      	b.n	8003e4c <_malloc_r+0xa8>
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	1b52      	subs	r2, r2, r5
 8003e30:	d420      	bmi.n	8003e74 <_malloc_r+0xd0>
 8003e32:	2a0b      	cmp	r2, #11
 8003e34:	d917      	bls.n	8003e66 <_malloc_r+0xc2>
 8003e36:	1961      	adds	r1, r4, r5
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	6025      	str	r5, [r4, #0]
 8003e3c:	bf18      	it	ne
 8003e3e:	6059      	strne	r1, [r3, #4]
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	bf08      	it	eq
 8003e44:	f8c8 1000 	streq.w	r1, [r8]
 8003e48:	5162      	str	r2, [r4, r5]
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f82f 	bl	8003eb0 <__malloc_unlock>
 8003e52:	f104 000b 	add.w	r0, r4, #11
 8003e56:	1d23      	adds	r3, r4, #4
 8003e58:	f020 0007 	bic.w	r0, r0, #7
 8003e5c:	1ac2      	subs	r2, r0, r3
 8003e5e:	bf1c      	itt	ne
 8003e60:	1a1b      	subne	r3, r3, r0
 8003e62:	50a3      	strne	r3, [r4, r2]
 8003e64:	e7af      	b.n	8003dc6 <_malloc_r+0x22>
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	bf0c      	ite	eq
 8003e6c:	f8c8 2000 	streq.w	r2, [r8]
 8003e70:	605a      	strne	r2, [r3, #4]
 8003e72:	e7eb      	b.n	8003e4c <_malloc_r+0xa8>
 8003e74:	4623      	mov	r3, r4
 8003e76:	6864      	ldr	r4, [r4, #4]
 8003e78:	e7ae      	b.n	8003dd8 <_malloc_r+0x34>
 8003e7a:	463c      	mov	r4, r7
 8003e7c:	687f      	ldr	r7, [r7, #4]
 8003e7e:	e7b6      	b.n	8003dee <_malloc_r+0x4a>
 8003e80:	461a      	mov	r2, r3
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d1fb      	bne.n	8003e80 <_malloc_r+0xdc>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6053      	str	r3, [r2, #4]
 8003e8c:	e7de      	b.n	8003e4c <_malloc_r+0xa8>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	6033      	str	r3, [r6, #0]
 8003e92:	4630      	mov	r0, r6
 8003e94:	f000 f80c 	bl	8003eb0 <__malloc_unlock>
 8003e98:	e794      	b.n	8003dc4 <_malloc_r+0x20>
 8003e9a:	6005      	str	r5, [r0, #0]
 8003e9c:	e7d6      	b.n	8003e4c <_malloc_r+0xa8>
 8003e9e:	bf00      	nop
 8003ea0:	20000304 	.word	0x20000304

08003ea4 <__malloc_lock>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	@ (8003eac <__malloc_lock+0x8>)
 8003ea6:	f7ff bf0e 	b.w	8003cc6 <__retarget_lock_acquire_recursive>
 8003eaa:	bf00      	nop
 8003eac:	200002fc 	.word	0x200002fc

08003eb0 <__malloc_unlock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	@ (8003eb8 <__malloc_unlock+0x8>)
 8003eb2:	f7ff bf09 	b.w	8003cc8 <__retarget_lock_release_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	200002fc 	.word	0x200002fc

08003ebc <__sfputc_r>:
 8003ebc:	6893      	ldr	r3, [r2, #8]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	b410      	push	{r4}
 8003ec4:	6093      	str	r3, [r2, #8]
 8003ec6:	da08      	bge.n	8003eda <__sfputc_r+0x1e>
 8003ec8:	6994      	ldr	r4, [r2, #24]
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	db01      	blt.n	8003ed2 <__sfputc_r+0x16>
 8003ece:	290a      	cmp	r1, #10
 8003ed0:	d103      	bne.n	8003eda <__sfputc_r+0x1e>
 8003ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ed6:	f7ff bde8 	b.w	8003aaa <__swbuf_r>
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	1c58      	adds	r0, r3, #1
 8003ede:	6010      	str	r0, [r2, #0]
 8003ee0:	7019      	strb	r1, [r3, #0]
 8003ee2:	4608      	mov	r0, r1
 8003ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <__sfputs_r>:
 8003eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eec:	4606      	mov	r6, r0
 8003eee:	460f      	mov	r7, r1
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	18d5      	adds	r5, r2, r3
 8003ef4:	42ac      	cmp	r4, r5
 8003ef6:	d101      	bne.n	8003efc <__sfputs_r+0x12>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e007      	b.n	8003f0c <__sfputs_r+0x22>
 8003efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f00:	463a      	mov	r2, r7
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff ffda 	bl	8003ebc <__sfputc_r>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d1f3      	bne.n	8003ef4 <__sfputs_r+0xa>
 8003f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f10 <_vfiprintf_r>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	460d      	mov	r5, r1
 8003f16:	b09d      	sub	sp, #116	@ 0x74
 8003f18:	4614      	mov	r4, r2
 8003f1a:	4698      	mov	r8, r3
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	b118      	cbz	r0, 8003f28 <_vfiprintf_r+0x18>
 8003f20:	6a03      	ldr	r3, [r0, #32]
 8003f22:	b90b      	cbnz	r3, 8003f28 <_vfiprintf_r+0x18>
 8003f24:	f7ff fcd8 	bl	80038d8 <__sinit>
 8003f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f2a:	07d9      	lsls	r1, r3, #31
 8003f2c:	d405      	bmi.n	8003f3a <_vfiprintf_r+0x2a>
 8003f2e:	89ab      	ldrh	r3, [r5, #12]
 8003f30:	059a      	lsls	r2, r3, #22
 8003f32:	d402      	bmi.n	8003f3a <_vfiprintf_r+0x2a>
 8003f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f36:	f7ff fec6 	bl	8003cc6 <__retarget_lock_acquire_recursive>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	d501      	bpl.n	8003f44 <_vfiprintf_r+0x34>
 8003f40:	692b      	ldr	r3, [r5, #16]
 8003f42:	b99b      	cbnz	r3, 8003f6c <_vfiprintf_r+0x5c>
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff fdee 	bl	8003b28 <__swsetup_r>
 8003f4c:	b170      	cbz	r0, 8003f6c <_vfiprintf_r+0x5c>
 8003f4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f50:	07dc      	lsls	r4, r3, #31
 8003f52:	d504      	bpl.n	8003f5e <_vfiprintf_r+0x4e>
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	b01d      	add	sp, #116	@ 0x74
 8003f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	0598      	lsls	r0, r3, #22
 8003f62:	d4f7      	bmi.n	8003f54 <_vfiprintf_r+0x44>
 8003f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f66:	f7ff feaf 	bl	8003cc8 <__retarget_lock_release_recursive>
 8003f6a:	e7f3      	b.n	8003f54 <_vfiprintf_r+0x44>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f70:	2320      	movs	r3, #32
 8003f72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f7a:	2330      	movs	r3, #48	@ 0x30
 8003f7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800412c <_vfiprintf_r+0x21c>
 8003f80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f84:	f04f 0901 	mov.w	r9, #1
 8003f88:	4623      	mov	r3, r4
 8003f8a:	469a      	mov	sl, r3
 8003f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f90:	b10a      	cbz	r2, 8003f96 <_vfiprintf_r+0x86>
 8003f92:	2a25      	cmp	r2, #37	@ 0x25
 8003f94:	d1f9      	bne.n	8003f8a <_vfiprintf_r+0x7a>
 8003f96:	ebba 0b04 	subs.w	fp, sl, r4
 8003f9a:	d00b      	beq.n	8003fb4 <_vfiprintf_r+0xa4>
 8003f9c:	465b      	mov	r3, fp
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff ffa1 	bl	8003eea <__sfputs_r>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f000 80a7 	beq.w	80040fc <_vfiprintf_r+0x1ec>
 8003fae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fb0:	445a      	add	r2, fp
 8003fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809f 	beq.w	80040fc <_vfiprintf_r+0x1ec>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc8:	f10a 0a01 	add.w	sl, sl, #1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	9307      	str	r3, [sp, #28]
 8003fd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fd6:	4654      	mov	r4, sl
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fde:	4853      	ldr	r0, [pc, #332]	@ (800412c <_vfiprintf_r+0x21c>)
 8003fe0:	f7fc f8fe 	bl	80001e0 <memchr>
 8003fe4:	9a04      	ldr	r2, [sp, #16]
 8003fe6:	b9d8      	cbnz	r0, 8004020 <_vfiprintf_r+0x110>
 8003fe8:	06d1      	lsls	r1, r2, #27
 8003fea:	bf44      	itt	mi
 8003fec:	2320      	movmi	r3, #32
 8003fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ff2:	0713      	lsls	r3, r2, #28
 8003ff4:	bf44      	itt	mi
 8003ff6:	232b      	movmi	r3, #43	@ 0x2b
 8003ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8004000:	2b2a      	cmp	r3, #42	@ 0x2a
 8004002:	d015      	beq.n	8004030 <_vfiprintf_r+0x120>
 8004004:	9a07      	ldr	r2, [sp, #28]
 8004006:	4654      	mov	r4, sl
 8004008:	2000      	movs	r0, #0
 800400a:	f04f 0c0a 	mov.w	ip, #10
 800400e:	4621      	mov	r1, r4
 8004010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004014:	3b30      	subs	r3, #48	@ 0x30
 8004016:	2b09      	cmp	r3, #9
 8004018:	d94b      	bls.n	80040b2 <_vfiprintf_r+0x1a2>
 800401a:	b1b0      	cbz	r0, 800404a <_vfiprintf_r+0x13a>
 800401c:	9207      	str	r2, [sp, #28]
 800401e:	e014      	b.n	800404a <_vfiprintf_r+0x13a>
 8004020:	eba0 0308 	sub.w	r3, r0, r8
 8004024:	fa09 f303 	lsl.w	r3, r9, r3
 8004028:	4313      	orrs	r3, r2
 800402a:	9304      	str	r3, [sp, #16]
 800402c:	46a2      	mov	sl, r4
 800402e:	e7d2      	b.n	8003fd6 <_vfiprintf_r+0xc6>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	1d19      	adds	r1, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	9103      	str	r1, [sp, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	bfbb      	ittet	lt
 800403c:	425b      	neglt	r3, r3
 800403e:	f042 0202 	orrlt.w	r2, r2, #2
 8004042:	9307      	strge	r3, [sp, #28]
 8004044:	9307      	strlt	r3, [sp, #28]
 8004046:	bfb8      	it	lt
 8004048:	9204      	strlt	r2, [sp, #16]
 800404a:	7823      	ldrb	r3, [r4, #0]
 800404c:	2b2e      	cmp	r3, #46	@ 0x2e
 800404e:	d10a      	bne.n	8004066 <_vfiprintf_r+0x156>
 8004050:	7863      	ldrb	r3, [r4, #1]
 8004052:	2b2a      	cmp	r3, #42	@ 0x2a
 8004054:	d132      	bne.n	80040bc <_vfiprintf_r+0x1ac>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	1d1a      	adds	r2, r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	9203      	str	r2, [sp, #12]
 800405e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004062:	3402      	adds	r4, #2
 8004064:	9305      	str	r3, [sp, #20]
 8004066:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800413c <_vfiprintf_r+0x22c>
 800406a:	7821      	ldrb	r1, [r4, #0]
 800406c:	2203      	movs	r2, #3
 800406e:	4650      	mov	r0, sl
 8004070:	f7fc f8b6 	bl	80001e0 <memchr>
 8004074:	b138      	cbz	r0, 8004086 <_vfiprintf_r+0x176>
 8004076:	9b04      	ldr	r3, [sp, #16]
 8004078:	eba0 000a 	sub.w	r0, r0, sl
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	4082      	lsls	r2, r0
 8004080:	4313      	orrs	r3, r2
 8004082:	3401      	adds	r4, #1
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408a:	4829      	ldr	r0, [pc, #164]	@ (8004130 <_vfiprintf_r+0x220>)
 800408c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004090:	2206      	movs	r2, #6
 8004092:	f7fc f8a5 	bl	80001e0 <memchr>
 8004096:	2800      	cmp	r0, #0
 8004098:	d03f      	beq.n	800411a <_vfiprintf_r+0x20a>
 800409a:	4b26      	ldr	r3, [pc, #152]	@ (8004134 <_vfiprintf_r+0x224>)
 800409c:	bb1b      	cbnz	r3, 80040e6 <_vfiprintf_r+0x1d6>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	3307      	adds	r3, #7
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	3308      	adds	r3, #8
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ac:	443b      	add	r3, r7
 80040ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b0:	e76a      	b.n	8003f88 <_vfiprintf_r+0x78>
 80040b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b6:	460c      	mov	r4, r1
 80040b8:	2001      	movs	r0, #1
 80040ba:	e7a8      	b.n	800400e <_vfiprintf_r+0xfe>
 80040bc:	2300      	movs	r3, #0
 80040be:	3401      	adds	r4, #1
 80040c0:	9305      	str	r3, [sp, #20]
 80040c2:	4619      	mov	r1, r3
 80040c4:	f04f 0c0a 	mov.w	ip, #10
 80040c8:	4620      	mov	r0, r4
 80040ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ce:	3a30      	subs	r2, #48	@ 0x30
 80040d0:	2a09      	cmp	r2, #9
 80040d2:	d903      	bls.n	80040dc <_vfiprintf_r+0x1cc>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0c6      	beq.n	8004066 <_vfiprintf_r+0x156>
 80040d8:	9105      	str	r1, [sp, #20]
 80040da:	e7c4      	b.n	8004066 <_vfiprintf_r+0x156>
 80040dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80040e0:	4604      	mov	r4, r0
 80040e2:	2301      	movs	r3, #1
 80040e4:	e7f0      	b.n	80040c8 <_vfiprintf_r+0x1b8>
 80040e6:	ab03      	add	r3, sp, #12
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	462a      	mov	r2, r5
 80040ec:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <_vfiprintf_r+0x228>)
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	4630      	mov	r0, r6
 80040f2:	f3af 8000 	nop.w
 80040f6:	4607      	mov	r7, r0
 80040f8:	1c78      	adds	r0, r7, #1
 80040fa:	d1d6      	bne.n	80040aa <_vfiprintf_r+0x19a>
 80040fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040fe:	07d9      	lsls	r1, r3, #31
 8004100:	d405      	bmi.n	800410e <_vfiprintf_r+0x1fe>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	059a      	lsls	r2, r3, #22
 8004106:	d402      	bmi.n	800410e <_vfiprintf_r+0x1fe>
 8004108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800410a:	f7ff fddd 	bl	8003cc8 <__retarget_lock_release_recursive>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	065b      	lsls	r3, r3, #25
 8004112:	f53f af1f 	bmi.w	8003f54 <_vfiprintf_r+0x44>
 8004116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004118:	e71e      	b.n	8003f58 <_vfiprintf_r+0x48>
 800411a:	ab03      	add	r3, sp, #12
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	462a      	mov	r2, r5
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <_vfiprintf_r+0x228>)
 8004122:	a904      	add	r1, sp, #16
 8004124:	4630      	mov	r0, r6
 8004126:	f000 f879 	bl	800421c <_printf_i>
 800412a:	e7e4      	b.n	80040f6 <_vfiprintf_r+0x1e6>
 800412c:	08004744 	.word	0x08004744
 8004130:	0800474e 	.word	0x0800474e
 8004134:	00000000 	.word	0x00000000
 8004138:	08003eeb 	.word	0x08003eeb
 800413c:	0800474a 	.word	0x0800474a

08004140 <_printf_common>:
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	4616      	mov	r6, r2
 8004146:	4698      	mov	r8, r3
 8004148:	688a      	ldr	r2, [r1, #8]
 800414a:	690b      	ldr	r3, [r1, #16]
 800414c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004150:	4293      	cmp	r3, r2
 8004152:	bfb8      	it	lt
 8004154:	4613      	movlt	r3, r2
 8004156:	6033      	str	r3, [r6, #0]
 8004158:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800415c:	4607      	mov	r7, r0
 800415e:	460c      	mov	r4, r1
 8004160:	b10a      	cbz	r2, 8004166 <_printf_common+0x26>
 8004162:	3301      	adds	r3, #1
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	0699      	lsls	r1, r3, #26
 800416a:	bf42      	ittt	mi
 800416c:	6833      	ldrmi	r3, [r6, #0]
 800416e:	3302      	addmi	r3, #2
 8004170:	6033      	strmi	r3, [r6, #0]
 8004172:	6825      	ldr	r5, [r4, #0]
 8004174:	f015 0506 	ands.w	r5, r5, #6
 8004178:	d106      	bne.n	8004188 <_printf_common+0x48>
 800417a:	f104 0a19 	add.w	sl, r4, #25
 800417e:	68e3      	ldr	r3, [r4, #12]
 8004180:	6832      	ldr	r2, [r6, #0]
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	42ab      	cmp	r3, r5
 8004186:	dc26      	bgt.n	80041d6 <_printf_common+0x96>
 8004188:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	3b00      	subs	r3, #0
 8004190:	bf18      	it	ne
 8004192:	2301      	movne	r3, #1
 8004194:	0692      	lsls	r2, r2, #26
 8004196:	d42b      	bmi.n	80041f0 <_printf_common+0xb0>
 8004198:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800419c:	4641      	mov	r1, r8
 800419e:	4638      	mov	r0, r7
 80041a0:	47c8      	blx	r9
 80041a2:	3001      	adds	r0, #1
 80041a4:	d01e      	beq.n	80041e4 <_printf_common+0xa4>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	f003 0306 	and.w	r3, r3, #6
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	bf02      	ittt	eq
 80041b2:	68e5      	ldreq	r5, [r4, #12]
 80041b4:	6833      	ldreq	r3, [r6, #0]
 80041b6:	1aed      	subeq	r5, r5, r3
 80041b8:	68a3      	ldr	r3, [r4, #8]
 80041ba:	bf0c      	ite	eq
 80041bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041c0:	2500      	movne	r5, #0
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bfc4      	itt	gt
 80041c6:	1a9b      	subgt	r3, r3, r2
 80041c8:	18ed      	addgt	r5, r5, r3
 80041ca:	2600      	movs	r6, #0
 80041cc:	341a      	adds	r4, #26
 80041ce:	42b5      	cmp	r5, r6
 80041d0:	d11a      	bne.n	8004208 <_printf_common+0xc8>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e008      	b.n	80041e8 <_printf_common+0xa8>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4652      	mov	r2, sl
 80041da:	4641      	mov	r1, r8
 80041dc:	4638      	mov	r0, r7
 80041de:	47c8      	blx	r9
 80041e0:	3001      	adds	r0, #1
 80041e2:	d103      	bne.n	80041ec <_printf_common+0xac>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	3501      	adds	r5, #1
 80041ee:	e7c6      	b.n	800417e <_printf_common+0x3e>
 80041f0:	18e1      	adds	r1, r4, r3
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	2030      	movs	r0, #48	@ 0x30
 80041f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041fa:	4422      	add	r2, r4
 80041fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004204:	3302      	adds	r3, #2
 8004206:	e7c7      	b.n	8004198 <_printf_common+0x58>
 8004208:	2301      	movs	r3, #1
 800420a:	4622      	mov	r2, r4
 800420c:	4641      	mov	r1, r8
 800420e:	4638      	mov	r0, r7
 8004210:	47c8      	blx	r9
 8004212:	3001      	adds	r0, #1
 8004214:	d0e6      	beq.n	80041e4 <_printf_common+0xa4>
 8004216:	3601      	adds	r6, #1
 8004218:	e7d9      	b.n	80041ce <_printf_common+0x8e>
	...

0800421c <_printf_i>:
 800421c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	7e0f      	ldrb	r7, [r1, #24]
 8004222:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004224:	2f78      	cmp	r7, #120	@ 0x78
 8004226:	4691      	mov	r9, r2
 8004228:	4680      	mov	r8, r0
 800422a:	460c      	mov	r4, r1
 800422c:	469a      	mov	sl, r3
 800422e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004232:	d807      	bhi.n	8004244 <_printf_i+0x28>
 8004234:	2f62      	cmp	r7, #98	@ 0x62
 8004236:	d80a      	bhi.n	800424e <_printf_i+0x32>
 8004238:	2f00      	cmp	r7, #0
 800423a:	f000 80d1 	beq.w	80043e0 <_printf_i+0x1c4>
 800423e:	2f58      	cmp	r7, #88	@ 0x58
 8004240:	f000 80b8 	beq.w	80043b4 <_printf_i+0x198>
 8004244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004248:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800424c:	e03a      	b.n	80042c4 <_printf_i+0xa8>
 800424e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004252:	2b15      	cmp	r3, #21
 8004254:	d8f6      	bhi.n	8004244 <_printf_i+0x28>
 8004256:	a101      	add	r1, pc, #4	@ (adr r1, 800425c <_printf_i+0x40>)
 8004258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800425c:	080042b5 	.word	0x080042b5
 8004260:	080042c9 	.word	0x080042c9
 8004264:	08004245 	.word	0x08004245
 8004268:	08004245 	.word	0x08004245
 800426c:	08004245 	.word	0x08004245
 8004270:	08004245 	.word	0x08004245
 8004274:	080042c9 	.word	0x080042c9
 8004278:	08004245 	.word	0x08004245
 800427c:	08004245 	.word	0x08004245
 8004280:	08004245 	.word	0x08004245
 8004284:	08004245 	.word	0x08004245
 8004288:	080043c7 	.word	0x080043c7
 800428c:	080042f3 	.word	0x080042f3
 8004290:	08004381 	.word	0x08004381
 8004294:	08004245 	.word	0x08004245
 8004298:	08004245 	.word	0x08004245
 800429c:	080043e9 	.word	0x080043e9
 80042a0:	08004245 	.word	0x08004245
 80042a4:	080042f3 	.word	0x080042f3
 80042a8:	08004245 	.word	0x08004245
 80042ac:	08004245 	.word	0x08004245
 80042b0:	08004389 	.word	0x08004389
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6032      	str	r2, [r6, #0]
 80042bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042c4:	2301      	movs	r3, #1
 80042c6:	e09c      	b.n	8004402 <_printf_i+0x1e6>
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	1d19      	adds	r1, r3, #4
 80042ce:	6031      	str	r1, [r6, #0]
 80042d0:	0606      	lsls	r6, r0, #24
 80042d2:	d501      	bpl.n	80042d8 <_printf_i+0xbc>
 80042d4:	681d      	ldr	r5, [r3, #0]
 80042d6:	e003      	b.n	80042e0 <_printf_i+0xc4>
 80042d8:	0645      	lsls	r5, r0, #25
 80042da:	d5fb      	bpl.n	80042d4 <_printf_i+0xb8>
 80042dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	da03      	bge.n	80042ec <_printf_i+0xd0>
 80042e4:	232d      	movs	r3, #45	@ 0x2d
 80042e6:	426d      	negs	r5, r5
 80042e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ec:	4858      	ldr	r0, [pc, #352]	@ (8004450 <_printf_i+0x234>)
 80042ee:	230a      	movs	r3, #10
 80042f0:	e011      	b.n	8004316 <_printf_i+0xfa>
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	6833      	ldr	r3, [r6, #0]
 80042f6:	0608      	lsls	r0, r1, #24
 80042f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80042fc:	d402      	bmi.n	8004304 <_printf_i+0xe8>
 80042fe:	0649      	lsls	r1, r1, #25
 8004300:	bf48      	it	mi
 8004302:	b2ad      	uxthmi	r5, r5
 8004304:	2f6f      	cmp	r7, #111	@ 0x6f
 8004306:	4852      	ldr	r0, [pc, #328]	@ (8004450 <_printf_i+0x234>)
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	bf14      	ite	ne
 800430c:	230a      	movne	r3, #10
 800430e:	2308      	moveq	r3, #8
 8004310:	2100      	movs	r1, #0
 8004312:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004316:	6866      	ldr	r6, [r4, #4]
 8004318:	60a6      	str	r6, [r4, #8]
 800431a:	2e00      	cmp	r6, #0
 800431c:	db05      	blt.n	800432a <_printf_i+0x10e>
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	432e      	orrs	r6, r5
 8004322:	f021 0104 	bic.w	r1, r1, #4
 8004326:	6021      	str	r1, [r4, #0]
 8004328:	d04b      	beq.n	80043c2 <_printf_i+0x1a6>
 800432a:	4616      	mov	r6, r2
 800432c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004330:	fb03 5711 	mls	r7, r3, r1, r5
 8004334:	5dc7      	ldrb	r7, [r0, r7]
 8004336:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800433a:	462f      	mov	r7, r5
 800433c:	42bb      	cmp	r3, r7
 800433e:	460d      	mov	r5, r1
 8004340:	d9f4      	bls.n	800432c <_printf_i+0x110>
 8004342:	2b08      	cmp	r3, #8
 8004344:	d10b      	bne.n	800435e <_printf_i+0x142>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07df      	lsls	r7, r3, #31
 800434a:	d508      	bpl.n	800435e <_printf_i+0x142>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	6861      	ldr	r1, [r4, #4]
 8004350:	4299      	cmp	r1, r3
 8004352:	bfde      	ittt	le
 8004354:	2330      	movle	r3, #48	@ 0x30
 8004356:	f806 3c01 	strble.w	r3, [r6, #-1]
 800435a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800435e:	1b92      	subs	r2, r2, r6
 8004360:	6122      	str	r2, [r4, #16]
 8004362:	f8cd a000 	str.w	sl, [sp]
 8004366:	464b      	mov	r3, r9
 8004368:	aa03      	add	r2, sp, #12
 800436a:	4621      	mov	r1, r4
 800436c:	4640      	mov	r0, r8
 800436e:	f7ff fee7 	bl	8004140 <_printf_common>
 8004372:	3001      	adds	r0, #1
 8004374:	d14a      	bne.n	800440c <_printf_i+0x1f0>
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	b004      	add	sp, #16
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f043 0320 	orr.w	r3, r3, #32
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	4832      	ldr	r0, [pc, #200]	@ (8004454 <_printf_i+0x238>)
 800438a:	2778      	movs	r7, #120	@ 0x78
 800438c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	6831      	ldr	r1, [r6, #0]
 8004394:	061f      	lsls	r7, r3, #24
 8004396:	f851 5b04 	ldr.w	r5, [r1], #4
 800439a:	d402      	bmi.n	80043a2 <_printf_i+0x186>
 800439c:	065f      	lsls	r7, r3, #25
 800439e:	bf48      	it	mi
 80043a0:	b2ad      	uxthmi	r5, r5
 80043a2:	6031      	str	r1, [r6, #0]
 80043a4:	07d9      	lsls	r1, r3, #31
 80043a6:	bf44      	itt	mi
 80043a8:	f043 0320 	orrmi.w	r3, r3, #32
 80043ac:	6023      	strmi	r3, [r4, #0]
 80043ae:	b11d      	cbz	r5, 80043b8 <_printf_i+0x19c>
 80043b0:	2310      	movs	r3, #16
 80043b2:	e7ad      	b.n	8004310 <_printf_i+0xf4>
 80043b4:	4826      	ldr	r0, [pc, #152]	@ (8004450 <_printf_i+0x234>)
 80043b6:	e7e9      	b.n	800438c <_printf_i+0x170>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f023 0320 	bic.w	r3, r3, #32
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	e7f6      	b.n	80043b0 <_printf_i+0x194>
 80043c2:	4616      	mov	r6, r2
 80043c4:	e7bd      	b.n	8004342 <_printf_i+0x126>
 80043c6:	6833      	ldr	r3, [r6, #0]
 80043c8:	6825      	ldr	r5, [r4, #0]
 80043ca:	6961      	ldr	r1, [r4, #20]
 80043cc:	1d18      	adds	r0, r3, #4
 80043ce:	6030      	str	r0, [r6, #0]
 80043d0:	062e      	lsls	r6, r5, #24
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	d501      	bpl.n	80043da <_printf_i+0x1be>
 80043d6:	6019      	str	r1, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <_printf_i+0x1c4>
 80043da:	0668      	lsls	r0, r5, #25
 80043dc:	d5fb      	bpl.n	80043d6 <_printf_i+0x1ba>
 80043de:	8019      	strh	r1, [r3, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	6123      	str	r3, [r4, #16]
 80043e4:	4616      	mov	r6, r2
 80043e6:	e7bc      	b.n	8004362 <_printf_i+0x146>
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	6032      	str	r2, [r6, #0]
 80043ee:	681e      	ldr	r6, [r3, #0]
 80043f0:	6862      	ldr	r2, [r4, #4]
 80043f2:	2100      	movs	r1, #0
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7fb fef3 	bl	80001e0 <memchr>
 80043fa:	b108      	cbz	r0, 8004400 <_printf_i+0x1e4>
 80043fc:	1b80      	subs	r0, r0, r6
 80043fe:	6060      	str	r0, [r4, #4]
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	6123      	str	r3, [r4, #16]
 8004404:	2300      	movs	r3, #0
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800440a:	e7aa      	b.n	8004362 <_printf_i+0x146>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	4632      	mov	r2, r6
 8004410:	4649      	mov	r1, r9
 8004412:	4640      	mov	r0, r8
 8004414:	47d0      	blx	sl
 8004416:	3001      	adds	r0, #1
 8004418:	d0ad      	beq.n	8004376 <_printf_i+0x15a>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	079b      	lsls	r3, r3, #30
 800441e:	d413      	bmi.n	8004448 <_printf_i+0x22c>
 8004420:	68e0      	ldr	r0, [r4, #12]
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	4298      	cmp	r0, r3
 8004426:	bfb8      	it	lt
 8004428:	4618      	movlt	r0, r3
 800442a:	e7a6      	b.n	800437a <_printf_i+0x15e>
 800442c:	2301      	movs	r3, #1
 800442e:	4632      	mov	r2, r6
 8004430:	4649      	mov	r1, r9
 8004432:	4640      	mov	r0, r8
 8004434:	47d0      	blx	sl
 8004436:	3001      	adds	r0, #1
 8004438:	d09d      	beq.n	8004376 <_printf_i+0x15a>
 800443a:	3501      	adds	r5, #1
 800443c:	68e3      	ldr	r3, [r4, #12]
 800443e:	9903      	ldr	r1, [sp, #12]
 8004440:	1a5b      	subs	r3, r3, r1
 8004442:	42ab      	cmp	r3, r5
 8004444:	dcf2      	bgt.n	800442c <_printf_i+0x210>
 8004446:	e7eb      	b.n	8004420 <_printf_i+0x204>
 8004448:	2500      	movs	r5, #0
 800444a:	f104 0619 	add.w	r6, r4, #25
 800444e:	e7f5      	b.n	800443c <_printf_i+0x220>
 8004450:	08004755 	.word	0x08004755
 8004454:	08004766 	.word	0x08004766

08004458 <__sflush_r>:
 8004458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004460:	0716      	lsls	r6, r2, #28
 8004462:	4605      	mov	r5, r0
 8004464:	460c      	mov	r4, r1
 8004466:	d454      	bmi.n	8004512 <__sflush_r+0xba>
 8004468:	684b      	ldr	r3, [r1, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	dc02      	bgt.n	8004474 <__sflush_r+0x1c>
 800446e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	dd48      	ble.n	8004506 <__sflush_r+0xae>
 8004474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004476:	2e00      	cmp	r6, #0
 8004478:	d045      	beq.n	8004506 <__sflush_r+0xae>
 800447a:	2300      	movs	r3, #0
 800447c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004480:	682f      	ldr	r7, [r5, #0]
 8004482:	6a21      	ldr	r1, [r4, #32]
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	d030      	beq.n	80044ea <__sflush_r+0x92>
 8004488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	0759      	lsls	r1, r3, #29
 800448e:	d505      	bpl.n	800449c <__sflush_r+0x44>
 8004490:	6863      	ldr	r3, [r4, #4]
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004496:	b10b      	cbz	r3, 800449c <__sflush_r+0x44>
 8004498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	2300      	movs	r3, #0
 800449e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044a0:	6a21      	ldr	r1, [r4, #32]
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b0      	blx	r6
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	d106      	bne.n	80044ba <__sflush_r+0x62>
 80044ac:	6829      	ldr	r1, [r5, #0]
 80044ae:	291d      	cmp	r1, #29
 80044b0:	d82b      	bhi.n	800450a <__sflush_r+0xb2>
 80044b2:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <__sflush_r+0x104>)
 80044b4:	40ca      	lsrs	r2, r1
 80044b6:	07d6      	lsls	r6, r2, #31
 80044b8:	d527      	bpl.n	800450a <__sflush_r+0xb2>
 80044ba:	2200      	movs	r2, #0
 80044bc:	6062      	str	r2, [r4, #4]
 80044be:	04d9      	lsls	r1, r3, #19
 80044c0:	6922      	ldr	r2, [r4, #16]
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	d504      	bpl.n	80044d0 <__sflush_r+0x78>
 80044c6:	1c42      	adds	r2, r0, #1
 80044c8:	d101      	bne.n	80044ce <__sflush_r+0x76>
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	b903      	cbnz	r3, 80044d0 <__sflush_r+0x78>
 80044ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80044d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044d2:	602f      	str	r7, [r5, #0]
 80044d4:	b1b9      	cbz	r1, 8004506 <__sflush_r+0xae>
 80044d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044da:	4299      	cmp	r1, r3
 80044dc:	d002      	beq.n	80044e4 <__sflush_r+0x8c>
 80044de:	4628      	mov	r0, r5
 80044e0:	f7ff fbf4 	bl	8003ccc <_free_r>
 80044e4:	2300      	movs	r3, #0
 80044e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80044e8:	e00d      	b.n	8004506 <__sflush_r+0xae>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b0      	blx	r6
 80044f0:	4602      	mov	r2, r0
 80044f2:	1c50      	adds	r0, r2, #1
 80044f4:	d1c9      	bne.n	800448a <__sflush_r+0x32>
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0c6      	beq.n	800448a <__sflush_r+0x32>
 80044fc:	2b1d      	cmp	r3, #29
 80044fe:	d001      	beq.n	8004504 <__sflush_r+0xac>
 8004500:	2b16      	cmp	r3, #22
 8004502:	d11e      	bne.n	8004542 <__sflush_r+0xea>
 8004504:	602f      	str	r7, [r5, #0]
 8004506:	2000      	movs	r0, #0
 8004508:	e022      	b.n	8004550 <__sflush_r+0xf8>
 800450a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800450e:	b21b      	sxth	r3, r3
 8004510:	e01b      	b.n	800454a <__sflush_r+0xf2>
 8004512:	690f      	ldr	r7, [r1, #16]
 8004514:	2f00      	cmp	r7, #0
 8004516:	d0f6      	beq.n	8004506 <__sflush_r+0xae>
 8004518:	0793      	lsls	r3, r2, #30
 800451a:	680e      	ldr	r6, [r1, #0]
 800451c:	bf08      	it	eq
 800451e:	694b      	ldreq	r3, [r1, #20]
 8004520:	600f      	str	r7, [r1, #0]
 8004522:	bf18      	it	ne
 8004524:	2300      	movne	r3, #0
 8004526:	eba6 0807 	sub.w	r8, r6, r7
 800452a:	608b      	str	r3, [r1, #8]
 800452c:	f1b8 0f00 	cmp.w	r8, #0
 8004530:	dde9      	ble.n	8004506 <__sflush_r+0xae>
 8004532:	6a21      	ldr	r1, [r4, #32]
 8004534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004536:	4643      	mov	r3, r8
 8004538:	463a      	mov	r2, r7
 800453a:	4628      	mov	r0, r5
 800453c:	47b0      	blx	r6
 800453e:	2800      	cmp	r0, #0
 8004540:	dc08      	bgt.n	8004554 <__sflush_r+0xfc>
 8004542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004554:	4407      	add	r7, r0
 8004556:	eba8 0800 	sub.w	r8, r8, r0
 800455a:	e7e7      	b.n	800452c <__sflush_r+0xd4>
 800455c:	20400001 	.word	0x20400001

08004560 <_fflush_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	690b      	ldr	r3, [r1, #16]
 8004564:	4605      	mov	r5, r0
 8004566:	460c      	mov	r4, r1
 8004568:	b913      	cbnz	r3, 8004570 <_fflush_r+0x10>
 800456a:	2500      	movs	r5, #0
 800456c:	4628      	mov	r0, r5
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	b118      	cbz	r0, 800457a <_fflush_r+0x1a>
 8004572:	6a03      	ldr	r3, [r0, #32]
 8004574:	b90b      	cbnz	r3, 800457a <_fflush_r+0x1a>
 8004576:	f7ff f9af 	bl	80038d8 <__sinit>
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f3      	beq.n	800456a <_fflush_r+0xa>
 8004582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004584:	07d0      	lsls	r0, r2, #31
 8004586:	d404      	bmi.n	8004592 <_fflush_r+0x32>
 8004588:	0599      	lsls	r1, r3, #22
 800458a:	d402      	bmi.n	8004592 <_fflush_r+0x32>
 800458c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800458e:	f7ff fb9a 	bl	8003cc6 <__retarget_lock_acquire_recursive>
 8004592:	4628      	mov	r0, r5
 8004594:	4621      	mov	r1, r4
 8004596:	f7ff ff5f 	bl	8004458 <__sflush_r>
 800459a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800459c:	07da      	lsls	r2, r3, #31
 800459e:	4605      	mov	r5, r0
 80045a0:	d4e4      	bmi.n	800456c <_fflush_r+0xc>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	059b      	lsls	r3, r3, #22
 80045a6:	d4e1      	bmi.n	800456c <_fflush_r+0xc>
 80045a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045aa:	f7ff fb8d 	bl	8003cc8 <__retarget_lock_release_recursive>
 80045ae:	e7dd      	b.n	800456c <_fflush_r+0xc>

080045b0 <__swhatbuf_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	460c      	mov	r4, r1
 80045b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b8:	2900      	cmp	r1, #0
 80045ba:	b096      	sub	sp, #88	@ 0x58
 80045bc:	4615      	mov	r5, r2
 80045be:	461e      	mov	r6, r3
 80045c0:	da0d      	bge.n	80045de <__swhatbuf_r+0x2e>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	bf14      	ite	ne
 80045ce:	2340      	movne	r3, #64	@ 0x40
 80045d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045d4:	2000      	movs	r0, #0
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	b016      	add	sp, #88	@ 0x58
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	466a      	mov	r2, sp
 80045e0:	f000 f848 	bl	8004674 <_fstat_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	dbec      	blt.n	80045c2 <__swhatbuf_r+0x12>
 80045e8:	9901      	ldr	r1, [sp, #4]
 80045ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045f2:	4259      	negs	r1, r3
 80045f4:	4159      	adcs	r1, r3
 80045f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045fa:	e7eb      	b.n	80045d4 <__swhatbuf_r+0x24>

080045fc <__smakebuf_r>:
 80045fc:	898b      	ldrh	r3, [r1, #12]
 80045fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004600:	079d      	lsls	r5, r3, #30
 8004602:	4606      	mov	r6, r0
 8004604:	460c      	mov	r4, r1
 8004606:	d507      	bpl.n	8004618 <__smakebuf_r+0x1c>
 8004608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	6123      	str	r3, [r4, #16]
 8004610:	2301      	movs	r3, #1
 8004612:	6163      	str	r3, [r4, #20]
 8004614:	b003      	add	sp, #12
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004618:	ab01      	add	r3, sp, #4
 800461a:	466a      	mov	r2, sp
 800461c:	f7ff ffc8 	bl	80045b0 <__swhatbuf_r>
 8004620:	9f00      	ldr	r7, [sp, #0]
 8004622:	4605      	mov	r5, r0
 8004624:	4639      	mov	r1, r7
 8004626:	4630      	mov	r0, r6
 8004628:	f7ff fbbc 	bl	8003da4 <_malloc_r>
 800462c:	b948      	cbnz	r0, 8004642 <__smakebuf_r+0x46>
 800462e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004632:	059a      	lsls	r2, r3, #22
 8004634:	d4ee      	bmi.n	8004614 <__smakebuf_r+0x18>
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	e7e2      	b.n	8004608 <__smakebuf_r+0xc>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	6020      	str	r0, [r4, #0]
 8004646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	9b01      	ldr	r3, [sp, #4]
 800464e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004652:	b15b      	cbz	r3, 800466c <__smakebuf_r+0x70>
 8004654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f81d 	bl	8004698 <_isatty_r>
 800465e:	b128      	cbz	r0, 800466c <__smakebuf_r+0x70>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	431d      	orrs	r5, r3
 8004670:	81a5      	strh	r5, [r4, #12]
 8004672:	e7cf      	b.n	8004614 <__smakebuf_r+0x18>

08004674 <_fstat_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	@ (8004694 <_fstat_r+0x20>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f7fc fc38 	bl	8000ef6 <_fstat>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d102      	bne.n	8004690 <_fstat_r+0x1c>
 800468a:	682b      	ldr	r3, [r5, #0]
 800468c:	b103      	cbz	r3, 8004690 <_fstat_r+0x1c>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	200002f8 	.word	0x200002f8

08004698 <_isatty_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d06      	ldr	r5, [pc, #24]	@ (80046b4 <_isatty_r+0x1c>)
 800469c:	2300      	movs	r3, #0
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc fc37 	bl	8000f16 <_isatty>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_isatty_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_isatty_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	200002f8 	.word	0x200002f8

080046b8 <_sbrk_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d06      	ldr	r5, [pc, #24]	@ (80046d4 <_sbrk_r+0x1c>)
 80046bc:	2300      	movs	r3, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f7fc fc40 	bl	8000f48 <_sbrk>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_sbrk_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_sbrk_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	200002f8 	.word	0x200002f8

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
