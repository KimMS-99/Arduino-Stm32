
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058dc  080058dc  000068dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000068e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058e8  080058e8  000068e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080058ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  2000006c  08005958  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  08005958  00007b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2a2  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225f  00000000  00000000  0001533e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000175a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  00018350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a7  00000000  00000000  00018dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f41f  00000000  00000000  000306a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090576  00000000  00000000  0003fac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  000d007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000d46b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054e4 	.word	0x080054e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080054e4 	.word	0x080054e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f4:	2100      	movs	r1, #0
 80005f6:	68b8      	ldr	r0, [r7, #8]
 80005f8:	f003 feea 	bl	80043d0 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005fc:	f240 4202 	movw	r2, #1026	@ 0x402
 8000600:	2100      	movs	r1, #0
 8000602:	4826      	ldr	r0, [pc, #152]	@ (800069c <esp_at_command+0xc0>)
 8000604:	f003 fee4 	bl	80043d0 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff fdf3 	bl	80001f4 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	2364      	movs	r3, #100	@ 0x64
 8000614:	68f9      	ldr	r1, [r7, #12]
 8000616:	4822      	ldr	r0, [pc, #136]	@ (80006a0 <esp_at_command+0xc4>)
 8000618:	f002 fc8a 	bl	8002f30 <HAL_UART_Transmit>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d032      	beq.n	8000688 <esp_at_command+0xac>
        return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e035      	b.n	8000694 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <esp_at_command+0xc0>)
 800062a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800062e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000632:	d302      	bcc.n	800063a <esp_at_command+0x5e>
            return -2;
 8000634:	f06f 0301 	mvn.w	r3, #1
 8000638:	e02c      	b.n	8000694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800063a:	491a      	ldr	r1, [pc, #104]	@ (80006a4 <esp_at_command+0xc8>)
 800063c:	4817      	ldr	r0, [pc, #92]	@ (800069c <esp_at_command+0xc0>)
 800063e:	f003 ff4b 	bl	80044d8 <strstr>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <esp_at_command+0x72>
            return -3;
 8000648:	f06f 0302 	mvn.w	r3, #2
 800064c:	e022      	b.n	8000694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 800064e:	4916      	ldr	r1, [pc, #88]	@ (80006a8 <esp_at_command+0xcc>)
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <esp_at_command+0xc0>)
 8000652:	f003 ff41 	bl	80044d8 <strstr>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <esp_at_command+0xc0>)
 800065e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000662:	461a      	mov	r2, r3
 8000664:	490d      	ldr	r1, [pc, #52]	@ (800069c <esp_at_command+0xc0>)
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f003 ffc7 	bl	80045fa <memcpy>
            *length = cb_data.length;
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <esp_at_command+0xc0>)
 800066e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	801a      	strh	r2, [r3, #0]
            return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e00c      	b.n	8000694 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	3b0a      	subs	r3, #10
 800067e:	b29b      	uxth	r3, r3
 8000680:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 ffd2 	bl	800162c <HAL_Delay>
    while(time_out > 0)
 8000688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dccb      	bgt.n	8000628 <esp_at_command+0x4c>
    }
    return -4;
 8000690:	f06f 0303 	mvn.w	r3, #3
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200004d0 	.word	0x200004d0
 80006a0:	20000968 	.word	0x20000968
 80006a4:	080054fc 	.word	0x080054fc
 80006a8:	08005504 	.word	0x08005504

080006ac <esp_reset>:

static int esp_reset(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006b6:	1dba      	adds	r2, r7, #6
 80006b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006bc:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <esp_reset+0x38>)
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <esp_reset+0x3c>)
 80006c0:	f7ff ff8c 	bl	80005dc <esp_at_command>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <esp_reset+0x24>
    {
    	return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e004      	b.n	80006da <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80006d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d4:	f000 ffaa 	bl	800162c <HAL_Delay>
    return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000098 	.word	0x20000098
 80006e8:	08005508 	.word	0x08005508

080006ec <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006fa:	f107 020a 	add.w	r2, r7, #10
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	492d      	ldr	r1, [pc, #180]	@ (80007b8 <request_ip_addr+0xcc>)
 8000704:	482d      	ldr	r0, [pc, #180]	@ (80007bc <request_ip_addr+0xd0>)
 8000706:	f7ff ff69 	bl	80005dc <esp_at_command>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000710:	482b      	ldr	r0, [pc, #172]	@ (80007c0 <request_ip_addr+0xd4>)
 8000712:	f003 fd5b 	bl	80041cc <puts>
 8000716:	e049      	b.n	80007ac <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000718:	492a      	ldr	r1, [pc, #168]	@ (80007c4 <request_ip_addr+0xd8>)
 800071a:	4827      	ldr	r0, [pc, #156]	@ (80007b8 <request_ip_addr+0xcc>)
 800071c:	f003 fe80 	bl	8004420 <strtok>
 8000720:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d03e      	beq.n	80007a6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	e009      	b.n	8000742 <request_ip_addr+0x56>
                printf("%c", response[i]);
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <request_ip_addr+0xcc>)
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fcea 	bl	8004110 <putchar>
            for(int i = 0 ; i < length ; i++)
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	3301      	adds	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	897b      	ldrh	r3, [r7, #10]
 8000744:	461a      	mov	r2, r3
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4293      	cmp	r3, r2
 800074a:	dbf0      	blt.n	800072e <request_ip_addr+0x42>
        }

        while(line != NULL)
 800074c:	e02b      	b.n	80007a6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800074e:	491e      	ldr	r1, [pc, #120]	@ (80007c8 <request_ip_addr+0xdc>)
 8000750:	6978      	ldr	r0, [r7, #20]
 8000752:	f003 fec1 	bl	80044d8 <strstr>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01f      	beq.n	800079c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800075c:	491b      	ldr	r1, [pc, #108]	@ (80007cc <request_ip_addr+0xe0>)
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f003 fe5e 	bl	8004420 <strtok>
                ip = strtok(NULL, "\"");
 8000764:	4919      	ldr	r1, [pc, #100]	@ (80007cc <request_ip_addr+0xe0>)
 8000766:	2000      	movs	r0, #0
 8000768:	f003 fe5a 	bl	8004420 <strtok>
 800076c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800076e:	4918      	ldr	r1, [pc, #96]	@ (80007d0 <request_ip_addr+0xe4>)
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff fd35 	bl	80001e0 <strcmp>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00f      	beq.n	800079c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800077c:	2210      	movs	r2, #16
 800077e:	2100      	movs	r1, #0
 8000780:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <request_ip_addr+0xe8>)
 8000782:	f003 fe25 	bl	80043d0 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f7ff fd34 	bl	80001f4 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	4810      	ldr	r0, [pc, #64]	@ (80007d4 <request_ip_addr+0xe8>)
 8000794:	f003 ff31 	bl	80045fa <memcpy>
                    return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e009      	b.n	80007b0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800079c:	4909      	ldr	r1, [pc, #36]	@ (80007c4 <request_ip_addr+0xd8>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f003 fe3e 	bl	8004420 <strtok>
 80007a4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1d0      	bne.n	800074e <request_ip_addr+0x62>
        }
    }
    return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000098 	.word	0x20000098
 80007bc:	08005550 	.word	0x08005550
 80007c0:	0800555c 	.word	0x0800555c
 80007c4:	08005544 	.word	0x08005544
 80007c8:	0800557c 	.word	0x0800557c
 80007cc:	0800554c 	.word	0x0800554c
 80007d0:	08005514 	.word	0x08005514
 80007d4:	20000088 	.word	0x20000088

080007d8 <esp_client_conn>:
int esp_client_conn()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b092      	sub	sp, #72	@ 0x48
 80007dc:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2240      	movs	r2, #64	@ 0x40
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fdf2 	bl	80043d0 <memset>
  uint16_t length = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007f0:	f107 0008 	add.w	r0, r7, #8
 80007f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007f8:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <esp_client_conn+0x48>)
 80007fa:	490a      	ldr	r1, [pc, #40]	@ (8000824 <esp_client_conn+0x4c>)
 80007fc:	f003 fcee 	bl	80041dc <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000800:	1dba      	adds	r2, r7, #6
 8000802:	f107 0008 	add.w	r0, r7, #8
 8000806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080a:	4907      	ldr	r1, [pc, #28]	@ (8000828 <esp_client_conn+0x50>)
 800080c:	f7ff fee6 	bl	80005dc <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <esp_client_conn+0x54>)
 8000812:	f000 f909 	bl	8000a28 <esp_send_data>
	return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3748      	adds	r7, #72	@ 0x48
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08005588 	.word	0x08005588
 8000824:	08005598 	.word	0x08005598
 8000828:	20000098 	.word	0x20000098
 800082c:	080055b4 	.word	0x080055b4

08000830 <esp_get_status>:
int esp_get_status()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 800083a:	1dba      	adds	r2, r7, #6
 800083c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000840:	4909      	ldr	r1, [pc, #36]	@ (8000868 <esp_get_status+0x38>)
 8000842:	480a      	ldr	r0, [pc, #40]	@ (800086c <esp_get_status+0x3c>)
 8000844:	f7ff feca 	bl	80005dc <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000848:	4909      	ldr	r1, [pc, #36]	@ (8000870 <esp_get_status+0x40>)
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <esp_get_status+0x38>)
 800084c:	f003 fe44 	bl	80044d8 <strstr>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <esp_get_status+0x2a>
    {
    	return 0;
 8000856:	2300      	movs	r3, #0
 8000858:	e001      	b.n	800085e <esp_get_status+0x2e>
    }
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000098 	.word	0x20000098
 800086c:	080055c8 	.word	0x080055c8
 8000870:	080055d8 	.word	0x080055d8

08000874 <drv_esp_init>:
int drv_esp_init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000878:	2210      	movs	r2, #16
 800087a:	2100      	movs	r1, #0
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <drv_esp_init+0x24>)
 800087e:	f003 fda7 	bl	80043d0 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	4905      	ldr	r1, [pc, #20]	@ (800089c <drv_esp_init+0x28>)
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <drv_esp_init+0x2c>)
 8000888:	f002 fbdd 	bl	8003046 <HAL_UART_Receive_IT>

    return esp_reset();
 800088c:	f7ff ff0e 	bl	80006ac <esp_reset>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000088 	.word	0x20000088
 800089c:	200004cf 	.word	0x200004cf
 80008a0:	20000968 	.word	0x20000968

080008a4 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2240      	movs	r2, #64	@ 0x40
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fd87 	bl	80043d0 <memset>
  if(ssid == NULL || passwd == NULL)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <ap_conn_func+0x2a>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008ce:	4817      	ldr	r0, [pc, #92]	@ (800092c <ap_conn_func+0x88>)
 80008d0:	f003 fc7c 	bl	80041cc <puts>
 80008d4:	e026      	b.n	8000924 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80008d6:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80008da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008de:	4914      	ldr	r1, [pc, #80]	@ (8000930 <ap_conn_func+0x8c>)
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <ap_conn_func+0x90>)
 80008e2:	f7ff fe7b 	bl	80005dc <esp_at_command>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <ap_conn_func+0x94>)
 80008ee:	f003 fc6d 	bl	80041cc <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80008f2:	f107 000c 	add.w	r0, r7, #12
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4910      	ldr	r1, [pc, #64]	@ (800093c <ap_conn_func+0x98>)
 80008fc:	f003 fc6e 	bl	80041dc <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000900:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000904:	f107 000c 	add.w	r0, r7, #12
 8000908:	f241 7370 	movw	r3, #6000	@ 0x1770
 800090c:	4908      	ldr	r1, [pc, #32]	@ (8000930 <ap_conn_func+0x8c>)
 800090e:	f7ff fe65 	bl	80005dc <esp_at_command>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4808      	ldr	r0, [pc, #32]	@ (8000940 <ap_conn_func+0x9c>)
 8000920:	f003 fbe4 	bl	80040ec <iprintf>
}
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	0800563c 	.word	0x0800563c
 8000930:	20000098 	.word	0x20000098
 8000934:	08005668 	.word	0x08005668
 8000938:	08005678 	.word	0x08005678
 800093c:	0800568c 	.word	0x0800568c
 8000940:	080056a4 	.word	0x080056a4

08000944 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_UART_RxCpltCallback+0x9c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d117      	bne.n	8000986 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000958:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800095c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000960:	d20c      	bcs.n	800097c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000964:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	b291      	uxth	r1, r2
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 800096e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000972:	461a      	mov	r2, r3
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_UART_RxCpltCallback+0xa4>)
 8000976:	7819      	ldrb	r1, [r3, #0]
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 800097a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	491a      	ldr	r1, [pc, #104]	@ (80009e8 <HAL_UART_RxCpltCallback+0xa4>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f002 fb60 	bl	8003046 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <HAL_UART_RxCpltCallback+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d122      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_RxCpltCallback+0xb0>)
 8000996:	7811      	ldrb	r1, [r2, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 800099a:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b0d      	cmp	r3, #13
 80009a8:	d10b      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_RxCpltCallback+0xb8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e004      	b.n	80009cc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009ca:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4909      	ldr	r1, [pc, #36]	@ (80009f4 <HAL_UART_RxCpltCallback+0xb0>)
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f002 fb38 	bl	8003046 <HAL_UART_Receive_IT>
    }
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40011400 	.word	0x40011400
 80009e4:	200004d0 	.word	0x200004d0
 80009e8:	200004cf 	.word	0x200004cf
 80009ec:	40004400 	.word	0x40004400
 80009f0:	200008d4 	.word	0x200008d4
 80009f4:	200004ce 	.word	0x200004ce
 80009f8:	2000049c 	.word	0x2000049c
 80009fc:	20000498 	.word	0x20000498

08000a00 <AiotClient_Init>:


void AiotClient_Init()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000a04:	4906      	ldr	r1, [pc, #24]	@ (8000a20 <AiotClient_Init+0x20>)
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <AiotClient_Init+0x24>)
 8000a08:	f7ff ff4c 	bl	80008a4 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fe6d 	bl	80006ec <request_ip_addr>
	esp_client_conn();
 8000a12:	f7ff fee1 	bl	80007d8 <esp_client_conn>
	esp_get_status();
 8000a16:	f7ff ff0b 	bl	8000830 <esp_get_status>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08005704 	.word	0x08005704
 8000a24:	08005710 	.word	0x08005710

08000a28 <esp_send_data>:

void esp_send_data(char *data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2240      	movs	r2, #64	@ 0x40
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fcc9 	bl	80043d0 <memset>
	uint16_t length = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fbd6 	bl	80001f4 <strlen>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <esp_send_data+0x60>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fbc3 	bl	80041dc <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000a56:	f107 020e 	add.w	r2, r7, #14
 8000a5a:	f107 0010 	add.w	r0, r7, #16
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	490a      	ldr	r1, [pc, #40]	@ (8000a8c <esp_send_data+0x64>)
 8000a64:	f7ff fdba 	bl	80005dc <esp_at_command>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d107      	bne.n	8000a7e <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000a6e:	f107 020e 	add.w	r2, r7, #14
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <esp_send_data+0x64>)
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fdaf 	bl	80005dc <esp_at_command>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08005718 	.word	0x08005718
 8000a8c:	20000098 	.word	0x20000098

08000a90 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	4903      	ldr	r1, [pc, #12]	@ (8000aa4 <drv_uart_init+0x14>)
 8000a98:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <drv_uart_init+0x18>)
 8000a9a:	f002 fad4 	bl	8003046 <HAL_UART_Receive_IT>
    return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200004ce 	.word	0x200004ce
 8000aa8:	20000920 	.word	0x20000920

08000aac <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <__io_putchar+0x2c>)
 8000abc:	f002 fa38 	bl	8002f30 <HAL_UART_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <__io_putchar+0x1e>
        return ch;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	e001      	b.n	8000ace <__io_putchar+0x22>
    return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000920 	.word	0x20000920

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fd2f 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f893 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f99d 	bl	8000e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af2:	f000 f947 	bl	8000d84 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000af6:	f000 f96f 	bl	8000dd8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000afa:	f000 f8f5 	bl	8000ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main()! - wifi!\r\n");
 8000afe:	4838      	ldr	r0, [pc, #224]	@ (8000be0 <main+0x104>)
 8000b00:	f003 fb64 	bl	80041cc <puts>
  ret |= drv_uart_init();
 8000b04:	f7ff ffc4 	bl	8000a90 <drv_uart_init>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8000b10:	f7ff feb0 	bl	8000874 <drv_esp_init>
 8000b14:	4602      	mov	r2, r0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d004      	beq.n	8000b2c <main+0x50>
  {
	  printf("Esp response error\r\n");
 8000b22:	4830      	ldr	r0, [pc, #192]	@ (8000be4 <main+0x108>)
 8000b24:	f003 fb52 	bl	80041cc <puts>
	  Error_Handler();
 8000b28:	f000 fada 	bl	80010e0 <Error_Handler>
  }

  AiotClient_Init();
 8000b2c:	f7ff ff68 	bl	8000a00 <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000b30:	482d      	ldr	r0, [pc, #180]	@ (8000be8 <main+0x10c>)
 8000b32:	f001 fdc9 	bl	80026c8 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <main+0x64>
  {
	  Error_Handler();
 8000b3c:	f000 fad0 	bl	80010e0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000b40:	492a      	ldr	r1, [pc, #168]	@ (8000bec <main+0x110>)
 8000b42:	482b      	ldr	r0, [pc, #172]	@ (8000bf0 <main+0x114>)
 8000b44:	f003 fcc8 	bl	80044d8 <strstr>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d01d      	beq.n	8000b8a <main+0xae>
 8000b4e:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <main+0x114>)
 8000b50:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000b54:	3b01      	subs	r3, #1
 8000b56:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <main+0x114>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d115      	bne.n	8000b8a <main+0xae>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000b5e:	215b      	movs	r1, #91	@ 0x5b
 8000b60:	4823      	ldr	r0, [pc, #140]	@ (8000bf0 <main+0x114>)
 8000b62:	f003 fc3d 	bl	80043e0 <strchr>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4822      	ldr	r0, [pc, #136]	@ (8000bf4 <main+0x118>)
 8000b6c:	f003 fd3d 	bl	80045ea <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000b70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b74:	2100      	movs	r1, #0
 8000b76:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <main+0x114>)
 8000b78:	f003 fc2a 	bl	80043d0 <memset>
			cb_data.length = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <main+0x114>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000b84:	481b      	ldr	r0, [pc, #108]	@ (8000bf4 <main+0x118>)
 8000b86:	f000 f9e3 	bl	8000f50 <esp_event>
		}
		if(rx2Flag)
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <main+0x11c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <main+0xc6>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000b94:	4919      	ldr	r1, [pc, #100]	@ (8000bfc <main+0x120>)
 8000b96:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <main+0x124>)
 8000b98:	f003 faa8 	bl	80040ec <iprintf>
			rx2Flag =0;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <main+0x11c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		}

		if(tim3Flag1Sec)	//1초에 한번
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <main+0x128>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0ca      	beq.n	8000b40 <main+0x64>
		{
			tim3Flag1Sec = 0;
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <main+0x128>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <main+0x12c>)
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <main+0x130>)
 8000bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1aca      	subs	r2, r1, r3
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d1ba      	bne.n	8000b40 <main+0x64>
			{
				if(esp_get_status() != 0)
 8000bca:	f7ff fe31 	bl	8000830 <esp_get_status>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0b5      	beq.n	8000b40 <main+0x64>
				{
					printf("server connecting ...\r\n");
 8000bd4:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <main+0x134>)
 8000bd6:	f003 faf9 	bl	80041cc <puts>
					esp_client_conn();
 8000bda:	f7ff fdfd 	bl	80007d8 <esp_client_conn>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000bde:	e7af      	b.n	8000b40 <main+0x64>
 8000be0:	08005728 	.word	0x08005728
 8000be4:	08005740 	.word	0x08005740
 8000be8:	200008d8 	.word	0x200008d8
 8000bec:	08005754 	.word	0x08005754
 8000bf0:	200004d0 	.word	0x200004d0
 8000bf4:	200009b4 	.word	0x200009b4
 8000bf8:	20000498 	.word	0x20000498
 8000bfc:	2000049c 	.word	0x2000049c
 8000c00:	0800575c 	.word	0x0800575c
 8000c04:	20000000 	.word	0x20000000
 8000c08:	200009b0 	.word	0x200009b0
 8000c0c:	cccccccd 	.word	0xcccccccd
 8000c10:	0800576c 	.word	0x0800576c

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	@ 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	2230      	movs	r2, #48	@ 0x30
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fbd4 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <SystemClock_Config+0xcc>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <SystemClock_Config+0xcc>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c48:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c84:	2308      	movs	r3, #8
 8000c86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c88:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 f82c 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ca6:	f000 fa1b 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fa8e 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cd2:	f000 fa05 	bl	80010e0 <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	@ 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d06:	4a1e      	ldr	r2, [pc, #120]	@ (8000d80 <MX_TIM3_Init+0x98>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d0c:	2253      	movs	r2, #83	@ 0x53
 8000d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d2c:	f001 fc7c 	bl	8002628 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 f9d3 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d48:	f001 fe10 	bl	800296c <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f9c5 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d64:	f002 f812 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d6e:	f000 f9b7 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200008d8 	.word	0x200008d8
 8000d80:	40000400 	.word	0x40000400

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f002 f868 	bl	8002e90 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f98b 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000920 	.word	0x20000920
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <MX_USART6_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000de4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000de8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART6_UART_Init+0x4c>)
 8000e10:	f002 f83e 	bl	8002e90 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f961 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000968 	.word	0x20000968
 8000e28:	40011400 	.word	0x40011400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_GPIO_Init+0xd4>)
 8000eb8:	f000 ff04 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <MX_GPIO_Init+0xd8>)
 8000ed4:	f000 fd72 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_GPIO_Init+0xd4>)
 8000ef0:	f000 fd64 	bl	80019bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020800 	.word	0x40020800

08000f08 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <MX_GPIO_LED_ON+0x20>)
 8000f1a:	f000 fed3 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020000 	.word	0x40020000

08000f2c <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <MX_GPIO_LED_OFF+0x20>)
 8000f3e:	f000 fec1 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020000 	.word	0x40020000

08000f50 <esp_event>:
void esp_event(char * recvBuf)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]
  int i=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000f5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2240      	movs	r2, #64	@ 0x40
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fa2b 	bl	80043d0 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f93a 	bl	80001f4 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	3b01      	subs	r3, #1
 8000f84:	4a39      	ldr	r2, [pc, #228]	@ (800106c <esp_event+0x11c>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4838      	ldr	r0, [pc, #224]	@ (8001070 <esp_event+0x120>)
 8000f8e:	f003 f8ad 	bl	80040ec <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000f92:	4938      	ldr	r1, [pc, #224]	@ (8001074 <esp_event+0x124>)
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f003 fa43 	bl	8004420 <strtok>
 8000f9a:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000f9c:	e011      	b.n	8000fc2 <esp_event+0x72>
  {
    pArray[i] = pToken;
 8000f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	3368      	adds	r3, #104	@ 0x68
 8000fa4:	443b      	add	r3, r7
 8000fa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fa8:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fae:	3301      	adds	r3, #1
 8000fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8000fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	dc08      	bgt.n	8000fca <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8000fb8:	492e      	ldr	r1, [pc, #184]	@ (8001074 <esp_event+0x124>)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f003 fa30 	bl	8004420 <strtok>
 8000fc0:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1ea      	bne.n	8000f9e <esp_event+0x4e>
 8000fc8:	e000      	b.n	8000fcc <esp_event+0x7c>
      break;
 8000fca:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8000fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fce:	492a      	ldr	r1, [pc, #168]	@ (8001078 <esp_event+0x128>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f905 	bl	80001e0 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12c      	bne.n	8001036 <esp_event+0xe6>
  {
  	if(!strcmp(pArray[2],"ON"))
 8000fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fde:	4927      	ldr	r1, [pc, #156]	@ (800107c <esp_event+0x12c>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8fd 	bl	80001e0 <strcmp>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <esp_event+0xa4>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ff8b 	bl	8000f08 <MX_GPIO_LED_ON>
 8000ff2:	e00a      	b.n	800100a <esp_event+0xba>
  	}
	else if(!strcmp(pArray[2],"OFF"))
 8000ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ff6:	4922      	ldr	r1, [pc, #136]	@ (8001080 <esp_event+0x130>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8f1 	bl	80001e0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <esp_event+0xba>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8001004:	2020      	movs	r0, #32
 8001006:	f7ff ff91 	bl	8000f2c <MX_GPIO_LED_OFF>
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 800100a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800100c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800100e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001010:	f107 000c 	add.w	r0, r7, #12
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	460b      	mov	r3, r1
 8001018:	491a      	ldr	r1, [pc, #104]	@ (8001084 <esp_event+0x134>)
 800101a:	f003 f8df 	bl	80041dc <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fd00 	bl	8000a28 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4816      	ldr	r0, [pc, #88]	@ (8001088 <esp_event+0x138>)
 8001030:	f003 f85c 	bl	80040ec <iprintf>
 8001034:	e017      	b.n	8001066 <esp_event+0x116>
  else if(!strncmp(pArray[1]," New conn",8))
 8001036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001038:	2208      	movs	r2, #8
 800103a:	4914      	ldr	r1, [pc, #80]	@ (800108c <esp_event+0x13c>)
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f9dc 	bl	80043fa <strncmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <esp_event+0x110>
  else if(!strncmp(pArray[1]," Already log",8))
 8001048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800104a:	2208      	movs	r2, #8
 800104c:	4910      	ldr	r1, [pc, #64]	@ (8001090 <esp_event+0x140>)
 800104e:	4618      	mov	r0, r3
 8001050:	f003 f9d3 	bl	80043fa <strncmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d104      	bne.n	8001064 <esp_event+0x114>
	  esp_client_conn();
 800105a:	f7ff fbbd 	bl	80007d8 <esp_client_conn>
      return;
 800105e:	e002      	b.n	8001066 <esp_event+0x116>
     return;
 8001060:	bf00      	nop
 8001062:	e000      	b.n	8001066 <esp_event+0x116>
      return;
 8001064:	bf00      	nop
}
 8001066:	3768      	adds	r7, #104	@ 0x68
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200009b4 	.word	0x200009b4
 8001070:	08005784 	.word	0x08005784
 8001074:	08005798 	.word	0x08005798
 8001078:	0800579c 	.word	0x0800579c
 800107c:	080057a0 	.word	0x080057a0
 8001080:	080057a4 	.word	0x080057a4
 8001084:	080057a8 	.word	0x080057a8
 8001088:	080057d0 	.word	0x080057d0
 800108c:	080057b4 	.word	0x080057b4
 8001090:	080057c0 	.word	0x080057c0

08001094 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a0c      	ldr	r2, [pc, #48]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010a4:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010ae:	db0a      	blt.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010be:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
	}
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200009f4 	.word	0x200009f4
 80010d8:	20000000 	.word	0x20000000
 80010dc:	200009b0 	.word	0x200009b0

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <Error_Handler+0x8>

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	@ 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112a:	2007      	movs	r0, #7
 800112c:	f000 fb72 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <HAL_TIM_Base_MspInit+0x48>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d115      	bne.n	800117a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_TIM_Base_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <HAL_TIM_Base_MspInit+0x4c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_TIM_Base_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	201d      	movs	r0, #29
 8001170:	f000 fb5b 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001174:	201d      	movs	r0, #29
 8001176:	f000 fb74 	bl	8001862 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40000400 	.word	0x40000400
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	@ 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001294 <HAL_UART_MspInit+0x108>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d134      	bne.n	8001218 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a38      	ldr	r2, [pc, #224]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e6:	230c      	movs	r3, #12
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f6:	2307      	movs	r3, #7
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4826      	ldr	r0, [pc, #152]	@ (800129c <HAL_UART_MspInit+0x110>)
 8001202:	f000 fbdb 	bl	80019bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2026      	movs	r0, #38	@ 0x26
 800120c:	f000 fb0d 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001210:	2026      	movs	r0, #38	@ 0x26
 8001212:	f000 fb26 	bl	8001862 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001216:	e038      	b.n	800128a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <HAL_UART_MspInit+0x114>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d133      	bne.n	800128a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_UART_MspInit+0x10c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125a:	23c0      	movs	r3, #192	@ 0xc0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800126a:	2308      	movs	r3, #8
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <HAL_UART_MspInit+0x118>)
 8001276:	f000 fba1 	bl	80019bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2047      	movs	r0, #71	@ 0x47
 8001280:	f000 fad3 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001284:	2047      	movs	r0, #71	@ 0x47
 8001286:	f000 faec 	bl	8001862 <HAL_NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	@ 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40011400 	.word	0x40011400
 80012a4:	40020800 	.word	0x40020800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f975 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM3_IRQHandler+0x10>)
 800130e:	f001 fa3d 	bl	800278c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200008d8 	.word	0x200008d8

0800131c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <USART2_IRQHandler+0x10>)
 8001322:	f001 feb5 	bl	8003090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000920 	.word	0x20000920

08001330 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <USART6_IRQHandler+0x10>)
 8001336:	f001 feab 	bl	8003090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000968 	.word	0x20000968

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	f003 f917 	bl	8004590 <__errno>
 8001362:	4603      	mov	r3, r0
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_exit>:

void _exit (int status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <_exit+0x12>

0800138a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00a      	b.n	80013b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139c:	f3af 8000 	nop.w
 80013a0:	4601      	mov	r1, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbf0      	blt.n	800139c <_read+0x12>
  }

  return len;
 80013ba:	687b      	ldr	r3, [r7, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e009      	b.n	80013ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60ba      	str	r2, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fb64 	bl	8000aac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf1      	blt.n	80013d6 <_write+0x12>
  }
  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_close>:

int _close(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_isatty>:

int _isatty(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f003 f87c 	bl	8004590 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20020000 	.word	0x20020000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	200009f8 	.word	0x200009f8
 80014cc:	20000b50 	.word	0x20000b50

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800152c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f8:	f7ff ffea 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	@ (8001534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	@ (8001540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f003 f83b 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fad9 	bl	8000adc <main>
  bx  lr    
 800152a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001538:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 800153c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001540:	20000b4c 	.word	0x20000b4c

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f94f 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fdb6 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000004 	.word	0x20000004
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c
 8001610:	200009fc 	.word	0x200009fc

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200009fc 	.word	0x200009fc

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	@ (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	@ (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feb6 	bl	8001614 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d008      	beq.n	80018c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e052      	b.n	800196e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0216 	bic.w	r2, r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <HAL_DMA_Abort+0x62>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0208 	bic.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	e013      	b.n	8001942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191a:	f7ff fe7b 	bl	8001614 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b05      	cmp	r3, #5
 8001926:	d90c      	bls.n	8001942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e015      	b.n	800196e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e4      	bne.n	800191a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	223f      	movs	r2, #63	@ 0x3f
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d004      	beq.n	8001994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e00c      	b.n	80019ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2205      	movs	r2, #5
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e159      	b.n	8001c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8148 	bne.w	8001c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a2 	beq.w	8001c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b57      	ldr	r3, [pc, #348]	@ (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b54      	ldr	r3, [pc, #336]	@ (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a52      	ldr	r2, [pc, #328]	@ (8001ca8 <HAL_GPIO_Init+0x2ec>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a49      	ldr	r2, [pc, #292]	@ (8001cac <HAL_GPIO_Init+0x2f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x202>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a48      	ldr	r2, [pc, #288]	@ (8001cb0 <HAL_GPIO_Init+0x2f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x1fe>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a47      	ldr	r2, [pc, #284]	@ (8001cb4 <HAL_GPIO_Init+0x2f8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_GPIO_Init+0x2fc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x1f6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a45      	ldr	r2, [pc, #276]	@ (8001cbc <HAL_GPIO_Init+0x300>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x1f2>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x204>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	@ (8001ca8 <HAL_GPIO_Init+0x2ec>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bde:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c02:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c2c:	4a24      	ldr	r2, [pc, #144]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c56:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c80:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	f67f aea2 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e267      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b85      	ldr	r3, [pc, #532]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b82      	ldr	r3, [pc, #520]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e242      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a75      	ldr	r2, [pc, #468]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b70      	ldr	r3, [pc, #448]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b6d      	ldr	r3, [pc, #436]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6c      	ldr	r2, [pc, #432]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a68      	ldr	r2, [pc, #416]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a65      	ldr	r2, [pc, #404]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc30 	bl	8001614 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fc2c 	bl	8001614 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e207      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b5b      	ldr	r3, [pc, #364]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc1c 	bl	8001614 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fc18 	bl	8001614 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1f3      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1c7      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4937      	ldr	r1, [pc, #220]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b34      	ldr	r3, [pc, #208]	@ (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fbd1 	bl	8001614 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fbcd 	bl	8001614 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1a8      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4925      	ldr	r1, [pc, #148]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fbb0 	bl	8001614 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fbac 	bl	8001614 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e187      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d036      	beq.n	8001f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff fb90 	bl	8001614 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb8c 	bl	8001614 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e167      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
 8001f16:	e01b      	b.n	8001f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb79 	bl	8001614 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e00e      	b.n	8001f44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fb75 	bl	8001614 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d907      	bls.n	8001f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e150      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ea      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8097 	beq.w	800208c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b81      	ldr	r3, [pc, #516]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b7d      	ldr	r3, [pc, #500]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a7c      	ldr	r2, [pc, #496]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b77      	ldr	r3, [pc, #476]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b74      	ldr	r3, [pc, #464]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fb35 	bl	8001614 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff fb31 	bl	8001614 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e10c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2ea>
 8001fd4:	4b64      	ldr	r3, [pc, #400]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a63      	ldr	r2, [pc, #396]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x30c>
 8001fea:	4b5f      	ldr	r3, [pc, #380]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	4a5e      	ldr	r2, [pc, #376]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8002004:	4b58      	ldr	r3, [pc, #352]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002008:	4a57      	ldr	r2, [pc, #348]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002010:	4b55      	ldr	r3, [pc, #340]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a54      	ldr	r2, [pc, #336]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff faf6 	bl	8001614 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff faf2 	bl	8001614 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0cb      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x334>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fae0 	bl	8001614 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7ff fadc 	bl	8001614 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0b5      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	4a38      	ldr	r2, [pc, #224]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80a1 	beq.w	80021d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d05c      	beq.n	800215c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d141      	bne.n	800212e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fab0 	bl	8001614 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff faac 	bl	8001614 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e087      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	491b      	ldr	r1, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fa85 	bl	8001614 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fa81 	bl	8001614 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e05c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x416>
 800212c:	e054      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fa6e 	bl	8001614 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fa6a 	bl	8001614 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e045      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e038      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
 8002170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d028      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d121      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	3b01      	subs	r3, #1
 80021be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7ff f99c 	bl	8001614 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff f998 	bl	8001614 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f8fc 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	080057e4 	.word	0x080057e4
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000008 	.word	0x20000008

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b8:	b094      	sub	sp, #80	@ 0x50
 80023ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023cc:	4b79      	ldr	r3, [pc, #484]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d00d      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x40>
 80023d8:	2b08      	cmp	r3, #8
 80023da:	f200 80e1 	bhi.w	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x3a>
 80023e6:	e0db      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b73      	ldr	r3, [pc, #460]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023ec:	e0db      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ee:	4b73      	ldr	r3, [pc, #460]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x208>)
 80023f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b6d      	ldr	r3, [pc, #436]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b6a      	ldr	r3, [pc, #424]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	2200      	movs	r2, #0
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
 8002422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	f04f 0000 	mov.w	r0, #0
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	0159      	lsls	r1, r3, #5
 8002434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002438:	0150      	lsls	r0, r2, #5
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4621      	mov	r1, r4
 8002440:	1a51      	subs	r1, r2, r1
 8002442:	6139      	str	r1, [r7, #16]
 8002444:	4629      	mov	r1, r5
 8002446:	eb63 0301 	sbc.w	r3, r3, r1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002458:	4659      	mov	r1, fp
 800245a:	018b      	lsls	r3, r1, #6
 800245c:	4651      	mov	r1, sl
 800245e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002462:	4651      	mov	r1, sl
 8002464:	018a      	lsls	r2, r1, #6
 8002466:	4651      	mov	r1, sl
 8002468:	ebb2 0801 	subs.w	r8, r2, r1
 800246c:	4659      	mov	r1, fp
 800246e:	eb63 0901 	sbc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	462b      	mov	r3, r5
 8002494:	eb49 0303 	adc.w	r3, r9, r3
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024a6:	4629      	mov	r1, r5
 80024a8:	024b      	lsls	r3, r1, #9
 80024aa:	4621      	mov	r1, r4
 80024ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b0:	4621      	mov	r1, r4
 80024b2:	024a      	lsls	r2, r1, #9
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024c4:	f7fd fef4 	bl	80002b0 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4613      	mov	r3, r2
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d0:	e058      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	4611      	mov	r1, r2
 80024de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fe:	0150      	lsls	r0, r2, #5
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4641      	mov	r1, r8
 8002506:	ebb2 0a01 	subs.w	sl, r2, r1
 800250a:	4649      	mov	r1, r9
 800250c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800251c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002524:	ebb2 040a 	subs.w	r4, r2, sl
 8002528:	eb63 050b 	sbc.w	r5, r3, fp
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	00eb      	lsls	r3, r5, #3
 8002536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253a:	00e2      	lsls	r2, r4, #3
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	4643      	mov	r3, r8
 8002542:	18e3      	adds	r3, r4, r3
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	464b      	mov	r3, r9
 8002548:	eb45 0303 	adc.w	r3, r5, r3
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800256e:	2200      	movs	r2, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002578:	f7fd fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3750      	adds	r7, #80	@ 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	080057f4 	.word	0x080057f4

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002604:	f7ff ffdc 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0b5b      	lsrs	r3, r3, #13
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	080057f4 	.word	0x080057f4

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e041      	b.n	80026be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fd74 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fa70 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d001      	beq.n	80026e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e044      	b.n	800276a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_TIM_Base_Start_IT+0xb0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d018      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x6c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270a:	d013      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x6c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_TIM_Base_Start_IT+0xb4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00e      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x6c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_TIM_Base_Start_IT+0xb8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x6c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <HAL_TIM_Base_Start_IT+0xbc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x6c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <HAL_TIM_Base_Start_IT+0xc0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d111      	bne.n	8002758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b06      	cmp	r3, #6
 8002744:	d010      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002756:	e007      	b.n	8002768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40010000 	.word	0x40010000
 800277c:	40000400 	.word	0x40000400
 8002780:	40000800 	.word	0x40000800
 8002784:	40000c00 	.word	0x40000c00
 8002788:	40014000 	.word	0x40014000

0800278c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d020      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0202 	mvn.w	r2, #2
 80027c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f999 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f98b 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f99c 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d020      	beq.n	800283c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0204 	mvn.w	r2, #4
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f973 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f965 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f976 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d020      	beq.n	8002888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01b      	beq.n	8002888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0208 	mvn.w	r2, #8
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2204      	movs	r2, #4
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f94d 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f93f 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f950 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d020      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01b      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2208      	movs	r2, #8
 80028aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f927 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f919 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f92a 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0201 	mvn.w	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fbce 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fab0 	bl	8002e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8fb 	bl	8002b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0220 	mvn.w	r2, #32
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa82 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e0b4      	b.n	8002af2 <HAL_TIM_ConfigClockSource+0x186>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c0:	d03e      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0xd4>
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c6:	f200 8087 	bhi.w	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ce:	f000 8086 	beq.w	8002ade <HAL_TIM_ConfigClockSource+0x172>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d6:	d87f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b70      	cmp	r3, #112	@ 0x70
 80029da:	d01a      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0xa6>
 80029dc:	2b70      	cmp	r3, #112	@ 0x70
 80029de:	d87b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b60      	cmp	r3, #96	@ 0x60
 80029e2:	d050      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x11a>
 80029e4:	2b60      	cmp	r3, #96	@ 0x60
 80029e6:	d877      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b50      	cmp	r3, #80	@ 0x50
 80029ea:	d03c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0xfa>
 80029ec:	2b50      	cmp	r3, #80	@ 0x50
 80029ee:	d873      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d058      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80029f4:	2b40      	cmp	r3, #64	@ 0x40
 80029f6:	d86f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b30      	cmp	r3, #48	@ 0x30
 80029fa:	d064      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	2b30      	cmp	r3, #48	@ 0x30
 80029fe:	d86b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d060      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d867      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05c      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d05a      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	e062      	b.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a22:	f000 f993 	bl	8002d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
      break;
 8002a3e:	e04f      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a50:	f000 f97c 	bl	8002d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a62:	609a      	str	r2, [r3, #8]
      break;
 8002a64:	e03c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	461a      	mov	r2, r3
 8002a74:	f000 f8f0 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2150      	movs	r1, #80	@ 0x50
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f949 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002a84:	e02c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a92:	461a      	mov	r2, r3
 8002a94:	f000 f90f 	bl	8002cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2160      	movs	r1, #96	@ 0x60
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f939 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e01c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 f8d0 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	@ 0x40
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f929 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e00c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f000 f920 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002ad6:	e003      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a37      	ldr	r2, [pc, #220]	@ (8002c3c <TIM_Base_SetConfig+0xf0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a34      	ldr	r2, [pc, #208]	@ (8002c40 <TIM_Base_SetConfig+0xf4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a33      	ldr	r2, [pc, #204]	@ (8002c44 <TIM_Base_SetConfig+0xf8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a32      	ldr	r2, [pc, #200]	@ (8002c48 <TIM_Base_SetConfig+0xfc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <TIM_Base_SetConfig+0xf0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <TIM_Base_SetConfig+0xf4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <TIM_Base_SetConfig+0xf8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	@ (8002c48 <TIM_Base_SetConfig+0xfc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <TIM_Base_SetConfig+0x100>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <TIM_Base_SetConfig+0x104>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	@ (8002c54 <TIM_Base_SetConfig+0x108>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <TIM_Base_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d103      	bne.n	8002c16 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f043 0204 	orr.w	r2, r3, #4
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40014400 	.word	0x40014400
 8002c54:	40014800 	.word	0x40014800

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f023 0210 	bic.w	r2, r3, #16
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f043 0307 	orr.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e050      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d013      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40014000 	.word	0x40014000

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e042      	b.n	8002f28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe f968 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	@ 0x24
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fdd3 	bl	8003a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	@ 0x28
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d175      	bne.n	800303c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Transmit+0x2c>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e06e      	b.n	800303e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2221      	movs	r2, #33	@ 0x21
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fb51 	bl	8001614 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f88:	d108      	bne.n	8002f9c <HAL_UART_Transmit+0x6c>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e003      	b.n	8002fa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa4:	e02e      	b.n	8003004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	2180      	movs	r1, #128	@ 0x80
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fb37 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e03a      	b.n	800303e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	e007      	b.n	8002ff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1cb      	bne.n	8002fa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2140      	movs	r1, #64	@ 0x40
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fb03 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e006      	b.n	800303e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	4613      	mov	r3, r2
 8003052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d112      	bne.n	8003086 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Receive_IT+0x26>
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e00b      	b.n	8003088 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	461a      	mov	r2, r3
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fb2a 	bl	80036d6 <UART_Start_Receive_IT>
 8003082:	4603      	mov	r3, r0
 8003084:	e000      	b.n	8003088 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0ba      	sub	sp, #232	@ 0xe8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_UART_IRQHandler+0x66>
 80030e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fc07 	bl	8003902 <UART_Receive_IT>
      return;
 80030f4:	e273      	b.n	80035de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80de 	beq.w	80032bc <HAL_UART_IRQHandler+0x22c>
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003110:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80d1 	beq.w	80032bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_UART_IRQHandler+0xae>
 8003126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0xd2>
 800314a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xf6>
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d011      	beq.n	80031b6 <HAL_UART_IRQHandler+0x126>
 8003192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0208 	orr.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 820a 	beq.w	80035d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_UART_IRQHandler+0x14e>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb92 	bl	8003902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e8:	2b40      	cmp	r3, #64	@ 0x40
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_UART_IRQHandler+0x17a>
 8003202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04f      	beq.n	80032aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa9d 	bl	800374a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d141      	bne.n	80032a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3314      	adds	r3, #20
 8003224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800324a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800324e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1d9      	bne.n	800321e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	4a8a      	ldr	r2, [pc, #552]	@ (80034a0 <HAL_UART_IRQHandler+0x410>)
 8003278:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fb79 	bl	8001976 <HAL_DMA_Abort_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003294:	4610      	mov	r0, r2
 8003296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e00e      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9ac 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	e00a      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f9a8 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e006      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9a4 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032b6:	e18d      	b.n	80035d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	bf00      	nop
    return;
 80032ba:	e18b      	b.n	80035d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 8167 	bne.w	8003594 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8160 	beq.w	8003594 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8159 	beq.w	8003594 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	f040 80ce 	bne.w	80034a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80a9 	beq.w	8003470 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003326:	429a      	cmp	r2, r3
 8003328:	f080 80a2 	bcs.w	8003470 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003332:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333e:	f000 8088 	beq.w	8003452 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800336e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800337a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d9      	bne.n	8003342 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800339e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e1      	bne.n	800338e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e3      	bne.n	80033ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003422:	f023 0310 	bic.w	r3, r3, #16
 8003426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003434:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003436:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800343a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fa22 	bl	8001896 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8cf 	bl	800360c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800346e:	e0b3      	b.n	80035d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003478:	429a      	cmp	r2, r3
 800347a:	f040 80ad 	bne.w	80035d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003488:	f040 80a6 	bne.w	80035d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8b7 	bl	800360c <HAL_UARTEx_RxEventCallback>
      return;
 800349e:	e09b      	b.n	80035d8 <HAL_UART_IRQHandler+0x548>
 80034a0:	08003811 	.word	0x08003811
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 808e 	beq.w	80035dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80034c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8089 	beq.w	80035dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80034f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	623b      	str	r3, [r7, #32]
   return(result);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003526:	633a      	str	r2, [r7, #48]	@ 0x30
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800356c:	61fa      	str	r2, [r7, #28]
 800356e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	617b      	str	r3, [r7, #20]
   return(result);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e3      	bne.n	8003548 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f83d 	bl	800360c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003592:	e023      	b.n	80035dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_UART_IRQHandler+0x524>
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f940 	bl	8003832 <UART_Transmit_IT>
    return;
 80035b2:	e014      	b.n	80035de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <HAL_UART_IRQHandler+0x54e>
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f980 	bl	80038d2 <UART_EndTransmit_IT>
    return;
 80035d2:	e004      	b.n	80035de <HAL_UART_IRQHandler+0x54e>
    return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_UART_IRQHandler+0x54e>
      return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_UART_IRQHandler+0x54e>
      return;
 80035dc:	bf00      	nop
  }
}
 80035de:	37e8      	adds	r7, #232	@ 0xe8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	e03b      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d037      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7fd ffe9 	bl	8001614 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <UART_WaitOnFlagUntilTimeout+0x30>
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e03a      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d023      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d020      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d01d      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d116      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f857 	bl	800374a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2208      	movs	r2, #8
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d0b4      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2222      	movs	r2, #34	@ 0x22
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b095      	sub	sp, #84	@ 0x54
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003772:	643a      	str	r2, [r7, #64]	@ 0x40
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	61fb      	str	r3, [r7, #28]
   return(result);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d119      	bne.n	80037f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0310 	bic.w	r3, r3, #16
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e2:	61ba      	str	r2, [r7, #24]
 80037e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	613b      	str	r3, [r7, #16]
   return(result);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e5      	bne.n	80037c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003804:	bf00      	nop
 8003806:	3754      	adds	r7, #84	@ 0x54
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff fee7 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b21      	cmp	r3, #33	@ 0x21
 8003844:	d13e      	bne.n	80038c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384e:	d114      	bne.n	800387a <UART_Transmit_IT+0x48>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d110      	bne.n	800387a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	621a      	str	r2, [r3, #32]
 8003878:	e008      	b.n	800388c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6211      	str	r1, [r2, #32]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29b      	uxth	r3, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4619      	mov	r1, r3
 800389a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10f      	bne.n	80038c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fe76 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08c      	sub	sp, #48	@ 0x30
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b22      	cmp	r3, #34	@ 0x22
 800391c:	f040 80aa 	bne.w	8003a74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003928:	d115      	bne.n	8003956 <UART_Receive_IT+0x54>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d111      	bne.n	8003956 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	b29a      	uxth	r2, r3
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
 8003954:	e024      	b.n	80039a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d007      	beq.n	8003976 <UART_Receive_IT+0x74>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <UART_Receive_IT+0x82>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e008      	b.n	8003996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003990:	b2da      	uxtb	r2, r3
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4619      	mov	r1, r3
 80039ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d15d      	bne.n	8003a70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0220 	bic.w	r2, r2, #32
 80039c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d135      	bne.n	8003a66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	623a      	str	r2, [r7, #32]
 8003a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d10a      	bne.n	8003a58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fdd4 	bl	800360c <HAL_UARTEx_RxEventCallback>
 8003a64:	e002      	b.n	8003a6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc ff6c 	bl	8000944 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e002      	b.n	8003a76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3730      	adds	r7, #48	@ 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b0c0      	sub	sp, #256	@ 0x100
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	68d9      	ldr	r1, [r3, #12]
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	ea40 0301 	orr.w	r3, r0, r1
 8003aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ad8:	f021 010c 	bic.w	r1, r1, #12
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afa:	6999      	ldr	r1, [r3, #24]
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	ea40 0301 	orr.w	r3, r0, r1
 8003b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d005      	beq.n	8003b20 <UART_SetConfig+0xa0>
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003d50 <UART_SetConfig+0x2d0>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d104      	bne.n	8003b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b20:	f7fe fd6e 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8003b24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b28:	e003      	b.n	8003b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f7fe fd55 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8003b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b3c:	f040 810c 	bne.w	8003d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b62:	4621      	mov	r1, r4
 8003b64:	eb12 0801 	adds.w	r8, r2, r1
 8003b68:	4629      	mov	r1, r5
 8003b6a:	eb43 0901 	adc.w	r9, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b82:	4690      	mov	r8, r2
 8003b84:	4699      	mov	r9, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb18 0303 	adds.w	r3, r8, r3
 8003b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b90:	462b      	mov	r3, r5
 8003b92:	eb49 0303 	adc.w	r3, r9, r3
 8003b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bae:	460b      	mov	r3, r1
 8003bb0:	18db      	adds	r3, r3, r3
 8003bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	eb42 0303 	adc.w	r3, r2, r3
 8003bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bc4:	f7fc fb74 	bl	80002b0 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b61      	ldr	r3, [pc, #388]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003bce:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	011c      	lsls	r4, r3, #4
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8003bfe:	4649      	mov	r1, r9
 8003c00:	eb43 0b01 	adc.w	fp, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c18:	4692      	mov	sl, r2
 8003c1a:	469b      	mov	fp, r3
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c26:	464b      	mov	r3, r9
 8003c28:	eb4b 0303 	adc.w	r3, fp, r3
 8003c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c44:	460b      	mov	r3, r1
 8003c46:	18db      	adds	r3, r3, r3
 8003c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c5a:	f7fc fb29 	bl	80002b0 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2264      	movs	r2, #100	@ 0x64
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	1acb      	subs	r3, r1, r3
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c7a:	4b36      	ldr	r3, [pc, #216]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c88:	441c      	add	r4, r3
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cac:	4641      	mov	r1, r8
 8003cae:	1851      	adds	r1, r2, r1
 8003cb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	414b      	adcs	r3, r1
 8003cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	00cb      	lsls	r3, r1, #3
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cce:	4651      	mov	r1, sl
 8003cd0:	00ca      	lsls	r2, r1, #3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d00:	460b      	mov	r3, r1
 8003d02:	18db      	adds	r3, r3, r3
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d06:	4613      	mov	r3, r2
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d16:	f7fc facb 	bl	80002b0 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	@ 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	3332      	adds	r3, #50	@ 0x32
 8003d32:	4a08      	ldr	r2, [pc, #32]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4422      	add	r2, r4
 8003d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d48:	e106      	b.n	8003f58 <UART_SetConfig+0x4d8>
 8003d4a:	bf00      	nop
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	40011400 	.word	0x40011400
 8003d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d6a:	4642      	mov	r2, r8
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	6239      	str	r1, [r7, #32]
 8003d72:	415b      	adcs	r3, r3
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	1854      	adds	r4, r2, r1
 8003d7e:	4649      	mov	r1, r9
 8003d80:	eb43 0501 	adc.w	r5, r3, r1
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	00eb      	lsls	r3, r5, #3
 8003d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d92:	00e2      	lsls	r2, r4, #3
 8003d94:	4614      	mov	r4, r2
 8003d96:	461d      	mov	r5, r3
 8003d98:	4643      	mov	r3, r8
 8003d9a:	18e3      	adds	r3, r4, r3
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da0:	464b      	mov	r3, r9
 8003da2:	eb45 0303 	adc.w	r3, r5, r3
 8003da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003db6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	008a      	lsls	r2, r1, #2
 8003dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dd8:	f7fc fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <UART_SetConfig+0x4e4>)
 8003de2:	fba3 2302 	umull	r2, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	011c      	lsls	r4, r3, #4
 8003dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003df4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	61b9      	str	r1, [r7, #24]
 8003e04:	415b      	adcs	r3, r3
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	1851      	adds	r1, r2, r1
 8003e10:	6139      	str	r1, [r7, #16]
 8003e12:	4649      	mov	r1, r9
 8003e14:	414b      	adcs	r3, r1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e24:	4659      	mov	r1, fp
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4651      	mov	r1, sl
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e40:	464b      	mov	r3, r9
 8003e42:	460a      	mov	r2, r1
 8003e44:	eb42 0303 	adc.w	r3, r2, r3
 8003e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e64:	4649      	mov	r1, r9
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e6e:	4641      	mov	r1, r8
 8003e70:	008a      	lsls	r2, r1, #2
 8003e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e76:	f7fc fa1b 	bl	80002b0 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4b38      	ldr	r3, [pc, #224]	@ (8003f64 <UART_SetConfig+0x4e4>)
 8003e82:	fba3 2301 	umull	r2, r3, r3, r1
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2264      	movs	r2, #100	@ 0x64
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	1acb      	subs	r3, r1, r3
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	3332      	adds	r3, #50	@ 0x32
 8003e94:	4a33      	ldr	r2, [pc, #204]	@ (8003f64 <UART_SetConfig+0x4e4>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	441c      	add	r4, r3
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	1851      	adds	r1, r2, r1
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ed8:	4659      	mov	r1, fp
 8003eda:	00cb      	lsls	r3, r1, #3
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	00ca      	lsls	r2, r1, #3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	4642      	mov	r2, r8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	eb42 0303 	adc.w	r3, r2, r3
 8003efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f14:	4649      	mov	r1, r9
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f1e:	4641      	mov	r1, r8
 8003f20:	008a      	lsls	r2, r1, #2
 8003f22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f26:	f7fc f9c3 	bl	80002b0 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <UART_SetConfig+0x4e4>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	@ 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	3332      	adds	r3, #50	@ 0x32
 8003f42:	4a08      	ldr	r2, [pc, #32]	@ (8003f64 <UART_SetConfig+0x4e4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4422      	add	r2, r4
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f64:	51eb851f 	.word	0x51eb851f

08003f68 <std>:
 8003f68:	2300      	movs	r3, #0
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f76:	6083      	str	r3, [r0, #8]
 8003f78:	8181      	strh	r1, [r0, #12]
 8003f7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f7c:	81c2      	strh	r2, [r0, #14]
 8003f7e:	6183      	str	r3, [r0, #24]
 8003f80:	4619      	mov	r1, r3
 8003f82:	2208      	movs	r2, #8
 8003f84:	305c      	adds	r0, #92	@ 0x5c
 8003f86:	f000 fa23 	bl	80043d0 <memset>
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <std+0x58>)
 8003f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <std+0x5c>)
 8003f90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <std+0x60>)
 8003f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <std+0x64>)
 8003f98:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <std+0x68>)
 8003f9c:	6224      	str	r4, [r4, #32]
 8003f9e:	429c      	cmp	r4, r3
 8003fa0:	d006      	beq.n	8003fb0 <std+0x48>
 8003fa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fa6:	4294      	cmp	r4, r2
 8003fa8:	d002      	beq.n	8003fb0 <std+0x48>
 8003faa:	33d0      	adds	r3, #208	@ 0xd0
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d105      	bne.n	8003fbc <std+0x54>
 8003fb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb8:	f000 bb14 	b.w	80045e4 <__retarget_lock_init_recursive>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08004221 	.word	0x08004221
 8003fc4:	08004243 	.word	0x08004243
 8003fc8:	0800427b 	.word	0x0800427b
 8003fcc:	0800429f 	.word	0x0800429f
 8003fd0:	20000a00 	.word	0x20000a00

08003fd4 <stdio_exit_handler>:
 8003fd4:	4a02      	ldr	r2, [pc, #8]	@ (8003fe0 <stdio_exit_handler+0xc>)
 8003fd6:	4903      	ldr	r1, [pc, #12]	@ (8003fe4 <stdio_exit_handler+0x10>)
 8003fd8:	4803      	ldr	r0, [pc, #12]	@ (8003fe8 <stdio_exit_handler+0x14>)
 8003fda:	f000 b869 	b.w	80040b0 <_fwalk_sglue>
 8003fde:	bf00      	nop
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	080051a9 	.word	0x080051a9
 8003fe8:	20000020 	.word	0x20000020

08003fec <cleanup_stdio>:
 8003fec:	6841      	ldr	r1, [r0, #4]
 8003fee:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <cleanup_stdio+0x34>)
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	d001      	beq.n	8003ffc <cleanup_stdio+0x10>
 8003ff8:	f001 f8d6 	bl	80051a8 <_fflush_r>
 8003ffc:	68a1      	ldr	r1, [r4, #8]
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <cleanup_stdio+0x38>)
 8004000:	4299      	cmp	r1, r3
 8004002:	d002      	beq.n	800400a <cleanup_stdio+0x1e>
 8004004:	4620      	mov	r0, r4
 8004006:	f001 f8cf 	bl	80051a8 <_fflush_r>
 800400a:	68e1      	ldr	r1, [r4, #12]
 800400c:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <cleanup_stdio+0x3c>)
 800400e:	4299      	cmp	r1, r3
 8004010:	d004      	beq.n	800401c <cleanup_stdio+0x30>
 8004012:	4620      	mov	r0, r4
 8004014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004018:	f001 b8c6 	b.w	80051a8 <_fflush_r>
 800401c:	bd10      	pop	{r4, pc}
 800401e:	bf00      	nop
 8004020:	20000a00 	.word	0x20000a00
 8004024:	20000a68 	.word	0x20000a68
 8004028:	20000ad0 	.word	0x20000ad0

0800402c <global_stdio_init.part.0>:
 800402c:	b510      	push	{r4, lr}
 800402e:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <global_stdio_init.part.0+0x30>)
 8004030:	4c0b      	ldr	r4, [pc, #44]	@ (8004060 <global_stdio_init.part.0+0x34>)
 8004032:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <global_stdio_init.part.0+0x38>)
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	4620      	mov	r0, r4
 8004038:	2200      	movs	r2, #0
 800403a:	2104      	movs	r1, #4
 800403c:	f7ff ff94 	bl	8003f68 <std>
 8004040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004044:	2201      	movs	r2, #1
 8004046:	2109      	movs	r1, #9
 8004048:	f7ff ff8e 	bl	8003f68 <std>
 800404c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004050:	2202      	movs	r2, #2
 8004052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004056:	2112      	movs	r1, #18
 8004058:	f7ff bf86 	b.w	8003f68 <std>
 800405c:	20000b38 	.word	0x20000b38
 8004060:	20000a00 	.word	0x20000a00
 8004064:	08003fd5 	.word	0x08003fd5

08004068 <__sfp_lock_acquire>:
 8004068:	4801      	ldr	r0, [pc, #4]	@ (8004070 <__sfp_lock_acquire+0x8>)
 800406a:	f000 babc 	b.w	80045e6 <__retarget_lock_acquire_recursive>
 800406e:	bf00      	nop
 8004070:	20000b41 	.word	0x20000b41

08004074 <__sfp_lock_release>:
 8004074:	4801      	ldr	r0, [pc, #4]	@ (800407c <__sfp_lock_release+0x8>)
 8004076:	f000 bab7 	b.w	80045e8 <__retarget_lock_release_recursive>
 800407a:	bf00      	nop
 800407c:	20000b41 	.word	0x20000b41

08004080 <__sinit>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4604      	mov	r4, r0
 8004084:	f7ff fff0 	bl	8004068 <__sfp_lock_acquire>
 8004088:	6a23      	ldr	r3, [r4, #32]
 800408a:	b11b      	cbz	r3, 8004094 <__sinit+0x14>
 800408c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004090:	f7ff bff0 	b.w	8004074 <__sfp_lock_release>
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <__sinit+0x28>)
 8004096:	6223      	str	r3, [r4, #32]
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <__sinit+0x2c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f5      	bne.n	800408c <__sinit+0xc>
 80040a0:	f7ff ffc4 	bl	800402c <global_stdio_init.part.0>
 80040a4:	e7f2      	b.n	800408c <__sinit+0xc>
 80040a6:	bf00      	nop
 80040a8:	08003fed 	.word	0x08003fed
 80040ac:	20000b38 	.word	0x20000b38

080040b0 <_fwalk_sglue>:
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b4:	4607      	mov	r7, r0
 80040b6:	4688      	mov	r8, r1
 80040b8:	4614      	mov	r4, r2
 80040ba:	2600      	movs	r6, #0
 80040bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040c0:	f1b9 0901 	subs.w	r9, r9, #1
 80040c4:	d505      	bpl.n	80040d2 <_fwalk_sglue+0x22>
 80040c6:	6824      	ldr	r4, [r4, #0]
 80040c8:	2c00      	cmp	r4, #0
 80040ca:	d1f7      	bne.n	80040bc <_fwalk_sglue+0xc>
 80040cc:	4630      	mov	r0, r6
 80040ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d2:	89ab      	ldrh	r3, [r5, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d907      	bls.n	80040e8 <_fwalk_sglue+0x38>
 80040d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040dc:	3301      	adds	r3, #1
 80040de:	d003      	beq.n	80040e8 <_fwalk_sglue+0x38>
 80040e0:	4629      	mov	r1, r5
 80040e2:	4638      	mov	r0, r7
 80040e4:	47c0      	blx	r8
 80040e6:	4306      	orrs	r6, r0
 80040e8:	3568      	adds	r5, #104	@ 0x68
 80040ea:	e7e9      	b.n	80040c0 <_fwalk_sglue+0x10>

080040ec <iprintf>:
 80040ec:	b40f      	push	{r0, r1, r2, r3}
 80040ee:	b507      	push	{r0, r1, r2, lr}
 80040f0:	4906      	ldr	r1, [pc, #24]	@ (800410c <iprintf+0x20>)
 80040f2:	ab04      	add	r3, sp, #16
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040fa:	6881      	ldr	r1, [r0, #8]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	f000 fd2b 	bl	8004b58 <_vfiprintf_r>
 8004102:	b003      	add	sp, #12
 8004104:	f85d eb04 	ldr.w	lr, [sp], #4
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr
 800410c:	2000001c 	.word	0x2000001c

08004110 <putchar>:
 8004110:	4b02      	ldr	r3, [pc, #8]	@ (800411c <putchar+0xc>)
 8004112:	4601      	mov	r1, r0
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	6882      	ldr	r2, [r0, #8]
 8004118:	f001 b8e2 	b.w	80052e0 <_putc_r>
 800411c:	2000001c 	.word	0x2000001c

08004120 <_puts_r>:
 8004120:	6a03      	ldr	r3, [r0, #32]
 8004122:	b570      	push	{r4, r5, r6, lr}
 8004124:	6884      	ldr	r4, [r0, #8]
 8004126:	4605      	mov	r5, r0
 8004128:	460e      	mov	r6, r1
 800412a:	b90b      	cbnz	r3, 8004130 <_puts_r+0x10>
 800412c:	f7ff ffa8 	bl	8004080 <__sinit>
 8004130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004132:	07db      	lsls	r3, r3, #31
 8004134:	d405      	bmi.n	8004142 <_puts_r+0x22>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	0598      	lsls	r0, r3, #22
 800413a:	d402      	bmi.n	8004142 <_puts_r+0x22>
 800413c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800413e:	f000 fa52 	bl	80045e6 <__retarget_lock_acquire_recursive>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	0719      	lsls	r1, r3, #28
 8004146:	d502      	bpl.n	800414e <_puts_r+0x2e>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d135      	bne.n	80041ba <_puts_r+0x9a>
 800414e:	4621      	mov	r1, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f000 f8e7 	bl	8004324 <__swsetup_r>
 8004156:	b380      	cbz	r0, 80041ba <_puts_r+0x9a>
 8004158:	f04f 35ff 	mov.w	r5, #4294967295
 800415c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800415e:	07da      	lsls	r2, r3, #31
 8004160:	d405      	bmi.n	800416e <_puts_r+0x4e>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	059b      	lsls	r3, r3, #22
 8004166:	d402      	bmi.n	800416e <_puts_r+0x4e>
 8004168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800416a:	f000 fa3d 	bl	80045e8 <__retarget_lock_release_recursive>
 800416e:	4628      	mov	r0, r5
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	2b00      	cmp	r3, #0
 8004174:	da04      	bge.n	8004180 <_puts_r+0x60>
 8004176:	69a2      	ldr	r2, [r4, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	dc17      	bgt.n	80041ac <_puts_r+0x8c>
 800417c:	290a      	cmp	r1, #10
 800417e:	d015      	beq.n	80041ac <_puts_r+0x8c>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	6022      	str	r2, [r4, #0]
 8004186:	7019      	strb	r1, [r3, #0]
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800418e:	3b01      	subs	r3, #1
 8004190:	60a3      	str	r3, [r4, #8]
 8004192:	2900      	cmp	r1, #0
 8004194:	d1ed      	bne.n	8004172 <_puts_r+0x52>
 8004196:	2b00      	cmp	r3, #0
 8004198:	da11      	bge.n	80041be <_puts_r+0x9e>
 800419a:	4622      	mov	r2, r4
 800419c:	210a      	movs	r1, #10
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f881 	bl	80042a6 <__swbuf_r>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d0d7      	beq.n	8004158 <_puts_r+0x38>
 80041a8:	250a      	movs	r5, #10
 80041aa:	e7d7      	b.n	800415c <_puts_r+0x3c>
 80041ac:	4622      	mov	r2, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f879 	bl	80042a6 <__swbuf_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d1e7      	bne.n	8004188 <_puts_r+0x68>
 80041b8:	e7ce      	b.n	8004158 <_puts_r+0x38>
 80041ba:	3e01      	subs	r6, #1
 80041bc:	e7e4      	b.n	8004188 <_puts_r+0x68>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	220a      	movs	r2, #10
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e7ee      	b.n	80041a8 <_puts_r+0x88>
	...

080041cc <puts>:
 80041cc:	4b02      	ldr	r3, [pc, #8]	@ (80041d8 <puts+0xc>)
 80041ce:	4601      	mov	r1, r0
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f7ff bfa5 	b.w	8004120 <_puts_r>
 80041d6:	bf00      	nop
 80041d8:	2000001c 	.word	0x2000001c

080041dc <siprintf>:
 80041dc:	b40e      	push	{r1, r2, r3}
 80041de:	b510      	push	{r4, lr}
 80041e0:	b09d      	sub	sp, #116	@ 0x74
 80041e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80041e4:	9002      	str	r0, [sp, #8]
 80041e6:	9006      	str	r0, [sp, #24]
 80041e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041ec:	480a      	ldr	r0, [pc, #40]	@ (8004218 <siprintf+0x3c>)
 80041ee:	9107      	str	r1, [sp, #28]
 80041f0:	9104      	str	r1, [sp, #16]
 80041f2:	490a      	ldr	r1, [pc, #40]	@ (800421c <siprintf+0x40>)
 80041f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f8:	9105      	str	r1, [sp, #20]
 80041fa:	2400      	movs	r4, #0
 80041fc:	a902      	add	r1, sp, #8
 80041fe:	6800      	ldr	r0, [r0, #0]
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004204:	f000 fb82 	bl	800490c <_svfiprintf_r>
 8004208:	9b02      	ldr	r3, [sp, #8]
 800420a:	701c      	strb	r4, [r3, #0]
 800420c:	b01d      	add	sp, #116	@ 0x74
 800420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004212:	b003      	add	sp, #12
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000001c 	.word	0x2000001c
 800421c:	ffff0208 	.word	0xffff0208

08004220 <__sread>:
 8004220:	b510      	push	{r4, lr}
 8004222:	460c      	mov	r4, r1
 8004224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004228:	f000 f98e 	bl	8004548 <_read_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	bfab      	itete	ge
 8004230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004232:	89a3      	ldrhlt	r3, [r4, #12]
 8004234:	181b      	addge	r3, r3, r0
 8004236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800423a:	bfac      	ite	ge
 800423c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800423e:	81a3      	strhlt	r3, [r4, #12]
 8004240:	bd10      	pop	{r4, pc}

08004242 <__swrite>:
 8004242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	461f      	mov	r7, r3
 8004248:	898b      	ldrh	r3, [r1, #12]
 800424a:	05db      	lsls	r3, r3, #23
 800424c:	4605      	mov	r5, r0
 800424e:	460c      	mov	r4, r1
 8004250:	4616      	mov	r6, r2
 8004252:	d505      	bpl.n	8004260 <__swrite+0x1e>
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	2302      	movs	r3, #2
 800425a:	2200      	movs	r2, #0
 800425c:	f000 f962 	bl	8004524 <_lseek_r>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	4632      	mov	r2, r6
 800426e:	463b      	mov	r3, r7
 8004270:	4628      	mov	r0, r5
 8004272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004276:	f000 b979 	b.w	800456c <_write_r>

0800427a <__sseek>:
 800427a:	b510      	push	{r4, lr}
 800427c:	460c      	mov	r4, r1
 800427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004282:	f000 f94f 	bl	8004524 <_lseek_r>
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	bf15      	itete	ne
 800428c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800428e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004296:	81a3      	strheq	r3, [r4, #12]
 8004298:	bf18      	it	ne
 800429a:	81a3      	strhne	r3, [r4, #12]
 800429c:	bd10      	pop	{r4, pc}

0800429e <__sclose>:
 800429e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a2:	f000 b92f 	b.w	8004504 <_close_r>

080042a6 <__swbuf_r>:
 80042a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a8:	460e      	mov	r6, r1
 80042aa:	4614      	mov	r4, r2
 80042ac:	4605      	mov	r5, r0
 80042ae:	b118      	cbz	r0, 80042b8 <__swbuf_r+0x12>
 80042b0:	6a03      	ldr	r3, [r0, #32]
 80042b2:	b90b      	cbnz	r3, 80042b8 <__swbuf_r+0x12>
 80042b4:	f7ff fee4 	bl	8004080 <__sinit>
 80042b8:	69a3      	ldr	r3, [r4, #24]
 80042ba:	60a3      	str	r3, [r4, #8]
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	071a      	lsls	r2, r3, #28
 80042c0:	d501      	bpl.n	80042c6 <__swbuf_r+0x20>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	b943      	cbnz	r3, 80042d8 <__swbuf_r+0x32>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	f000 f82b 	bl	8004324 <__swsetup_r>
 80042ce:	b118      	cbz	r0, 80042d8 <__swbuf_r+0x32>
 80042d0:	f04f 37ff 	mov.w	r7, #4294967295
 80042d4:	4638      	mov	r0, r7
 80042d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	6922      	ldr	r2, [r4, #16]
 80042dc:	1a98      	subs	r0, r3, r2
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	b2f6      	uxtb	r6, r6
 80042e2:	4283      	cmp	r3, r0
 80042e4:	4637      	mov	r7, r6
 80042e6:	dc05      	bgt.n	80042f4 <__swbuf_r+0x4e>
 80042e8:	4621      	mov	r1, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 ff5c 	bl	80051a8 <_fflush_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d1ed      	bne.n	80042d0 <__swbuf_r+0x2a>
 80042f4:	68a3      	ldr	r3, [r4, #8]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	6022      	str	r2, [r4, #0]
 8004300:	701e      	strb	r6, [r3, #0]
 8004302:	6962      	ldr	r2, [r4, #20]
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	429a      	cmp	r2, r3
 8004308:	d004      	beq.n	8004314 <__swbuf_r+0x6e>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	07db      	lsls	r3, r3, #31
 800430e:	d5e1      	bpl.n	80042d4 <__swbuf_r+0x2e>
 8004310:	2e0a      	cmp	r6, #10
 8004312:	d1df      	bne.n	80042d4 <__swbuf_r+0x2e>
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 ff46 	bl	80051a8 <_fflush_r>
 800431c:	2800      	cmp	r0, #0
 800431e:	d0d9      	beq.n	80042d4 <__swbuf_r+0x2e>
 8004320:	e7d6      	b.n	80042d0 <__swbuf_r+0x2a>
	...

08004324 <__swsetup_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <__swsetup_r+0xa8>)
 8004328:	4605      	mov	r5, r0
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	460c      	mov	r4, r1
 800432e:	b118      	cbz	r0, 8004338 <__swsetup_r+0x14>
 8004330:	6a03      	ldr	r3, [r0, #32]
 8004332:	b90b      	cbnz	r3, 8004338 <__swsetup_r+0x14>
 8004334:	f7ff fea4 	bl	8004080 <__sinit>
 8004338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433c:	0719      	lsls	r1, r3, #28
 800433e:	d422      	bmi.n	8004386 <__swsetup_r+0x62>
 8004340:	06da      	lsls	r2, r3, #27
 8004342:	d407      	bmi.n	8004354 <__swsetup_r+0x30>
 8004344:	2209      	movs	r2, #9
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e033      	b.n	80043bc <__swsetup_r+0x98>
 8004354:	0758      	lsls	r0, r3, #29
 8004356:	d512      	bpl.n	800437e <__swsetup_r+0x5a>
 8004358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800435a:	b141      	cbz	r1, 800436e <__swsetup_r+0x4a>
 800435c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004360:	4299      	cmp	r1, r3
 8004362:	d002      	beq.n	800436a <__swsetup_r+0x46>
 8004364:	4628      	mov	r0, r5
 8004366:	f000 f975 	bl	8004654 <_free_r>
 800436a:	2300      	movs	r3, #0
 800436c:	6363      	str	r3, [r4, #52]	@ 0x34
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	b94b      	cbnz	r3, 800439e <__swsetup_r+0x7a>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004394:	d003      	beq.n	800439e <__swsetup_r+0x7a>
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f000 ff65 	bl	8005268 <__smakebuf_r>
 800439e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a2:	f013 0201 	ands.w	r2, r3, #1
 80043a6:	d00a      	beq.n	80043be <__swsetup_r+0x9a>
 80043a8:	2200      	movs	r2, #0
 80043aa:	60a2      	str	r2, [r4, #8]
 80043ac:	6962      	ldr	r2, [r4, #20]
 80043ae:	4252      	negs	r2, r2
 80043b0:	61a2      	str	r2, [r4, #24]
 80043b2:	6922      	ldr	r2, [r4, #16]
 80043b4:	b942      	cbnz	r2, 80043c8 <__swsetup_r+0xa4>
 80043b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80043ba:	d1c5      	bne.n	8004348 <__swsetup_r+0x24>
 80043bc:	bd38      	pop	{r3, r4, r5, pc}
 80043be:	0799      	lsls	r1, r3, #30
 80043c0:	bf58      	it	pl
 80043c2:	6962      	ldrpl	r2, [r4, #20]
 80043c4:	60a2      	str	r2, [r4, #8]
 80043c6:	e7f4      	b.n	80043b2 <__swsetup_r+0x8e>
 80043c8:	2000      	movs	r0, #0
 80043ca:	e7f7      	b.n	80043bc <__swsetup_r+0x98>
 80043cc:	2000001c 	.word	0x2000001c

080043d0 <memset>:
 80043d0:	4402      	add	r2, r0
 80043d2:	4603      	mov	r3, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <strchr>:
 80043e0:	b2c9      	uxtb	r1, r1
 80043e2:	4603      	mov	r3, r0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ea:	b112      	cbz	r2, 80043f2 <strchr+0x12>
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d1f9      	bne.n	80043e4 <strchr+0x4>
 80043f0:	4770      	bx	lr
 80043f2:	2900      	cmp	r1, #0
 80043f4:	bf18      	it	ne
 80043f6:	2000      	movne	r0, #0
 80043f8:	4770      	bx	lr

080043fa <strncmp>:
 80043fa:	b510      	push	{r4, lr}
 80043fc:	b16a      	cbz	r2, 800441a <strncmp+0x20>
 80043fe:	3901      	subs	r1, #1
 8004400:	1884      	adds	r4, r0, r2
 8004402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004406:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800440a:	429a      	cmp	r2, r3
 800440c:	d103      	bne.n	8004416 <strncmp+0x1c>
 800440e:	42a0      	cmp	r0, r4
 8004410:	d001      	beq.n	8004416 <strncmp+0x1c>
 8004412:	2a00      	cmp	r2, #0
 8004414:	d1f5      	bne.n	8004402 <strncmp+0x8>
 8004416:	1ad0      	subs	r0, r2, r3
 8004418:	bd10      	pop	{r4, pc}
 800441a:	4610      	mov	r0, r2
 800441c:	e7fc      	b.n	8004418 <strncmp+0x1e>
	...

08004420 <strtok>:
 8004420:	4b16      	ldr	r3, [pc, #88]	@ (800447c <strtok+0x5c>)
 8004422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	681f      	ldr	r7, [r3, #0]
 8004428:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800442a:	4605      	mov	r5, r0
 800442c:	460e      	mov	r6, r1
 800442e:	b9ec      	cbnz	r4, 800446c <strtok+0x4c>
 8004430:	2050      	movs	r0, #80	@ 0x50
 8004432:	f000 f959 	bl	80046e8 <malloc>
 8004436:	4602      	mov	r2, r0
 8004438:	6478      	str	r0, [r7, #68]	@ 0x44
 800443a:	b920      	cbnz	r0, 8004446 <strtok+0x26>
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <strtok+0x60>)
 800443e:	4811      	ldr	r0, [pc, #68]	@ (8004484 <strtok+0x64>)
 8004440:	215b      	movs	r1, #91	@ 0x5b
 8004442:	f000 f8e9 	bl	8004618 <__assert_func>
 8004446:	e9c0 4400 	strd	r4, r4, [r0]
 800444a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800444e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004452:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004456:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800445a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800445e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004462:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004466:	6184      	str	r4, [r0, #24]
 8004468:	7704      	strb	r4, [r0, #28]
 800446a:	6244      	str	r4, [r0, #36]	@ 0x24
 800446c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	2301      	movs	r3, #1
 8004474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	f000 b806 	b.w	8004488 <__strtok_r>
 800447c:	2000001c 	.word	0x2000001c
 8004480:	080057fc 	.word	0x080057fc
 8004484:	08005813 	.word	0x08005813

08004488 <__strtok_r>:
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	b908      	cbnz	r0, 8004492 <__strtok_r+0xa>
 800448e:	6814      	ldr	r4, [r2, #0]
 8004490:	b144      	cbz	r4, 80044a4 <__strtok_r+0x1c>
 8004492:	4620      	mov	r0, r4
 8004494:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004498:	460f      	mov	r7, r1
 800449a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800449e:	b91e      	cbnz	r6, 80044a8 <__strtok_r+0x20>
 80044a0:	b965      	cbnz	r5, 80044bc <__strtok_r+0x34>
 80044a2:	6015      	str	r5, [r2, #0]
 80044a4:	2000      	movs	r0, #0
 80044a6:	e005      	b.n	80044b4 <__strtok_r+0x2c>
 80044a8:	42b5      	cmp	r5, r6
 80044aa:	d1f6      	bne.n	800449a <__strtok_r+0x12>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <__strtok_r+0xa>
 80044b0:	6014      	str	r4, [r2, #0]
 80044b2:	7003      	strb	r3, [r0, #0]
 80044b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b6:	461c      	mov	r4, r3
 80044b8:	e00c      	b.n	80044d4 <__strtok_r+0x4c>
 80044ba:	b91d      	cbnz	r5, 80044c4 <__strtok_r+0x3c>
 80044bc:	4627      	mov	r7, r4
 80044be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044c2:	460e      	mov	r6, r1
 80044c4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80044c8:	42ab      	cmp	r3, r5
 80044ca:	d1f6      	bne.n	80044ba <__strtok_r+0x32>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f2      	beq.n	80044b6 <__strtok_r+0x2e>
 80044d0:	2300      	movs	r3, #0
 80044d2:	703b      	strb	r3, [r7, #0]
 80044d4:	6014      	str	r4, [r2, #0]
 80044d6:	e7ed      	b.n	80044b4 <__strtok_r+0x2c>

080044d8 <strstr>:
 80044d8:	780a      	ldrb	r2, [r1, #0]
 80044da:	b570      	push	{r4, r5, r6, lr}
 80044dc:	b96a      	cbnz	r2, 80044fa <strstr+0x22>
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d109      	bne.n	80044f8 <strstr+0x20>
 80044e4:	460c      	mov	r4, r1
 80044e6:	4605      	mov	r5, r0
 80044e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f6      	beq.n	80044de <strstr+0x6>
 80044f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80044f4:	429e      	cmp	r6, r3
 80044f6:	d0f7      	beq.n	80044e8 <strstr+0x10>
 80044f8:	3001      	adds	r0, #1
 80044fa:	7803      	ldrb	r3, [r0, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ef      	bne.n	80044e0 <strstr+0x8>
 8004500:	4618      	mov	r0, r3
 8004502:	e7ec      	b.n	80044de <strstr+0x6>

08004504 <_close_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_close_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc ff74 	bl	80013fc <_close>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_close_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_close_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20000b3c 	.word	0x20000b3c

08004524 <_lseek_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	@ (8004544 <_lseek_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fc ff89 	bl	800144a <_lseek>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_lseek_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_lseek_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20000b3c 	.word	0x20000b3c

08004548 <_read_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	@ (8004568 <_read_r+0x20>)
 800454c:	4604      	mov	r4, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc ff17 	bl	800138a <_read>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_read_r+0x1e>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_read_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000b3c 	.word	0x20000b3c

0800456c <_write_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	@ (800458c <_write_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc ff22 	bl	80013c4 <_write>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_write_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_write_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000b3c 	.word	0x20000b3c

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	@ (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	2000001c 	.word	0x2000001c

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	@ (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	@ (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	@ (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	@ (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 ff98 	bl	80054e4 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	080058e4 	.word	0x080058e4
 80045d8:	080058e4 	.word	0x080058e4
 80045dc:	080058e4 	.word	0x080058e4
 80045e0:	080058e8 	.word	0x080058e8

080045e4 <__retarget_lock_init_recursive>:
 80045e4:	4770      	bx	lr

080045e6 <__retarget_lock_acquire_recursive>:
 80045e6:	4770      	bx	lr

080045e8 <__retarget_lock_release_recursive>:
 80045e8:	4770      	bx	lr

080045ea <strcpy>:
 80045ea:	4603      	mov	r3, r0
 80045ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045f0:	f803 2b01 	strb.w	r2, [r3], #1
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	d1f9      	bne.n	80045ec <strcpy+0x2>
 80045f8:	4770      	bx	lr

080045fa <memcpy>:
 80045fa:	440a      	add	r2, r1
 80045fc:	4291      	cmp	r1, r2
 80045fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8004602:	d100      	bne.n	8004606 <memcpy+0xc>
 8004604:	4770      	bx	lr
 8004606:	b510      	push	{r4, lr}
 8004608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004610:	4291      	cmp	r1, r2
 8004612:	d1f9      	bne.n	8004608 <memcpy+0xe>
 8004614:	bd10      	pop	{r4, pc}
	...

08004618 <__assert_func>:
 8004618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800461a:	4614      	mov	r4, r2
 800461c:	461a      	mov	r2, r3
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <__assert_func+0x2c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4605      	mov	r5, r0
 8004624:	68d8      	ldr	r0, [r3, #12]
 8004626:	b14c      	cbz	r4, 800463c <__assert_func+0x24>
 8004628:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <__assert_func+0x30>)
 800462a:	9100      	str	r1, [sp, #0]
 800462c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004630:	4906      	ldr	r1, [pc, #24]	@ (800464c <__assert_func+0x34>)
 8004632:	462b      	mov	r3, r5
 8004634:	f000 fde0 	bl	80051f8 <fiprintf>
 8004638:	f000 fed2 	bl	80053e0 <abort>
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <__assert_func+0x38>)
 800463e:	461c      	mov	r4, r3
 8004640:	e7f3      	b.n	800462a <__assert_func+0x12>
 8004642:	bf00      	nop
 8004644:	2000001c 	.word	0x2000001c
 8004648:	0800586d 	.word	0x0800586d
 800464c:	0800587a 	.word	0x0800587a
 8004650:	080058a8 	.word	0x080058a8

08004654 <_free_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	d041      	beq.n	80046e0 <_free_r+0x8c>
 800465c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004660:	1f0c      	subs	r4, r1, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfb8      	it	lt
 8004666:	18e4      	addlt	r4, r4, r3
 8004668:	f000 f8e8 	bl	800483c <__malloc_lock>
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <_free_r+0x90>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	b933      	cbnz	r3, 8004680 <_free_r+0x2c>
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	6014      	str	r4, [r2, #0]
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467c:	f000 b8e4 	b.w	8004848 <__malloc_unlock>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d908      	bls.n	8004696 <_free_r+0x42>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf01      	itttt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	1809      	addeq	r1, r1, r0
 8004692:	6021      	streq	r1, [r4, #0]
 8004694:	e7ed      	b.n	8004672 <_free_r+0x1e>
 8004696:	461a      	mov	r2, r3
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b10b      	cbz	r3, 80046a0 <_free_r+0x4c>
 800469c:	42a3      	cmp	r3, r4
 800469e:	d9fa      	bls.n	8004696 <_free_r+0x42>
 80046a0:	6811      	ldr	r1, [r2, #0]
 80046a2:	1850      	adds	r0, r2, r1
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d10b      	bne.n	80046c0 <_free_r+0x6c>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	4401      	add	r1, r0
 80046ac:	1850      	adds	r0, r2, r1
 80046ae:	4283      	cmp	r3, r0
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	d1e0      	bne.n	8004676 <_free_r+0x22>
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	6053      	str	r3, [r2, #4]
 80046ba:	4408      	add	r0, r1
 80046bc:	6010      	str	r0, [r2, #0]
 80046be:	e7da      	b.n	8004676 <_free_r+0x22>
 80046c0:	d902      	bls.n	80046c8 <_free_r+0x74>
 80046c2:	230c      	movs	r3, #12
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	e7d6      	b.n	8004676 <_free_r+0x22>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf04      	itt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	bf04      	itt	eq
 80046d8:	1809      	addeq	r1, r1, r0
 80046da:	6021      	streq	r1, [r4, #0]
 80046dc:	6054      	str	r4, [r2, #4]
 80046de:	e7ca      	b.n	8004676 <_free_r+0x22>
 80046e0:	bd38      	pop	{r3, r4, r5, pc}
 80046e2:	bf00      	nop
 80046e4:	20000b48 	.word	0x20000b48

080046e8 <malloc>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	@ (80046f4 <malloc+0xc>)
 80046ea:	4601      	mov	r1, r0
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f000 b825 	b.w	800473c <_malloc_r>
 80046f2:	bf00      	nop
 80046f4:	2000001c 	.word	0x2000001c

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004738 <sbrk_aligned+0x40>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 fe5c 	bl	80053c0 <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 fe57 	bl	80053c0 <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d103      	bne.n	800471e <sbrk_aligned+0x26>
 8004716:	f04f 34ff 	mov.w	r4, #4294967295
 800471a:	4620      	mov	r0, r4
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	1cc4      	adds	r4, r0, #3
 8004720:	f024 0403 	bic.w	r4, r4, #3
 8004724:	42a0      	cmp	r0, r4
 8004726:	d0f8      	beq.n	800471a <sbrk_aligned+0x22>
 8004728:	1a21      	subs	r1, r4, r0
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fe48 	bl	80053c0 <_sbrk_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d1f2      	bne.n	800471a <sbrk_aligned+0x22>
 8004734:	e7ef      	b.n	8004716 <sbrk_aligned+0x1e>
 8004736:	bf00      	nop
 8004738:	20000b44 	.word	0x20000b44

0800473c <_malloc_r>:
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	f025 0503 	bic.w	r5, r5, #3
 8004746:	3508      	adds	r5, #8
 8004748:	2d0c      	cmp	r5, #12
 800474a:	bf38      	it	cc
 800474c:	250c      	movcc	r5, #12
 800474e:	2d00      	cmp	r5, #0
 8004750:	4606      	mov	r6, r0
 8004752:	db01      	blt.n	8004758 <_malloc_r+0x1c>
 8004754:	42a9      	cmp	r1, r5
 8004756:	d904      	bls.n	8004762 <_malloc_r+0x26>
 8004758:	230c      	movs	r3, #12
 800475a:	6033      	str	r3, [r6, #0]
 800475c:	2000      	movs	r0, #0
 800475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004838 <_malloc_r+0xfc>
 8004766:	f000 f869 	bl	800483c <__malloc_lock>
 800476a:	f8d8 3000 	ldr.w	r3, [r8]
 800476e:	461c      	mov	r4, r3
 8004770:	bb44      	cbnz	r4, 80047c4 <_malloc_r+0x88>
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff ffbf 	bl	80046f8 <sbrk_aligned>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	4604      	mov	r4, r0
 800477e:	d158      	bne.n	8004832 <_malloc_r+0xf6>
 8004780:	f8d8 4000 	ldr.w	r4, [r8]
 8004784:	4627      	mov	r7, r4
 8004786:	2f00      	cmp	r7, #0
 8004788:	d143      	bne.n	8004812 <_malloc_r+0xd6>
 800478a:	2c00      	cmp	r4, #0
 800478c:	d04b      	beq.n	8004826 <_malloc_r+0xea>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	4639      	mov	r1, r7
 8004792:	4630      	mov	r0, r6
 8004794:	eb04 0903 	add.w	r9, r4, r3
 8004798:	f000 fe12 	bl	80053c0 <_sbrk_r>
 800479c:	4581      	cmp	r9, r0
 800479e:	d142      	bne.n	8004826 <_malloc_r+0xea>
 80047a0:	6821      	ldr	r1, [r4, #0]
 80047a2:	1a6d      	subs	r5, r5, r1
 80047a4:	4629      	mov	r1, r5
 80047a6:	4630      	mov	r0, r6
 80047a8:	f7ff ffa6 	bl	80046f8 <sbrk_aligned>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d03a      	beq.n	8004826 <_malloc_r+0xea>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	442b      	add	r3, r5
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	f8d8 3000 	ldr.w	r3, [r8]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	bb62      	cbnz	r2, 8004818 <_malloc_r+0xdc>
 80047be:	f8c8 7000 	str.w	r7, [r8]
 80047c2:	e00f      	b.n	80047e4 <_malloc_r+0xa8>
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	1b52      	subs	r2, r2, r5
 80047c8:	d420      	bmi.n	800480c <_malloc_r+0xd0>
 80047ca:	2a0b      	cmp	r2, #11
 80047cc:	d917      	bls.n	80047fe <_malloc_r+0xc2>
 80047ce:	1961      	adds	r1, r4, r5
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	6025      	str	r5, [r4, #0]
 80047d4:	bf18      	it	ne
 80047d6:	6059      	strne	r1, [r3, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	bf08      	it	eq
 80047dc:	f8c8 1000 	streq.w	r1, [r8]
 80047e0:	5162      	str	r2, [r4, r5]
 80047e2:	604b      	str	r3, [r1, #4]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 f82f 	bl	8004848 <__malloc_unlock>
 80047ea:	f104 000b 	add.w	r0, r4, #11
 80047ee:	1d23      	adds	r3, r4, #4
 80047f0:	f020 0007 	bic.w	r0, r0, #7
 80047f4:	1ac2      	subs	r2, r0, r3
 80047f6:	bf1c      	itt	ne
 80047f8:	1a1b      	subne	r3, r3, r0
 80047fa:	50a3      	strne	r3, [r4, r2]
 80047fc:	e7af      	b.n	800475e <_malloc_r+0x22>
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	42a3      	cmp	r3, r4
 8004802:	bf0c      	ite	eq
 8004804:	f8c8 2000 	streq.w	r2, [r8]
 8004808:	605a      	strne	r2, [r3, #4]
 800480a:	e7eb      	b.n	80047e4 <_malloc_r+0xa8>
 800480c:	4623      	mov	r3, r4
 800480e:	6864      	ldr	r4, [r4, #4]
 8004810:	e7ae      	b.n	8004770 <_malloc_r+0x34>
 8004812:	463c      	mov	r4, r7
 8004814:	687f      	ldr	r7, [r7, #4]
 8004816:	e7b6      	b.n	8004786 <_malloc_r+0x4a>
 8004818:	461a      	mov	r2, r3
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	42a3      	cmp	r3, r4
 800481e:	d1fb      	bne.n	8004818 <_malloc_r+0xdc>
 8004820:	2300      	movs	r3, #0
 8004822:	6053      	str	r3, [r2, #4]
 8004824:	e7de      	b.n	80047e4 <_malloc_r+0xa8>
 8004826:	230c      	movs	r3, #12
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f80c 	bl	8004848 <__malloc_unlock>
 8004830:	e794      	b.n	800475c <_malloc_r+0x20>
 8004832:	6005      	str	r5, [r0, #0]
 8004834:	e7d6      	b.n	80047e4 <_malloc_r+0xa8>
 8004836:	bf00      	nop
 8004838:	20000b48 	.word	0x20000b48

0800483c <__malloc_lock>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__malloc_lock+0x8>)
 800483e:	f7ff bed2 	b.w	80045e6 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	20000b40 	.word	0x20000b40

08004848 <__malloc_unlock>:
 8004848:	4801      	ldr	r0, [pc, #4]	@ (8004850 <__malloc_unlock+0x8>)
 800484a:	f7ff becd 	b.w	80045e8 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	20000b40 	.word	0x20000b40

08004854 <__ssputs_r>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	688e      	ldr	r6, [r1, #8]
 800485a:	461f      	mov	r7, r3
 800485c:	42be      	cmp	r6, r7
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	4682      	mov	sl, r0
 8004862:	460c      	mov	r4, r1
 8004864:	4690      	mov	r8, r2
 8004866:	d82d      	bhi.n	80048c4 <__ssputs_r+0x70>
 8004868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800486c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004870:	d026      	beq.n	80048c0 <__ssputs_r+0x6c>
 8004872:	6965      	ldr	r5, [r4, #20]
 8004874:	6909      	ldr	r1, [r1, #16]
 8004876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800487a:	eba3 0901 	sub.w	r9, r3, r1
 800487e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004882:	1c7b      	adds	r3, r7, #1
 8004884:	444b      	add	r3, r9
 8004886:	106d      	asrs	r5, r5, #1
 8004888:	429d      	cmp	r5, r3
 800488a:	bf38      	it	cc
 800488c:	461d      	movcc	r5, r3
 800488e:	0553      	lsls	r3, r2, #21
 8004890:	d527      	bpl.n	80048e2 <__ssputs_r+0x8e>
 8004892:	4629      	mov	r1, r5
 8004894:	f7ff ff52 	bl	800473c <_malloc_r>
 8004898:	4606      	mov	r6, r0
 800489a:	b360      	cbz	r0, 80048f6 <__ssputs_r+0xa2>
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	464a      	mov	r2, r9
 80048a0:	f7ff feab 	bl	80045fa <memcpy>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	6126      	str	r6, [r4, #16]
 80048b2:	6165      	str	r5, [r4, #20]
 80048b4:	444e      	add	r6, r9
 80048b6:	eba5 0509 	sub.w	r5, r5, r9
 80048ba:	6026      	str	r6, [r4, #0]
 80048bc:	60a5      	str	r5, [r4, #8]
 80048be:	463e      	mov	r6, r7
 80048c0:	42be      	cmp	r6, r7
 80048c2:	d900      	bls.n	80048c6 <__ssputs_r+0x72>
 80048c4:	463e      	mov	r6, r7
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4641      	mov	r1, r8
 80048cc:	f000 fd3c 	bl	8005348 <memmove>
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	1b9b      	subs	r3, r3, r6
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4433      	add	r3, r6
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	2000      	movs	r0, #0
 80048de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e2:	462a      	mov	r2, r5
 80048e4:	f000 fd83 	bl	80053ee <_realloc_r>
 80048e8:	4606      	mov	r6, r0
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d1e0      	bne.n	80048b0 <__ssputs_r+0x5c>
 80048ee:	6921      	ldr	r1, [r4, #16]
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7ff feaf 	bl	8004654 <_free_r>
 80048f6:	230c      	movs	r3, #12
 80048f8:	f8ca 3000 	str.w	r3, [sl]
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e7e9      	b.n	80048de <__ssputs_r+0x8a>
	...

0800490c <_svfiprintf_r>:
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	4698      	mov	r8, r3
 8004912:	898b      	ldrh	r3, [r1, #12]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	b09d      	sub	sp, #116	@ 0x74
 8004918:	4607      	mov	r7, r0
 800491a:	460d      	mov	r5, r1
 800491c:	4614      	mov	r4, r2
 800491e:	d510      	bpl.n	8004942 <_svfiprintf_r+0x36>
 8004920:	690b      	ldr	r3, [r1, #16]
 8004922:	b973      	cbnz	r3, 8004942 <_svfiprintf_r+0x36>
 8004924:	2140      	movs	r1, #64	@ 0x40
 8004926:	f7ff ff09 	bl	800473c <_malloc_r>
 800492a:	6028      	str	r0, [r5, #0]
 800492c:	6128      	str	r0, [r5, #16]
 800492e:	b930      	cbnz	r0, 800493e <_svfiprintf_r+0x32>
 8004930:	230c      	movs	r3, #12
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	b01d      	add	sp, #116	@ 0x74
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	2340      	movs	r3, #64	@ 0x40
 8004940:	616b      	str	r3, [r5, #20]
 8004942:	2300      	movs	r3, #0
 8004944:	9309      	str	r3, [sp, #36]	@ 0x24
 8004946:	2320      	movs	r3, #32
 8004948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800494c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004950:	2330      	movs	r3, #48	@ 0x30
 8004952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004af0 <_svfiprintf_r+0x1e4>
 8004956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800495a:	f04f 0901 	mov.w	r9, #1
 800495e:	4623      	mov	r3, r4
 8004960:	469a      	mov	sl, r3
 8004962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004966:	b10a      	cbz	r2, 800496c <_svfiprintf_r+0x60>
 8004968:	2a25      	cmp	r2, #37	@ 0x25
 800496a:	d1f9      	bne.n	8004960 <_svfiprintf_r+0x54>
 800496c:	ebba 0b04 	subs.w	fp, sl, r4
 8004970:	d00b      	beq.n	800498a <_svfiprintf_r+0x7e>
 8004972:	465b      	mov	r3, fp
 8004974:	4622      	mov	r2, r4
 8004976:	4629      	mov	r1, r5
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff ff6b 	bl	8004854 <__ssputs_r>
 800497e:	3001      	adds	r0, #1
 8004980:	f000 80a7 	beq.w	8004ad2 <_svfiprintf_r+0x1c6>
 8004984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004986:	445a      	add	r2, fp
 8004988:	9209      	str	r2, [sp, #36]	@ 0x24
 800498a:	f89a 3000 	ldrb.w	r3, [sl]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 809f 	beq.w	8004ad2 <_svfiprintf_r+0x1c6>
 8004994:	2300      	movs	r3, #0
 8004996:	f04f 32ff 	mov.w	r2, #4294967295
 800499a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800499e:	f10a 0a01 	add.w	sl, sl, #1
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	9307      	str	r3, [sp, #28]
 80049a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80049ac:	4654      	mov	r4, sl
 80049ae:	2205      	movs	r2, #5
 80049b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b4:	484e      	ldr	r0, [pc, #312]	@ (8004af0 <_svfiprintf_r+0x1e4>)
 80049b6:	f7fb fc2b 	bl	8000210 <memchr>
 80049ba:	9a04      	ldr	r2, [sp, #16]
 80049bc:	b9d8      	cbnz	r0, 80049f6 <_svfiprintf_r+0xea>
 80049be:	06d0      	lsls	r0, r2, #27
 80049c0:	bf44      	itt	mi
 80049c2:	2320      	movmi	r3, #32
 80049c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c8:	0711      	lsls	r1, r2, #28
 80049ca:	bf44      	itt	mi
 80049cc:	232b      	movmi	r3, #43	@ 0x2b
 80049ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d2:	f89a 3000 	ldrb.w	r3, [sl]
 80049d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d8:	d015      	beq.n	8004a06 <_svfiprintf_r+0xfa>
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	4654      	mov	r4, sl
 80049de:	2000      	movs	r0, #0
 80049e0:	f04f 0c0a 	mov.w	ip, #10
 80049e4:	4621      	mov	r1, r4
 80049e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ea:	3b30      	subs	r3, #48	@ 0x30
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d94b      	bls.n	8004a88 <_svfiprintf_r+0x17c>
 80049f0:	b1b0      	cbz	r0, 8004a20 <_svfiprintf_r+0x114>
 80049f2:	9207      	str	r2, [sp, #28]
 80049f4:	e014      	b.n	8004a20 <_svfiprintf_r+0x114>
 80049f6:	eba0 0308 	sub.w	r3, r0, r8
 80049fa:	fa09 f303 	lsl.w	r3, r9, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	46a2      	mov	sl, r4
 8004a04:	e7d2      	b.n	80049ac <_svfiprintf_r+0xa0>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfbb      	ittet	lt
 8004a12:	425b      	neglt	r3, r3
 8004a14:	f042 0202 	orrlt.w	r2, r2, #2
 8004a18:	9307      	strge	r3, [sp, #28]
 8004a1a:	9307      	strlt	r3, [sp, #28]
 8004a1c:	bfb8      	it	lt
 8004a1e:	9204      	strlt	r2, [sp, #16]
 8004a20:	7823      	ldrb	r3, [r4, #0]
 8004a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a24:	d10a      	bne.n	8004a3c <_svfiprintf_r+0x130>
 8004a26:	7863      	ldrb	r3, [r4, #1]
 8004a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a2a:	d132      	bne.n	8004a92 <_svfiprintf_r+0x186>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	9203      	str	r2, [sp, #12]
 8004a34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a38:	3402      	adds	r4, #2
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b00 <_svfiprintf_r+0x1f4>
 8004a40:	7821      	ldrb	r1, [r4, #0]
 8004a42:	2203      	movs	r2, #3
 8004a44:	4650      	mov	r0, sl
 8004a46:	f7fb fbe3 	bl	8000210 <memchr>
 8004a4a:	b138      	cbz	r0, 8004a5c <_svfiprintf_r+0x150>
 8004a4c:	9b04      	ldr	r3, [sp, #16]
 8004a4e:	eba0 000a 	sub.w	r0, r0, sl
 8004a52:	2240      	movs	r2, #64	@ 0x40
 8004a54:	4082      	lsls	r2, r0
 8004a56:	4313      	orrs	r3, r2
 8004a58:	3401      	adds	r4, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a60:	4824      	ldr	r0, [pc, #144]	@ (8004af4 <_svfiprintf_r+0x1e8>)
 8004a62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a66:	2206      	movs	r2, #6
 8004a68:	f7fb fbd2 	bl	8000210 <memchr>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d036      	beq.n	8004ade <_svfiprintf_r+0x1d2>
 8004a70:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <_svfiprintf_r+0x1ec>)
 8004a72:	bb1b      	cbnz	r3, 8004abc <_svfiprintf_r+0x1b0>
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	3307      	adds	r3, #7
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a82:	4433      	add	r3, r6
 8004a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a86:	e76a      	b.n	800495e <_svfiprintf_r+0x52>
 8004a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e7a8      	b.n	80049e4 <_svfiprintf_r+0xd8>
 8004a92:	2300      	movs	r3, #0
 8004a94:	3401      	adds	r4, #1
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f04f 0c0a 	mov.w	ip, #10
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa4:	3a30      	subs	r2, #48	@ 0x30
 8004aa6:	2a09      	cmp	r2, #9
 8004aa8:	d903      	bls.n	8004ab2 <_svfiprintf_r+0x1a6>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0c6      	beq.n	8004a3c <_svfiprintf_r+0x130>
 8004aae:	9105      	str	r1, [sp, #20]
 8004ab0:	e7c4      	b.n	8004a3c <_svfiprintf_r+0x130>
 8004ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e7f0      	b.n	8004a9e <_svfiprintf_r+0x192>
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <_svfiprintf_r+0x1f0>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f3af 8000 	nop.w
 8004acc:	1c42      	adds	r2, r0, #1
 8004ace:	4606      	mov	r6, r0
 8004ad0:	d1d6      	bne.n	8004a80 <_svfiprintf_r+0x174>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	065b      	lsls	r3, r3, #25
 8004ad6:	f53f af2d 	bmi.w	8004934 <_svfiprintf_r+0x28>
 8004ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004adc:	e72c      	b.n	8004938 <_svfiprintf_r+0x2c>
 8004ade:	ab03      	add	r3, sp, #12
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <_svfiprintf_r+0x1f0>)
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f000 f9bb 	bl	8004e64 <_printf_i>
 8004aee:	e7ed      	b.n	8004acc <_svfiprintf_r+0x1c0>
 8004af0:	080058a9 	.word	0x080058a9
 8004af4:	080058b3 	.word	0x080058b3
 8004af8:	00000000 	.word	0x00000000
 8004afc:	08004855 	.word	0x08004855
 8004b00:	080058af 	.word	0x080058af

08004b04 <__sfputc_r>:
 8004b04:	6893      	ldr	r3, [r2, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	b410      	push	{r4}
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	da08      	bge.n	8004b22 <__sfputc_r+0x1e>
 8004b10:	6994      	ldr	r4, [r2, #24]
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	db01      	blt.n	8004b1a <__sfputc_r+0x16>
 8004b16:	290a      	cmp	r1, #10
 8004b18:	d103      	bne.n	8004b22 <__sfputc_r+0x1e>
 8004b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b1e:	f7ff bbc2 	b.w	80042a6 <__swbuf_r>
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	1c58      	adds	r0, r3, #1
 8004b26:	6010      	str	r0, [r2, #0]
 8004b28:	7019      	strb	r1, [r3, #0]
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <__sfputs_r>:
 8004b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	18d5      	adds	r5, r2, r3
 8004b3c:	42ac      	cmp	r4, r5
 8004b3e:	d101      	bne.n	8004b44 <__sfputs_r+0x12>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e007      	b.n	8004b54 <__sfputs_r+0x22>
 8004b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b48:	463a      	mov	r2, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff ffda 	bl	8004b04 <__sfputc_r>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d1f3      	bne.n	8004b3c <__sfputs_r+0xa>
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b58 <_vfiprintf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	b09d      	sub	sp, #116	@ 0x74
 8004b60:	4614      	mov	r4, r2
 8004b62:	4698      	mov	r8, r3
 8004b64:	4606      	mov	r6, r0
 8004b66:	b118      	cbz	r0, 8004b70 <_vfiprintf_r+0x18>
 8004b68:	6a03      	ldr	r3, [r0, #32]
 8004b6a:	b90b      	cbnz	r3, 8004b70 <_vfiprintf_r+0x18>
 8004b6c:	f7ff fa88 	bl	8004080 <__sinit>
 8004b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b72:	07d9      	lsls	r1, r3, #31
 8004b74:	d405      	bmi.n	8004b82 <_vfiprintf_r+0x2a>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	059a      	lsls	r2, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <_vfiprintf_r+0x2a>
 8004b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b7e:	f7ff fd32 	bl	80045e6 <__retarget_lock_acquire_recursive>
 8004b82:	89ab      	ldrh	r3, [r5, #12]
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	d501      	bpl.n	8004b8c <_vfiprintf_r+0x34>
 8004b88:	692b      	ldr	r3, [r5, #16]
 8004b8a:	b99b      	cbnz	r3, 8004bb4 <_vfiprintf_r+0x5c>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff fbc8 	bl	8004324 <__swsetup_r>
 8004b94:	b170      	cbz	r0, 8004bb4 <_vfiprintf_r+0x5c>
 8004b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b98:	07dc      	lsls	r4, r3, #31
 8004b9a:	d504      	bpl.n	8004ba6 <_vfiprintf_r+0x4e>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b01d      	add	sp, #116	@ 0x74
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	89ab      	ldrh	r3, [r5, #12]
 8004ba8:	0598      	lsls	r0, r3, #22
 8004baa:	d4f7      	bmi.n	8004b9c <_vfiprintf_r+0x44>
 8004bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bae:	f7ff fd1b 	bl	80045e8 <__retarget_lock_release_recursive>
 8004bb2:	e7f3      	b.n	8004b9c <_vfiprintf_r+0x44>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb8:	2320      	movs	r3, #32
 8004bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc2:	2330      	movs	r3, #48	@ 0x30
 8004bc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d74 <_vfiprintf_r+0x21c>
 8004bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bcc:	f04f 0901 	mov.w	r9, #1
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	469a      	mov	sl, r3
 8004bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd8:	b10a      	cbz	r2, 8004bde <_vfiprintf_r+0x86>
 8004bda:	2a25      	cmp	r2, #37	@ 0x25
 8004bdc:	d1f9      	bne.n	8004bd2 <_vfiprintf_r+0x7a>
 8004bde:	ebba 0b04 	subs.w	fp, sl, r4
 8004be2:	d00b      	beq.n	8004bfc <_vfiprintf_r+0xa4>
 8004be4:	465b      	mov	r3, fp
 8004be6:	4622      	mov	r2, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff ffa1 	bl	8004b32 <__sfputs_r>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f000 80a7 	beq.w	8004d44 <_vfiprintf_r+0x1ec>
 8004bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf8:	445a      	add	r2, fp
 8004bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809f 	beq.w	8004d44 <_vfiprintf_r+0x1ec>
 8004c06:	2300      	movs	r3, #0
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c10:	f10a 0a01 	add.w	sl, sl, #1
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	9307      	str	r3, [sp, #28]
 8004c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c1e:	4654      	mov	r4, sl
 8004c20:	2205      	movs	r2, #5
 8004c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c26:	4853      	ldr	r0, [pc, #332]	@ (8004d74 <_vfiprintf_r+0x21c>)
 8004c28:	f7fb faf2 	bl	8000210 <memchr>
 8004c2c:	9a04      	ldr	r2, [sp, #16]
 8004c2e:	b9d8      	cbnz	r0, 8004c68 <_vfiprintf_r+0x110>
 8004c30:	06d1      	lsls	r1, r2, #27
 8004c32:	bf44      	itt	mi
 8004c34:	2320      	movmi	r3, #32
 8004c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3a:	0713      	lsls	r3, r2, #28
 8004c3c:	bf44      	itt	mi
 8004c3e:	232b      	movmi	r3, #43	@ 0x2b
 8004c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c44:	f89a 3000 	ldrb.w	r3, [sl]
 8004c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c4a:	d015      	beq.n	8004c78 <_vfiprintf_r+0x120>
 8004c4c:	9a07      	ldr	r2, [sp, #28]
 8004c4e:	4654      	mov	r4, sl
 8004c50:	2000      	movs	r0, #0
 8004c52:	f04f 0c0a 	mov.w	ip, #10
 8004c56:	4621      	mov	r1, r4
 8004c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5c:	3b30      	subs	r3, #48	@ 0x30
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	d94b      	bls.n	8004cfa <_vfiprintf_r+0x1a2>
 8004c62:	b1b0      	cbz	r0, 8004c92 <_vfiprintf_r+0x13a>
 8004c64:	9207      	str	r2, [sp, #28]
 8004c66:	e014      	b.n	8004c92 <_vfiprintf_r+0x13a>
 8004c68:	eba0 0308 	sub.w	r3, r0, r8
 8004c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	46a2      	mov	sl, r4
 8004c76:	e7d2      	b.n	8004c1e <_vfiprintf_r+0xc6>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	1d19      	adds	r1, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	9103      	str	r1, [sp, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbb      	ittet	lt
 8004c84:	425b      	neglt	r3, r3
 8004c86:	f042 0202 	orrlt.w	r2, r2, #2
 8004c8a:	9307      	strge	r3, [sp, #28]
 8004c8c:	9307      	strlt	r3, [sp, #28]
 8004c8e:	bfb8      	it	lt
 8004c90:	9204      	strlt	r2, [sp, #16]
 8004c92:	7823      	ldrb	r3, [r4, #0]
 8004c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c96:	d10a      	bne.n	8004cae <_vfiprintf_r+0x156>
 8004c98:	7863      	ldrb	r3, [r4, #1]
 8004c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9c:	d132      	bne.n	8004d04 <_vfiprintf_r+0x1ac>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	9203      	str	r2, [sp, #12]
 8004ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004caa:	3402      	adds	r4, #2
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d84 <_vfiprintf_r+0x22c>
 8004cb2:	7821      	ldrb	r1, [r4, #0]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f7fb faaa 	bl	8000210 <memchr>
 8004cbc:	b138      	cbz	r0, 8004cce <_vfiprintf_r+0x176>
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	eba0 000a 	sub.w	r0, r0, sl
 8004cc4:	2240      	movs	r2, #64	@ 0x40
 8004cc6:	4082      	lsls	r2, r0
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	3401      	adds	r4, #1
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd2:	4829      	ldr	r0, [pc, #164]	@ (8004d78 <_vfiprintf_r+0x220>)
 8004cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd8:	2206      	movs	r2, #6
 8004cda:	f7fb fa99 	bl	8000210 <memchr>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d03f      	beq.n	8004d62 <_vfiprintf_r+0x20a>
 8004ce2:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <_vfiprintf_r+0x224>)
 8004ce4:	bb1b      	cbnz	r3, 8004d2e <_vfiprintf_r+0x1d6>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	3307      	adds	r3, #7
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	3308      	adds	r3, #8
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf4:	443b      	add	r3, r7
 8004cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf8:	e76a      	b.n	8004bd0 <_vfiprintf_r+0x78>
 8004cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfe:	460c      	mov	r4, r1
 8004d00:	2001      	movs	r0, #1
 8004d02:	e7a8      	b.n	8004c56 <_vfiprintf_r+0xfe>
 8004d04:	2300      	movs	r3, #0
 8004d06:	3401      	adds	r4, #1
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f04f 0c0a 	mov.w	ip, #10
 8004d10:	4620      	mov	r0, r4
 8004d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d16:	3a30      	subs	r2, #48	@ 0x30
 8004d18:	2a09      	cmp	r2, #9
 8004d1a:	d903      	bls.n	8004d24 <_vfiprintf_r+0x1cc>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0c6      	beq.n	8004cae <_vfiprintf_r+0x156>
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	e7c4      	b.n	8004cae <_vfiprintf_r+0x156>
 8004d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d28:	4604      	mov	r4, r0
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e7f0      	b.n	8004d10 <_vfiprintf_r+0x1b8>
 8004d2e:	ab03      	add	r3, sp, #12
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	462a      	mov	r2, r5
 8004d34:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <_vfiprintf_r+0x228>)
 8004d36:	a904      	add	r1, sp, #16
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	4607      	mov	r7, r0
 8004d40:	1c78      	adds	r0, r7, #1
 8004d42:	d1d6      	bne.n	8004cf2 <_vfiprintf_r+0x19a>
 8004d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	d405      	bmi.n	8004d56 <_vfiprintf_r+0x1fe>
 8004d4a:	89ab      	ldrh	r3, [r5, #12]
 8004d4c:	059a      	lsls	r2, r3, #22
 8004d4e:	d402      	bmi.n	8004d56 <_vfiprintf_r+0x1fe>
 8004d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d52:	f7ff fc49 	bl	80045e8 <__retarget_lock_release_recursive>
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	065b      	lsls	r3, r3, #25
 8004d5a:	f53f af1f 	bmi.w	8004b9c <_vfiprintf_r+0x44>
 8004d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d60:	e71e      	b.n	8004ba0 <_vfiprintf_r+0x48>
 8004d62:	ab03      	add	r3, sp, #12
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	462a      	mov	r2, r5
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <_vfiprintf_r+0x228>)
 8004d6a:	a904      	add	r1, sp, #16
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f879 	bl	8004e64 <_printf_i>
 8004d72:	e7e4      	b.n	8004d3e <_vfiprintf_r+0x1e6>
 8004d74:	080058a9 	.word	0x080058a9
 8004d78:	080058b3 	.word	0x080058b3
 8004d7c:	00000000 	.word	0x00000000
 8004d80:	08004b33 	.word	0x08004b33
 8004d84:	080058af 	.word	0x080058af

08004d88 <_printf_common>:
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	4698      	mov	r8, r3
 8004d90:	688a      	ldr	r2, [r1, #8]
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bfb8      	it	lt
 8004d9c:	4613      	movlt	r3, r2
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da4:	4607      	mov	r7, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b10a      	cbz	r2, 8004dae <_printf_common+0x26>
 8004daa:	3301      	adds	r3, #1
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	0699      	lsls	r1, r3, #26
 8004db2:	bf42      	ittt	mi
 8004db4:	6833      	ldrmi	r3, [r6, #0]
 8004db6:	3302      	addmi	r3, #2
 8004db8:	6033      	strmi	r3, [r6, #0]
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	f015 0506 	ands.w	r5, r5, #6
 8004dc0:	d106      	bne.n	8004dd0 <_printf_common+0x48>
 8004dc2:	f104 0a19 	add.w	sl, r4, #25
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	6832      	ldr	r2, [r6, #0]
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	42ab      	cmp	r3, r5
 8004dce:	dc26      	bgt.n	8004e1e <_printf_common+0x96>
 8004dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	3b00      	subs	r3, #0
 8004dd8:	bf18      	it	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	0692      	lsls	r2, r2, #26
 8004dde:	d42b      	bmi.n	8004e38 <_printf_common+0xb0>
 8004de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de4:	4641      	mov	r1, r8
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c8      	blx	r9
 8004dea:	3001      	adds	r0, #1
 8004dec:	d01e      	beq.n	8004e2c <_printf_common+0xa4>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	f003 0306 	and.w	r3, r3, #6
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	bf02      	ittt	eq
 8004dfa:	68e5      	ldreq	r5, [r4, #12]
 8004dfc:	6833      	ldreq	r3, [r6, #0]
 8004dfe:	1aed      	subeq	r5, r5, r3
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	bf0c      	ite	eq
 8004e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e08:	2500      	movne	r5, #0
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bfc4      	itt	gt
 8004e0e:	1a9b      	subgt	r3, r3, r2
 8004e10:	18ed      	addgt	r5, r5, r3
 8004e12:	2600      	movs	r6, #0
 8004e14:	341a      	adds	r4, #26
 8004e16:	42b5      	cmp	r5, r6
 8004e18:	d11a      	bne.n	8004e50 <_printf_common+0xc8>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e008      	b.n	8004e30 <_printf_common+0xa8>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4652      	mov	r2, sl
 8004e22:	4641      	mov	r1, r8
 8004e24:	4638      	mov	r0, r7
 8004e26:	47c8      	blx	r9
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d103      	bne.n	8004e34 <_printf_common+0xac>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e34:	3501      	adds	r5, #1
 8004e36:	e7c6      	b.n	8004dc6 <_printf_common+0x3e>
 8004e38:	18e1      	adds	r1, r4, r3
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	2030      	movs	r0, #48	@ 0x30
 8004e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e42:	4422      	add	r2, r4
 8004e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	e7c7      	b.n	8004de0 <_printf_common+0x58>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4622      	mov	r2, r4
 8004e54:	4641      	mov	r1, r8
 8004e56:	4638      	mov	r0, r7
 8004e58:	47c8      	blx	r9
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d0e6      	beq.n	8004e2c <_printf_common+0xa4>
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7d9      	b.n	8004e16 <_printf_common+0x8e>
	...

08004e64 <_printf_i>:
 8004e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	7e0f      	ldrb	r7, [r1, #24]
 8004e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e6c:	2f78      	cmp	r7, #120	@ 0x78
 8004e6e:	4691      	mov	r9, r2
 8004e70:	4680      	mov	r8, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	469a      	mov	sl, r3
 8004e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e7a:	d807      	bhi.n	8004e8c <_printf_i+0x28>
 8004e7c:	2f62      	cmp	r7, #98	@ 0x62
 8004e7e:	d80a      	bhi.n	8004e96 <_printf_i+0x32>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	f000 80d1 	beq.w	8005028 <_printf_i+0x1c4>
 8004e86:	2f58      	cmp	r7, #88	@ 0x58
 8004e88:	f000 80b8 	beq.w	8004ffc <_printf_i+0x198>
 8004e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e94:	e03a      	b.n	8004f0c <_printf_i+0xa8>
 8004e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e9a:	2b15      	cmp	r3, #21
 8004e9c:	d8f6      	bhi.n	8004e8c <_printf_i+0x28>
 8004e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea4 <_printf_i+0x40>)
 8004ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004f11 	.word	0x08004f11
 8004eac:	08004e8d 	.word	0x08004e8d
 8004eb0:	08004e8d 	.word	0x08004e8d
 8004eb4:	08004e8d 	.word	0x08004e8d
 8004eb8:	08004e8d 	.word	0x08004e8d
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08004e8d 	.word	0x08004e8d
 8004ec4:	08004e8d 	.word	0x08004e8d
 8004ec8:	08004e8d 	.word	0x08004e8d
 8004ecc:	08004e8d 	.word	0x08004e8d
 8004ed0:	0800500f 	.word	0x0800500f
 8004ed4:	08004f3b 	.word	0x08004f3b
 8004ed8:	08004fc9 	.word	0x08004fc9
 8004edc:	08004e8d 	.word	0x08004e8d
 8004ee0:	08004e8d 	.word	0x08004e8d
 8004ee4:	08005031 	.word	0x08005031
 8004ee8:	08004e8d 	.word	0x08004e8d
 8004eec:	08004f3b 	.word	0x08004f3b
 8004ef0:	08004e8d 	.word	0x08004e8d
 8004ef4:	08004e8d 	.word	0x08004e8d
 8004ef8:	08004fd1 	.word	0x08004fd1
 8004efc:	6833      	ldr	r3, [r6, #0]
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6032      	str	r2, [r6, #0]
 8004f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e09c      	b.n	800504a <_printf_i+0x1e6>
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	6031      	str	r1, [r6, #0]
 8004f18:	0606      	lsls	r6, r0, #24
 8004f1a:	d501      	bpl.n	8004f20 <_printf_i+0xbc>
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	e003      	b.n	8004f28 <_printf_i+0xc4>
 8004f20:	0645      	lsls	r5, r0, #25
 8004f22:	d5fb      	bpl.n	8004f1c <_printf_i+0xb8>
 8004f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	da03      	bge.n	8004f34 <_printf_i+0xd0>
 8004f2c:	232d      	movs	r3, #45	@ 0x2d
 8004f2e:	426d      	negs	r5, r5
 8004f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f34:	4858      	ldr	r0, [pc, #352]	@ (8005098 <_printf_i+0x234>)
 8004f36:	230a      	movs	r3, #10
 8004f38:	e011      	b.n	8004f5e <_printf_i+0xfa>
 8004f3a:	6821      	ldr	r1, [r4, #0]
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	0608      	lsls	r0, r1, #24
 8004f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f44:	d402      	bmi.n	8004f4c <_printf_i+0xe8>
 8004f46:	0649      	lsls	r1, r1, #25
 8004f48:	bf48      	it	mi
 8004f4a:	b2ad      	uxthmi	r5, r5
 8004f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4e:	4852      	ldr	r0, [pc, #328]	@ (8005098 <_printf_i+0x234>)
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	bf14      	ite	ne
 8004f54:	230a      	movne	r3, #10
 8004f56:	2308      	moveq	r3, #8
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5e:	6866      	ldr	r6, [r4, #4]
 8004f60:	60a6      	str	r6, [r4, #8]
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	db05      	blt.n	8004f72 <_printf_i+0x10e>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	432e      	orrs	r6, r5
 8004f6a:	f021 0104 	bic.w	r1, r1, #4
 8004f6e:	6021      	str	r1, [r4, #0]
 8004f70:	d04b      	beq.n	800500a <_printf_i+0x1a6>
 8004f72:	4616      	mov	r6, r2
 8004f74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f78:	fb03 5711 	mls	r7, r3, r1, r5
 8004f7c:	5dc7      	ldrb	r7, [r0, r7]
 8004f7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f82:	462f      	mov	r7, r5
 8004f84:	42bb      	cmp	r3, r7
 8004f86:	460d      	mov	r5, r1
 8004f88:	d9f4      	bls.n	8004f74 <_printf_i+0x110>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d10b      	bne.n	8004fa6 <_printf_i+0x142>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	07df      	lsls	r7, r3, #31
 8004f92:	d508      	bpl.n	8004fa6 <_printf_i+0x142>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	6861      	ldr	r1, [r4, #4]
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	bfde      	ittt	le
 8004f9c:	2330      	movle	r3, #48	@ 0x30
 8004f9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa6:	1b92      	subs	r2, r2, r6
 8004fa8:	6122      	str	r2, [r4, #16]
 8004faa:	f8cd a000 	str.w	sl, [sp]
 8004fae:	464b      	mov	r3, r9
 8004fb0:	aa03      	add	r2, sp, #12
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	f7ff fee7 	bl	8004d88 <_printf_common>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d14a      	bne.n	8005054 <_printf_i+0x1f0>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b004      	add	sp, #16
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f043 0320 	orr.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	4832      	ldr	r0, [pc, #200]	@ (800509c <_printf_i+0x238>)
 8004fd2:	2778      	movs	r7, #120	@ 0x78
 8004fd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	061f      	lsls	r7, r3, #24
 8004fde:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe2:	d402      	bmi.n	8004fea <_printf_i+0x186>
 8004fe4:	065f      	lsls	r7, r3, #25
 8004fe6:	bf48      	it	mi
 8004fe8:	b2ad      	uxthmi	r5, r5
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	07d9      	lsls	r1, r3, #31
 8004fee:	bf44      	itt	mi
 8004ff0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff4:	6023      	strmi	r3, [r4, #0]
 8004ff6:	b11d      	cbz	r5, 8005000 <_printf_i+0x19c>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	e7ad      	b.n	8004f58 <_printf_i+0xf4>
 8004ffc:	4826      	ldr	r0, [pc, #152]	@ (8005098 <_printf_i+0x234>)
 8004ffe:	e7e9      	b.n	8004fd4 <_printf_i+0x170>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	e7f6      	b.n	8004ff8 <_printf_i+0x194>
 800500a:	4616      	mov	r6, r2
 800500c:	e7bd      	b.n	8004f8a <_printf_i+0x126>
 800500e:	6833      	ldr	r3, [r6, #0]
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	6961      	ldr	r1, [r4, #20]
 8005014:	1d18      	adds	r0, r3, #4
 8005016:	6030      	str	r0, [r6, #0]
 8005018:	062e      	lsls	r6, r5, #24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0x1be>
 800501e:	6019      	str	r1, [r3, #0]
 8005020:	e002      	b.n	8005028 <_printf_i+0x1c4>
 8005022:	0668      	lsls	r0, r5, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0x1ba>
 8005026:	8019      	strh	r1, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	4616      	mov	r6, r2
 800502e:	e7bc      	b.n	8004faa <_printf_i+0x146>
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	6032      	str	r2, [r6, #0]
 8005036:	681e      	ldr	r6, [r3, #0]
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	2100      	movs	r1, #0
 800503c:	4630      	mov	r0, r6
 800503e:	f7fb f8e7 	bl	8000210 <memchr>
 8005042:	b108      	cbz	r0, 8005048 <_printf_i+0x1e4>
 8005044:	1b80      	subs	r0, r0, r6
 8005046:	6060      	str	r0, [r4, #4]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2300      	movs	r3, #0
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005052:	e7aa      	b.n	8004faa <_printf_i+0x146>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d0ad      	beq.n	8004fbe <_printf_i+0x15a>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	079b      	lsls	r3, r3, #30
 8005066:	d413      	bmi.n	8005090 <_printf_i+0x22c>
 8005068:	68e0      	ldr	r0, [r4, #12]
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	4298      	cmp	r0, r3
 800506e:	bfb8      	it	lt
 8005070:	4618      	movlt	r0, r3
 8005072:	e7a6      	b.n	8004fc2 <_printf_i+0x15e>
 8005074:	2301      	movs	r3, #1
 8005076:	4632      	mov	r2, r6
 8005078:	4649      	mov	r1, r9
 800507a:	4640      	mov	r0, r8
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d09d      	beq.n	8004fbe <_printf_i+0x15a>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	9903      	ldr	r1, [sp, #12]
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	42ab      	cmp	r3, r5
 800508c:	dcf2      	bgt.n	8005074 <_printf_i+0x210>
 800508e:	e7eb      	b.n	8005068 <_printf_i+0x204>
 8005090:	2500      	movs	r5, #0
 8005092:	f104 0619 	add.w	r6, r4, #25
 8005096:	e7f5      	b.n	8005084 <_printf_i+0x220>
 8005098:	080058ba 	.word	0x080058ba
 800509c:	080058cb 	.word	0x080058cb

080050a0 <__sflush_r>:
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	0716      	lsls	r6, r2, #28
 80050aa:	4605      	mov	r5, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d454      	bmi.n	800515a <__sflush_r+0xba>
 80050b0:	684b      	ldr	r3, [r1, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dc02      	bgt.n	80050bc <__sflush_r+0x1c>
 80050b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd48      	ble.n	800514e <__sflush_r+0xae>
 80050bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d045      	beq.n	800514e <__sflush_r+0xae>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050c8:	682f      	ldr	r7, [r5, #0]
 80050ca:	6a21      	ldr	r1, [r4, #32]
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	d030      	beq.n	8005132 <__sflush_r+0x92>
 80050d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	0759      	lsls	r1, r3, #29
 80050d6:	d505      	bpl.n	80050e4 <__sflush_r+0x44>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050de:	b10b      	cbz	r3, 80050e4 <__sflush_r+0x44>
 80050e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	d106      	bne.n	8005102 <__sflush_r+0x62>
 80050f4:	6829      	ldr	r1, [r5, #0]
 80050f6:	291d      	cmp	r1, #29
 80050f8:	d82b      	bhi.n	8005152 <__sflush_r+0xb2>
 80050fa:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <__sflush_r+0x104>)
 80050fc:	40ca      	lsrs	r2, r1
 80050fe:	07d6      	lsls	r6, r2, #31
 8005100:	d527      	bpl.n	8005152 <__sflush_r+0xb2>
 8005102:	2200      	movs	r2, #0
 8005104:	6062      	str	r2, [r4, #4]
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	d504      	bpl.n	8005118 <__sflush_r+0x78>
 800510e:	1c42      	adds	r2, r0, #1
 8005110:	d101      	bne.n	8005116 <__sflush_r+0x76>
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	b903      	cbnz	r3, 8005118 <__sflush_r+0x78>
 8005116:	6560      	str	r0, [r4, #84]	@ 0x54
 8005118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	b1b9      	cbz	r1, 800514e <__sflush_r+0xae>
 800511e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005122:	4299      	cmp	r1, r3
 8005124:	d002      	beq.n	800512c <__sflush_r+0x8c>
 8005126:	4628      	mov	r0, r5
 8005128:	f7ff fa94 	bl	8004654 <_free_r>
 800512c:	2300      	movs	r3, #0
 800512e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005130:	e00d      	b.n	800514e <__sflush_r+0xae>
 8005132:	2301      	movs	r3, #1
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	4602      	mov	r2, r0
 800513a:	1c50      	adds	r0, r2, #1
 800513c:	d1c9      	bne.n	80050d2 <__sflush_r+0x32>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c6      	beq.n	80050d2 <__sflush_r+0x32>
 8005144:	2b1d      	cmp	r3, #29
 8005146:	d001      	beq.n	800514c <__sflush_r+0xac>
 8005148:	2b16      	cmp	r3, #22
 800514a:	d11e      	bne.n	800518a <__sflush_r+0xea>
 800514c:	602f      	str	r7, [r5, #0]
 800514e:	2000      	movs	r0, #0
 8005150:	e022      	b.n	8005198 <__sflush_r+0xf8>
 8005152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005156:	b21b      	sxth	r3, r3
 8005158:	e01b      	b.n	8005192 <__sflush_r+0xf2>
 800515a:	690f      	ldr	r7, [r1, #16]
 800515c:	2f00      	cmp	r7, #0
 800515e:	d0f6      	beq.n	800514e <__sflush_r+0xae>
 8005160:	0793      	lsls	r3, r2, #30
 8005162:	680e      	ldr	r6, [r1, #0]
 8005164:	bf08      	it	eq
 8005166:	694b      	ldreq	r3, [r1, #20]
 8005168:	600f      	str	r7, [r1, #0]
 800516a:	bf18      	it	ne
 800516c:	2300      	movne	r3, #0
 800516e:	eba6 0807 	sub.w	r8, r6, r7
 8005172:	608b      	str	r3, [r1, #8]
 8005174:	f1b8 0f00 	cmp.w	r8, #0
 8005178:	dde9      	ble.n	800514e <__sflush_r+0xae>
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800517e:	4643      	mov	r3, r8
 8005180:	463a      	mov	r2, r7
 8005182:	4628      	mov	r0, r5
 8005184:	47b0      	blx	r6
 8005186:	2800      	cmp	r0, #0
 8005188:	dc08      	bgt.n	800519c <__sflush_r+0xfc>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4407      	add	r7, r0
 800519e:	eba8 0800 	sub.w	r8, r8, r0
 80051a2:	e7e7      	b.n	8005174 <__sflush_r+0xd4>
 80051a4:	20400001 	.word	0x20400001

080051a8 <_fflush_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	b913      	cbnz	r3, 80051b8 <_fflush_r+0x10>
 80051b2:	2500      	movs	r5, #0
 80051b4:	4628      	mov	r0, r5
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	b118      	cbz	r0, 80051c2 <_fflush_r+0x1a>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <_fflush_r+0x1a>
 80051be:	f7fe ff5f 	bl	8004080 <__sinit>
 80051c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f3      	beq.n	80051b2 <_fflush_r+0xa>
 80051ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051cc:	07d0      	lsls	r0, r2, #31
 80051ce:	d404      	bmi.n	80051da <_fflush_r+0x32>
 80051d0:	0599      	lsls	r1, r3, #22
 80051d2:	d402      	bmi.n	80051da <_fflush_r+0x32>
 80051d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d6:	f7ff fa06 	bl	80045e6 <__retarget_lock_acquire_recursive>
 80051da:	4628      	mov	r0, r5
 80051dc:	4621      	mov	r1, r4
 80051de:	f7ff ff5f 	bl	80050a0 <__sflush_r>
 80051e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051e4:	07da      	lsls	r2, r3, #31
 80051e6:	4605      	mov	r5, r0
 80051e8:	d4e4      	bmi.n	80051b4 <_fflush_r+0xc>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	059b      	lsls	r3, r3, #22
 80051ee:	d4e1      	bmi.n	80051b4 <_fflush_r+0xc>
 80051f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f2:	f7ff f9f9 	bl	80045e8 <__retarget_lock_release_recursive>
 80051f6:	e7dd      	b.n	80051b4 <_fflush_r+0xc>

080051f8 <fiprintf>:
 80051f8:	b40e      	push	{r1, r2, r3}
 80051fa:	b503      	push	{r0, r1, lr}
 80051fc:	4601      	mov	r1, r0
 80051fe:	ab03      	add	r3, sp, #12
 8005200:	4805      	ldr	r0, [pc, #20]	@ (8005218 <fiprintf+0x20>)
 8005202:	f853 2b04 	ldr.w	r2, [r3], #4
 8005206:	6800      	ldr	r0, [r0, #0]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	f7ff fca5 	bl	8004b58 <_vfiprintf_r>
 800520e:	b002      	add	sp, #8
 8005210:	f85d eb04 	ldr.w	lr, [sp], #4
 8005214:	b003      	add	sp, #12
 8005216:	4770      	bx	lr
 8005218:	2000001c 	.word	0x2000001c

0800521c <__swhatbuf_r>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	460c      	mov	r4, r1
 8005220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005224:	2900      	cmp	r1, #0
 8005226:	b096      	sub	sp, #88	@ 0x58
 8005228:	4615      	mov	r5, r2
 800522a:	461e      	mov	r6, r3
 800522c:	da0d      	bge.n	800524a <__swhatbuf_r+0x2e>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	bf14      	ite	ne
 800523a:	2340      	movne	r3, #64	@ 0x40
 800523c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005240:	2000      	movs	r0, #0
 8005242:	6031      	str	r1, [r6, #0]
 8005244:	602b      	str	r3, [r5, #0]
 8005246:	b016      	add	sp, #88	@ 0x58
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	466a      	mov	r2, sp
 800524c:	f000 f896 	bl	800537c <_fstat_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	dbec      	blt.n	800522e <__swhatbuf_r+0x12>
 8005254:	9901      	ldr	r1, [sp, #4]
 8005256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800525a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800525e:	4259      	negs	r1, r3
 8005260:	4159      	adcs	r1, r3
 8005262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005266:	e7eb      	b.n	8005240 <__swhatbuf_r+0x24>

08005268 <__smakebuf_r>:
 8005268:	898b      	ldrh	r3, [r1, #12]
 800526a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526c:	079d      	lsls	r5, r3, #30
 800526e:	4606      	mov	r6, r0
 8005270:	460c      	mov	r4, r1
 8005272:	d507      	bpl.n	8005284 <__smakebuf_r+0x1c>
 8005274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	2301      	movs	r3, #1
 800527e:	6163      	str	r3, [r4, #20]
 8005280:	b003      	add	sp, #12
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	ab01      	add	r3, sp, #4
 8005286:	466a      	mov	r2, sp
 8005288:	f7ff ffc8 	bl	800521c <__swhatbuf_r>
 800528c:	9f00      	ldr	r7, [sp, #0]
 800528e:	4605      	mov	r5, r0
 8005290:	4639      	mov	r1, r7
 8005292:	4630      	mov	r0, r6
 8005294:	f7ff fa52 	bl	800473c <_malloc_r>
 8005298:	b948      	cbnz	r0, 80052ae <__smakebuf_r+0x46>
 800529a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800529e:	059a      	lsls	r2, r3, #22
 80052a0:	d4ee      	bmi.n	8005280 <__smakebuf_r+0x18>
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	e7e2      	b.n	8005274 <__smakebuf_r+0xc>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	6020      	str	r0, [r4, #0]
 80052b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052be:	b15b      	cbz	r3, 80052d8 <__smakebuf_r+0x70>
 80052c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 f86b 	bl	80053a0 <_isatty_r>
 80052ca:	b128      	cbz	r0, 80052d8 <__smakebuf_r+0x70>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	431d      	orrs	r5, r3
 80052dc:	81a5      	strh	r5, [r4, #12]
 80052de:	e7cf      	b.n	8005280 <__smakebuf_r+0x18>

080052e0 <_putc_r>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	4606      	mov	r6, r0
 80052e8:	b118      	cbz	r0, 80052f2 <_putc_r+0x12>
 80052ea:	6a03      	ldr	r3, [r0, #32]
 80052ec:	b90b      	cbnz	r3, 80052f2 <_putc_r+0x12>
 80052ee:	f7fe fec7 	bl	8004080 <__sinit>
 80052f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052f4:	07d8      	lsls	r0, r3, #31
 80052f6:	d405      	bmi.n	8005304 <_putc_r+0x24>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	0599      	lsls	r1, r3, #22
 80052fc:	d402      	bmi.n	8005304 <_putc_r+0x24>
 80052fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005300:	f7ff f971 	bl	80045e6 <__retarget_lock_acquire_recursive>
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	da05      	bge.n	800531a <_putc_r+0x3a>
 800530e:	69a2      	ldr	r2, [r4, #24]
 8005310:	4293      	cmp	r3, r2
 8005312:	db12      	blt.n	800533a <_putc_r+0x5a>
 8005314:	b2eb      	uxtb	r3, r5
 8005316:	2b0a      	cmp	r3, #10
 8005318:	d00f      	beq.n	800533a <_putc_r+0x5a>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	701d      	strb	r5, [r3, #0]
 8005322:	b2ed      	uxtb	r5, r5
 8005324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005326:	07da      	lsls	r2, r3, #31
 8005328:	d405      	bmi.n	8005336 <_putc_r+0x56>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	d402      	bmi.n	8005336 <_putc_r+0x56>
 8005330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005332:	f7ff f959 	bl	80045e8 <__retarget_lock_release_recursive>
 8005336:	4628      	mov	r0, r5
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	4629      	mov	r1, r5
 800533c:	4622      	mov	r2, r4
 800533e:	4630      	mov	r0, r6
 8005340:	f7fe ffb1 	bl	80042a6 <__swbuf_r>
 8005344:	4605      	mov	r5, r0
 8005346:	e7ed      	b.n	8005324 <_putc_r+0x44>

08005348 <memmove>:
 8005348:	4288      	cmp	r0, r1
 800534a:	b510      	push	{r4, lr}
 800534c:	eb01 0402 	add.w	r4, r1, r2
 8005350:	d902      	bls.n	8005358 <memmove+0x10>
 8005352:	4284      	cmp	r4, r0
 8005354:	4623      	mov	r3, r4
 8005356:	d807      	bhi.n	8005368 <memmove+0x20>
 8005358:	1e43      	subs	r3, r0, #1
 800535a:	42a1      	cmp	r1, r4
 800535c:	d008      	beq.n	8005370 <memmove+0x28>
 800535e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005366:	e7f8      	b.n	800535a <memmove+0x12>
 8005368:	4402      	add	r2, r0
 800536a:	4601      	mov	r1, r0
 800536c:	428a      	cmp	r2, r1
 800536e:	d100      	bne.n	8005372 <memmove+0x2a>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537a:	e7f7      	b.n	800536c <memmove+0x24>

0800537c <_fstat_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	@ (800539c <_fstat_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	f7fc f843 	bl	8001414 <_fstat>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_fstat_r+0x1c>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b103      	cbz	r3, 8005398 <_fstat_r+0x1c>
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	20000b3c 	.word	0x20000b3c

080053a0 <_isatty_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d06      	ldr	r5, [pc, #24]	@ (80053bc <_isatty_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7fc f842 	bl	8001434 <_isatty>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_isatty_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_isatty_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000b3c 	.word	0x20000b3c

080053c0 <_sbrk_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d06      	ldr	r5, [pc, #24]	@ (80053dc <_sbrk_r+0x1c>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fc f84a 	bl	8001464 <_sbrk>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_sbrk_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_sbrk_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	20000b3c 	.word	0x20000b3c

080053e0 <abort>:
 80053e0:	b508      	push	{r3, lr}
 80053e2:	2006      	movs	r0, #6
 80053e4:	f000 f85a 	bl	800549c <raise>
 80053e8:	2001      	movs	r0, #1
 80053ea:	f7fb ffc3 	bl	8001374 <_exit>

080053ee <_realloc_r>:
 80053ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	4607      	mov	r7, r0
 80053f4:	4614      	mov	r4, r2
 80053f6:	460d      	mov	r5, r1
 80053f8:	b921      	cbnz	r1, 8005404 <_realloc_r+0x16>
 80053fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	4611      	mov	r1, r2
 8005400:	f7ff b99c 	b.w	800473c <_malloc_r>
 8005404:	b92a      	cbnz	r2, 8005412 <_realloc_r+0x24>
 8005406:	f7ff f925 	bl	8004654 <_free_r>
 800540a:	4625      	mov	r5, r4
 800540c:	4628      	mov	r0, r5
 800540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005412:	f000 f85f 	bl	80054d4 <_malloc_usable_size_r>
 8005416:	4284      	cmp	r4, r0
 8005418:	4606      	mov	r6, r0
 800541a:	d802      	bhi.n	8005422 <_realloc_r+0x34>
 800541c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005420:	d8f4      	bhi.n	800540c <_realloc_r+0x1e>
 8005422:	4621      	mov	r1, r4
 8005424:	4638      	mov	r0, r7
 8005426:	f7ff f989 	bl	800473c <_malloc_r>
 800542a:	4680      	mov	r8, r0
 800542c:	b908      	cbnz	r0, 8005432 <_realloc_r+0x44>
 800542e:	4645      	mov	r5, r8
 8005430:	e7ec      	b.n	800540c <_realloc_r+0x1e>
 8005432:	42b4      	cmp	r4, r6
 8005434:	4622      	mov	r2, r4
 8005436:	4629      	mov	r1, r5
 8005438:	bf28      	it	cs
 800543a:	4632      	movcs	r2, r6
 800543c:	f7ff f8dd 	bl	80045fa <memcpy>
 8005440:	4629      	mov	r1, r5
 8005442:	4638      	mov	r0, r7
 8005444:	f7ff f906 	bl	8004654 <_free_r>
 8005448:	e7f1      	b.n	800542e <_realloc_r+0x40>

0800544a <_raise_r>:
 800544a:	291f      	cmp	r1, #31
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4605      	mov	r5, r0
 8005450:	460c      	mov	r4, r1
 8005452:	d904      	bls.n	800545e <_raise_r+0x14>
 8005454:	2316      	movs	r3, #22
 8005456:	6003      	str	r3, [r0, #0]
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	bd38      	pop	{r3, r4, r5, pc}
 800545e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005460:	b112      	cbz	r2, 8005468 <_raise_r+0x1e>
 8005462:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005466:	b94b      	cbnz	r3, 800547c <_raise_r+0x32>
 8005468:	4628      	mov	r0, r5
 800546a:	f000 f831 	bl	80054d0 <_getpid_r>
 800546e:	4622      	mov	r2, r4
 8005470:	4601      	mov	r1, r0
 8005472:	4628      	mov	r0, r5
 8005474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005478:	f000 b818 	b.w	80054ac <_kill_r>
 800547c:	2b01      	cmp	r3, #1
 800547e:	d00a      	beq.n	8005496 <_raise_r+0x4c>
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	d103      	bne.n	800548c <_raise_r+0x42>
 8005484:	2316      	movs	r3, #22
 8005486:	6003      	str	r3, [r0, #0]
 8005488:	2001      	movs	r0, #1
 800548a:	e7e7      	b.n	800545c <_raise_r+0x12>
 800548c:	2100      	movs	r1, #0
 800548e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005492:	4620      	mov	r0, r4
 8005494:	4798      	blx	r3
 8005496:	2000      	movs	r0, #0
 8005498:	e7e0      	b.n	800545c <_raise_r+0x12>
	...

0800549c <raise>:
 800549c:	4b02      	ldr	r3, [pc, #8]	@ (80054a8 <raise+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f7ff bfd2 	b.w	800544a <_raise_r>
 80054a6:	bf00      	nop
 80054a8:	2000001c 	.word	0x2000001c

080054ac <_kill_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d07      	ldr	r5, [pc, #28]	@ (80054cc <_kill_r+0x20>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f7fb ff4b 	bl	8001354 <_kill>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	d102      	bne.n	80054c8 <_kill_r+0x1c>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b103      	cbz	r3, 80054c8 <_kill_r+0x1c>
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	bf00      	nop
 80054cc:	20000b3c 	.word	0x20000b3c

080054d0 <_getpid_r>:
 80054d0:	f7fb bf38 	b.w	8001344 <_getpid>

080054d4 <_malloc_usable_size_r>:
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f18      	subs	r0, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfbc      	itt	lt
 80054de:	580b      	ldrlt	r3, [r1, r0]
 80054e0:	18c0      	addlt	r0, r0, r3
 80054e2:	4770      	bx	lr

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
