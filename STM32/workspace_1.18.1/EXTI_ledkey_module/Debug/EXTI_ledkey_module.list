
EXTI_ledkey_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003328  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003534  08003534  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800353c  0800353c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003544  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  080035ac  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080035ac  00005224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c06  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160e  00000000  00000000  0000cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000577  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016418  00000000  00000000  0000ef5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000857e  00000000  00000000  00025377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bc8  00000000  00000000  0002d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b54bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000b5500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b78f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034b0 	.word	0x080034b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080034b0 	.word	0x080034b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int buttonState[9] = {0, }, buttonStateOld[9] = {0, };
 80005b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005b6:	2224      	movs	r2, #36	@ 0x24
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f9f6 	bl	80029ac <memset>
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2224      	movs	r2, #36	@ 0x24
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f9f0 	bl	80029ac <memset>
	int cnt = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fbea 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f832 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8c4 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f898 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!\r\n");
 80005e0:	4812      	ldr	r0, [pc, #72]	@ (800062c <main+0x80>)
 80005e2:	f002 f903 	bl	80027ec <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(keyNo != 0)
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <main+0x84>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0fb      	beq.n	80005e6 <main+0x3a>
	  {
		  printf("keyNo : %d\r\n", keyNo);
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <main+0x84>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	480f      	ldr	r0, [pc, #60]	@ (8000634 <main+0x88>)
 80005f6:	f002 f891 	bl	800271c <iprintf>
		  if(keyNo == 8)
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <main+0x84>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d104      	bne.n	800060c <main+0x60>
			  keyNo++;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0x84>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <main+0x84>)
 800060a:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOB, LED0_Pin << (keyNo - 1));
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <main+0x84>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b01      	subs	r3, #1
 8000612:	2210      	movs	r2, #16
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	4806      	ldr	r0, [pc, #24]	@ (8000638 <main+0x8c>)
 800061e:	f000 fee4 	bl	80013ea <HAL_GPIO_TogglePin>
		  keyNo = 0;
 8000622:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <main+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	  if(keyNo != 0)
 8000628:	e7dd      	b.n	80005e6 <main+0x3a>
 800062a:	bf00      	nop
 800062c:	080034c8 	.word	0x080034c8
 8000630:	200000cc 	.word	0x200000cc
 8000634:	080034d8 	.word	0x080034d8
 8000638:	40020400 	.word	0x40020400

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f9ae 	bl	80029ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ac:	2310      	movs	r3, #16
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fec4 	bl	8001450 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ce:	f000 f9af 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f926 	bl	8001940 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f999 	bl	8000a30 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fb1a 	bl	8001d80 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f96d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000084 	.word	0x20000084
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b5a      	ldr	r3, [pc, #360]	@ (80008e8 <MX_GPIO_Init+0x184>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a59      	ldr	r2, [pc, #356]	@ (80008e8 <MX_GPIO_Init+0x184>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b57      	ldr	r3, [pc, #348]	@ (80008e8 <MX_GPIO_Init+0x184>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b53      	ldr	r3, [pc, #332]	@ (80008e8 <MX_GPIO_Init+0x184>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a52      	ldr	r2, [pc, #328]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b50      	ldr	r3, [pc, #320]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b4c      	ldr	r3, [pc, #304]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a4b      	ldr	r2, [pc, #300]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b49      	ldr	r3, [pc, #292]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b45      	ldr	r3, [pc, #276]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a44      	ldr	r2, [pc, #272]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	483f      	ldr	r0, [pc, #252]	@ (80008ec <MX_GPIO_Init+0x188>)
 80007f0:	f000 fde2 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED6_Pin|LED7_Pin|LED0_Pin|LED1_Pin
 80007f4:	2200      	movs	r2, #0
 80007f6:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 80007fa:	483d      	ldr	r0, [pc, #244]	@ (80008f0 <MX_GPIO_Init+0x18c>)
 80007fc:	f000 fddc 	bl	80013b8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000806:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4837      	ldr	r0, [pc, #220]	@ (80008f4 <MX_GPIO_Init+0x190>)
 8000818:	f000 fc4a 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin BTN6_Pin BTN7_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 800081c:	23ff      	movs	r3, #255	@ 0xff
 800081e:	617b      	str	r3, [r7, #20]
                          |BTN4_Pin|BTN5_Pin|BTN6_Pin|BTN7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4830      	ldr	r0, [pc, #192]	@ (80008f4 <MX_GPIO_Init+0x190>)
 8000832:	f000 fc3d 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	2320      	movs	r3, #32
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4827      	ldr	r0, [pc, #156]	@ (80008ec <MX_GPIO_Init+0x188>)
 800084e:	f000 fc2f 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED7_Pin LED0_Pin LED1_Pin
                           LED2_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED0_Pin|LED1_Pin
 8000852:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 8000856:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <MX_GPIO_Init+0x18c>)
 800086c:	f000 fc20 	bl	80010b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2006      	movs	r0, #6
 8000876:	f000 fbe4 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800087a:	2006      	movs	r0, #6
 800087c:	f000 fbfd 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2007      	movs	r0, #7
 8000886:	f000 fbdc 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 fbf5 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2008      	movs	r0, #8
 8000896:	f000 fbd4 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800089a:	2008      	movs	r0, #8
 800089c:	f000 fbed 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2009      	movs	r0, #9
 80008a6:	f000 fbcc 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008aa:	2009      	movs	r0, #9
 80008ac:	f000 fbe5 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	200a      	movs	r0, #10
 80008b6:	f000 fbc4 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f000 fbdd 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2017      	movs	r0, #23
 80008c6:	f000 fbbc 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ca:	2017      	movs	r0, #23
 80008cc:	f000 fbd5 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2028      	movs	r0, #40	@ 0x28
 80008d6:	f000 fbb4 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008da:	2028      	movs	r0, #40	@ 0x28
 80008dc:	f000 fbcd 	bl	800107a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	@ 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40020800 	.word	0x40020800

080008f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000906:	2201      	movs	r2, #1
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <__io_putchar+0x20>)
 800090a:	f001 fa89 	bl	8001e20 <HAL_UART_Transmit>

  return ch;
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000084 	.word	0x20000084

0800091c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PIN)
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092c:	d073      	beq.n	8000a16 <HAL_GPIO_EXTI_Callback+0xfa>
 800092e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000932:	dc74      	bgt.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
 8000934:	2b80      	cmp	r3, #128	@ 0x80
 8000936:	d06a      	beq.n	8000a0e <HAL_GPIO_EXTI_Callback+0xf2>
 8000938:	2b80      	cmp	r3, #128	@ 0x80
 800093a:	dc70      	bgt.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
 800093c:	2b20      	cmp	r3, #32
 800093e:	dc47      	bgt.n	80009d0 <HAL_GPIO_EXTI_Callback+0xb4>
 8000940:	2b00      	cmp	r3, #0
 8000942:	dd6c      	ble.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
 8000944:	3b01      	subs	r3, #1
 8000946:	2b1f      	cmp	r3, #31
 8000948:	d869      	bhi.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
 800094a:	a201      	add	r2, pc, #4	@ (adr r2, 8000950 <HAL_GPIO_EXTI_Callback+0x34>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	080009d7 	.word	0x080009d7
 8000954:	080009df 	.word	0x080009df
 8000958:	08000a1f 	.word	0x08000a1f
 800095c:	080009e7 	.word	0x080009e7
 8000960:	08000a1f 	.word	0x08000a1f
 8000964:	08000a1f 	.word	0x08000a1f
 8000968:	08000a1f 	.word	0x08000a1f
 800096c:	080009ef 	.word	0x080009ef
 8000970:	08000a1f 	.word	0x08000a1f
 8000974:	08000a1f 	.word	0x08000a1f
 8000978:	08000a1f 	.word	0x08000a1f
 800097c:	08000a1f 	.word	0x08000a1f
 8000980:	08000a1f 	.word	0x08000a1f
 8000984:	08000a1f 	.word	0x08000a1f
 8000988:	08000a1f 	.word	0x08000a1f
 800098c:	080009f7 	.word	0x080009f7
 8000990:	08000a1f 	.word	0x08000a1f
 8000994:	08000a1f 	.word	0x08000a1f
 8000998:	08000a1f 	.word	0x08000a1f
 800099c:	08000a1f 	.word	0x08000a1f
 80009a0:	08000a1f 	.word	0x08000a1f
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	08000a1f 	.word	0x08000a1f
 80009ac:	08000a1f 	.word	0x08000a1f
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	08000a1f 	.word	0x08000a1f
 80009b8:	08000a1f 	.word	0x08000a1f
 80009bc:	08000a1f 	.word	0x08000a1f
 80009c0:	08000a1f 	.word	0x08000a1f
 80009c4:	08000a1f 	.word	0x08000a1f
 80009c8:	08000a1f 	.word	0x08000a1f
 80009cc:	080009ff 	.word	0x080009ff
 80009d0:	2b40      	cmp	r3, #64	@ 0x40
 80009d2:	d018      	beq.n	8000a06 <HAL_GPIO_EXTI_Callback+0xea>
		case B1_Pin:
			keyNo = 9;
			break;

	}
}
 80009d4:	e023      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
			break;
 80009dc:	e01f      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 2;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
			break;
 80009e4:	e01b      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 3;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	601a      	str	r2, [r3, #0]
			break;
 80009ec:	e017      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 4;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	601a      	str	r2, [r3, #0]
			break;
 80009f4:	e013      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 5;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 80009f8:	2205      	movs	r2, #5
 80009fa:	601a      	str	r2, [r3, #0]
			break;
 80009fc:	e00f      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 6;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a00:	2206      	movs	r2, #6
 8000a02:	601a      	str	r2, [r3, #0]
			break;
 8000a04:	e00b      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 7;
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
			break;
 8000a0c:	e007      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 8;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	601a      	str	r2, [r3, #0]
			break;
 8000a14:	e003      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x102>
			keyNo = 9;
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a18:	2209      	movs	r2, #9
 8000a1a:	601a      	str	r2, [r3, #0]
			break;
 8000a1c:	bf00      	nop
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000cc 	.word	0x200000cc

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f000 fad6 	bl	800102c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <HAL_UART_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a17      	ldr	r2, [pc, #92]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_UART_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <HAL_UART_MspInit+0x8c>)
 8000b02:	f000 fad5 	bl	80010b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f96b 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 fc4e 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fc47 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f000 fc40 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f000 fc39 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f000 fc32 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	f000 fc2b 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN6_Pin);
 8000bca:	2040      	movs	r0, #64	@ 0x40
 8000bcc:	f000 fc28 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN7_Pin);
 8000bd0:	2080      	movs	r0, #128	@ 0x80
 8000bd2:	f000 fc25 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bde:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000be2:	f000 fc1d 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e00a      	b.n	8000c12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfc:	f3af 8000 	nop.w
 8000c00:	4601      	mov	r1, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	60ba      	str	r2, [r7, #8]
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf0      	blt.n	8000bfc <_read+0x12>
  }

  return len;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	e009      	b.n	8000c4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe5a 	bl	80008f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbf1      	blt.n	8000c36 <_write+0x12>
  }
  return len;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_close>:

int _close(int file)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c84:	605a      	str	r2, [r3, #4]
  return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_isatty>:

int _isatty(int file)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f001 fea8 	bl	8002a48 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200000d0 	.word	0x200000d0
 8000d2c:	20000228 	.word	0x20000228

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d58:	f7ff ffea 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f001 fe67 	bl	8002a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc11 	bl	80005ac <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d98:	08003544 	.word	0x08003544
  ldr r2, =_sbss
 8000d9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da0:	20000224 	.word	0x20000224

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f92b 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe2e 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f943 	bl	8001096 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f90b 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200000d4 	.word	0x200000d4

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200000d4 	.word	0x200000d4

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff29 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff3e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff8e 	bl	8000f80 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff31 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e159      	b.n	8001380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8148 	bne.w	800137a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a2 	beq.w	800137a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x2ec>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a49      	ldr	r2, [pc, #292]	@ (80013a0 <HAL_GPIO_Init+0x2f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x202>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a48      	ldr	r2, [pc, #288]	@ (80013a4 <HAL_GPIO_Init+0x2f4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x1fe>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x1fa>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	@ (80013ac <HAL_GPIO_Init+0x2fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x1f6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_GPIO_Init+0x300>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x1f2>
 800129e:	2304      	movs	r3, #4
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	@ (800139c <HAL_GPIO_Init+0x2ec>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b38      	ldr	r3, [pc, #224]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a24      	ldr	r2, [pc, #144]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134a:	4a1a      	ldr	r2, [pc, #104]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001374:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f aea2 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43d9      	mvns	r1, r3
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	400b      	ands	r3, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fa6c 	bl	800091c <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e267      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d075      	beq.n	800155a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d00c      	beq.n	8001494 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001482:	2b08      	cmp	r3, #8
 8001484:	d112      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b82      	ldr	r3, [pc, #520]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b7e      	ldr	r3, [pc, #504]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05b      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d157      	bne.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e242      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x74>
 80014b6:	4b76      	ldr	r3, [pc, #472]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a75      	ldr	r2, [pc, #468]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b70      	ldr	r3, [pc, #448]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b6d      	ldr	r3, [pc, #436]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6c      	ldr	r2, [pc, #432]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014e8:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a68      	ldr	r2, [pc, #416]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b66      	ldr	r3, [pc, #408]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a65      	ldr	r2, [pc, #404]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fcb4 	bl	8000e74 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fcb0 	bl	8000e74 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e207      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xc0>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fca0 	bl	8000e74 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc9c 	bl	8000e74 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1f3      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1c7      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4937      	ldr	r1, [pc, #220]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x244>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fc55 	bl	8000e74 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc51 	bl	8000e74 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1a8      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4925      	ldr	r1, [pc, #148]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_RCC_OscConfig+0x244>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fc34 	bl	8000e74 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fc30 	bl	8000e74 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e187      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_RCC_OscConfig+0x248>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fc14 	bl	8000e74 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fc10 	bl	8000e74 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e167      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x200>
 800166e:	e01b      	b.n	80016a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_RCC_OscConfig+0x248>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fbfd 	bl	8000e74 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	e00e      	b.n	800169c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fbf9 	bl	8000e74 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d907      	bls.n	800169c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e150      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
 8001690:	40023800 	.word	0x40023800
 8001694:	42470000 	.word	0x42470000
 8001698:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ea      	bne.n	800167e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8097 	beq.w	80017e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b81      	ldr	r3, [pc, #516]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a7c      	ldr	r2, [pc, #496]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b7a      	ldr	r3, [pc, #488]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b77      	ldr	r3, [pc, #476]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a73      	ldr	r2, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fbb9 	bl	8000e74 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fbb5 	bl	8000e74 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e10c      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b6a      	ldr	r3, [pc, #424]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x2ea>
 800172c:	4b64      	ldr	r3, [pc, #400]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a63      	ldr	r2, [pc, #396]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x324>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x30c>
 8001742:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	4a5e      	ldr	r2, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6713      	str	r3, [r2, #112]	@ 0x70
 800174e:	4b5c      	ldr	r3, [pc, #368]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001752:	4a5b      	ldr	r2, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	@ 0x70
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x324>
 800175c:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
 8001768:	4b55      	ldr	r3, [pc, #340]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176c:	4a54      	ldr	r2, [pc, #336]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d015      	beq.n	80017a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fb7a 	bl	8000e74 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb76 	bl	8000e74 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0cb      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ee      	beq.n	8001784 <HAL_RCC_OscConfig+0x334>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fb64 	bl	8000e74 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff fb60 	bl	8000e74 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0b5      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c6:	4b3e      	ldr	r3, [pc, #248]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	4a38      	ldr	r2, [pc, #224]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a1 	beq.w	8001930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d05c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d141      	bne.n	8001886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fb34 	bl	8000e74 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fb30 	bl	8000e74 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e087      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69da      	ldr	r2, [r3, #28]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fb09 	bl	8000e74 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fb05 	bl	8000e74 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e05c      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x416>
 8001884:	e054      	b.n	8001930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff faf2 	bl	8000e74 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff faee 	bl	8000e74 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e045      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x444>
 80018b2:	e03d      	b.n	8001930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e038      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x4ec>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d028      	beq.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d121      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d11a      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001904:	4293      	cmp	r3, r2
 8001906:	d111      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0cc      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d90c      	bls.n	800197c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b65      	ldr	r3, [pc, #404]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800199e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b50      	ldr	r3, [pc, #320]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	494d      	ldr	r1, [pc, #308]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d044      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d119      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e067      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b37      	ldr	r3, [pc, #220]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4934      	ldr	r1, [pc, #208]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7ff fa20 	bl	8000e74 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff fa1c 	bl	8000e74 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e04f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d20c      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e032      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac6:	f000 f821 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	490a      	ldr	r1, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	5ccb      	ldrb	r3, [r1, r3]
 8001ada:	fa22 f303 	lsr.w	r3, r2, r3
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f980 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	080034e8 	.word	0x080034e8
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b10:	b094      	sub	sp, #80	@ 0x50
 8001b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b24:	4b79      	ldr	r3, [pc, #484]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d00d      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x40>
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	f200 80e1 	bhi.w	8001cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3e:	e0db      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b73      	ldr	r3, [pc, #460]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b44:	e0db      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b46:	4b73      	ldr	r3, [pc, #460]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b4a:	e0d8      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b56:	4b6d      	ldr	r3, [pc, #436]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d063      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	2200      	movs	r2, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b7e:	4622      	mov	r2, r4
 8001b80:	462b      	mov	r3, r5
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	0159      	lsls	r1, r3, #5
 8001b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b90:	0150      	lsls	r0, r2, #5
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4621      	mov	r1, r4
 8001b98:	1a51      	subs	r1, r2, r1
 8001b9a:	6139      	str	r1, [r7, #16]
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bb0:	4659      	mov	r1, fp
 8001bb2:	018b      	lsls	r3, r1, #6
 8001bb4:	4651      	mov	r1, sl
 8001bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bba:	4651      	mov	r1, sl
 8001bbc:	018a      	lsls	r2, r1, #6
 8001bbe:	4651      	mov	r1, sl
 8001bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bde:	4690      	mov	r8, r2
 8001be0:	4699      	mov	r9, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	eb18 0303 	adds.w	r3, r8, r3
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	462b      	mov	r3, r5
 8001bec:	eb49 0303 	adc.w	r3, r9, r3
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	024b      	lsls	r3, r1, #9
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c08:	4621      	mov	r1, r4
 8001c0a:	024a      	lsls	r2, r1, #9
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c1c:	f7fe fb30 	bl	8000280 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c28:	e058      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b38      	ldr	r3, [pc, #224]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	4611      	mov	r1, r2
 8001c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c44:	4642      	mov	r2, r8
 8001c46:	464b      	mov	r3, r9
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	0159      	lsls	r1, r3, #5
 8001c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c56:	0150      	lsls	r0, r2, #5
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c62:	4649      	mov	r1, r9
 8001c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c80:	eb63 050b 	sbc.w	r5, r3, fp
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	00eb      	lsls	r3, r5, #3
 8001c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c92:	00e2      	lsls	r2, r4, #3
 8001c94:	4614      	mov	r4, r2
 8001c96:	461d      	mov	r5, r3
 8001c98:	4643      	mov	r3, r8
 8001c9a:	18e3      	adds	r3, r4, r3
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	eb45 0303 	adc.w	r3, r5, r3
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	028b      	lsls	r3, r1, #10
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	028a      	lsls	r2, r1, #10
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	61fa      	str	r2, [r7, #28]
 8001ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd0:	f7fe fad6 	bl	8000280 <__aeabi_uldivmod>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3750      	adds	r7, #80	@ 0x50
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d34:	f7ff fff0 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	080034f8 	.word	0x080034f8

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d5c:	f7ff ffdc 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0b5b      	lsrs	r3, r3, #13
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4903      	ldr	r1, [pc, #12]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	080034f8 	.word	0x080034f8

08001d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e042      	b.n	8001e18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fe70 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	@ 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f973 	bl	80020b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d175      	bne.n	8001f2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_UART_Transmit+0x2c>
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e06e      	b.n	8001f2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2221      	movs	r2, #33	@ 0x21
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e5e:	f7ff f809 	bl	8000e74 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	88fa      	ldrh	r2, [r7, #6]
 8001e68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e78:	d108      	bne.n	8001e8c <HAL_UART_Transmit+0x6c>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d104      	bne.n	8001e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e003      	b.n	8001e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e94:	e02e      	b.n	8001ef4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f848 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e03a      	b.n	8001f2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e007      	b.n	8001ee6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1cb      	bne.n	8001e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2140      	movs	r1, #64	@ 0x40
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f814 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	e03b      	b.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4e:	d037      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f50:	f7fe ff90 	bl	8000e74 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	6a3a      	ldr	r2, [r7, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d302      	bcc.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e03a      	b.n	8001fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d023      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b80      	cmp	r3, #128	@ 0x80
 8001f7c:	d020      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b40      	cmp	r3, #64	@ 0x40
 8001f82:	d01d      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d116      	bne.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f81d 	bl	8001fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e00f      	b.n	8001fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d0b4      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b095      	sub	sp, #84	@ 0x54
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002010:	643a      	str	r2, [r7, #64]	@ 0x40
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002018:	e841 2300 	strex	r3, r2, [r1]
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e5      	bne.n	8001ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3314      	adds	r3, #20
 800202a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	e853 3f00 	ldrex	r3, [r3]
 8002032:	61fb      	str	r3, [r7, #28]
   return(result);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3314      	adds	r3, #20
 8002042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800204a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800204c:	e841 2300 	strex	r3, r2, [r1]
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e5      	bne.n	8002024 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	2b01      	cmp	r3, #1
 800205e:	d119      	bne.n	8002094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	330c      	adds	r3, #12
 8002066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	e853 3f00 	ldrex	r3, [r3]
 800206e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f023 0310 	bic.w	r3, r3, #16
 8002076:	647b      	str	r3, [r7, #68]	@ 0x44
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002080:	61ba      	str	r2, [r7, #24]
 8002082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002084:	6979      	ldr	r1, [r7, #20]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	e841 2300 	strex	r3, r2, [r1]
 800208c:	613b      	str	r3, [r7, #16]
   return(result);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e5      	bne.n	8002060 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020a2:	bf00      	nop
 80020a4:	3754      	adds	r7, #84	@ 0x54
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b0c0      	sub	sp, #256	@ 0x100
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	ea40 0301 	orr.w	r3, r0, r1
 80020d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002108:	f021 010c 	bic.w	r1, r1, #12
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002116:	430b      	orrs	r3, r1
 8002118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212a:	6999      	ldr	r1, [r3, #24]
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	ea40 0301 	orr.w	r3, r0, r1
 8002136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b8f      	ldr	r3, [pc, #572]	@ (800237c <UART_SetConfig+0x2cc>)
 8002140:	429a      	cmp	r2, r3
 8002142:	d005      	beq.n	8002150 <UART_SetConfig+0xa0>
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b8d      	ldr	r3, [pc, #564]	@ (8002380 <UART_SetConfig+0x2d0>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d104      	bne.n	800215a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002150:	f7ff fe02 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002158:	e003      	b.n	8002162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800215a:	f7ff fde9 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800215e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800216c:	f040 810c 	bne.w	8002388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002174:	2200      	movs	r2, #0
 8002176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800217a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800217e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	1891      	adds	r1, r2, r2
 8002188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800218a:	415b      	adcs	r3, r3
 800218c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800218e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002192:	4621      	mov	r1, r4
 8002194:	eb12 0801 	adds.w	r8, r2, r1
 8002198:	4629      	mov	r1, r5
 800219a:	eb43 0901 	adc.w	r9, r3, r1
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b2:	4690      	mov	r8, r2
 80021b4:	4699      	mov	r9, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	eb18 0303 	adds.w	r3, r8, r3
 80021bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021c0:	462b      	mov	r3, r5
 80021c2:	eb49 0303 	adc.w	r3, r9, r3
 80021c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021de:	460b      	mov	r3, r1
 80021e0:	18db      	adds	r3, r3, r3
 80021e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80021e4:	4613      	mov	r3, r2
 80021e6:	eb42 0303 	adc.w	r3, r2, r3
 80021ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80021ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021f4:	f7fe f844 	bl	8000280 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4b61      	ldr	r3, [pc, #388]	@ (8002384 <UART_SetConfig+0x2d4>)
 80021fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	011c      	lsls	r4, r3, #4
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002220:	415b      	adcs	r3, r3
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002228:	4641      	mov	r1, r8
 800222a:	eb12 0a01 	adds.w	sl, r2, r1
 800222e:	4649      	mov	r1, r9
 8002230:	eb43 0b01 	adc.w	fp, r3, r1
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002248:	4692      	mov	sl, r2
 800224a:	469b      	mov	fp, r3
 800224c:	4643      	mov	r3, r8
 800224e:	eb1a 0303 	adds.w	r3, sl, r3
 8002252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002256:	464b      	mov	r3, r9
 8002258:	eb4b 0303 	adc.w	r3, fp, r3
 800225c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800226c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002274:	460b      	mov	r3, r1
 8002276:	18db      	adds	r3, r3, r3
 8002278:	643b      	str	r3, [r7, #64]	@ 0x40
 800227a:	4613      	mov	r3, r2
 800227c:	eb42 0303 	adc.w	r3, r2, r3
 8002280:	647b      	str	r3, [r7, #68]	@ 0x44
 8002282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800228a:	f7fd fff9 	bl	8000280 <__aeabi_uldivmod>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4611      	mov	r1, r2
 8002294:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002296:	fba3 2301 	umull	r2, r3, r3, r1
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2264      	movs	r2, #100	@ 0x64
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	1acb      	subs	r3, r1, r3
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <UART_SetConfig+0x2d4>)
 80022ac:	fba3 2302 	umull	r2, r3, r3, r2
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022b8:	441c      	add	r4, r3
 80022ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022d4:	415b      	adcs	r3, r3
 80022d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002310:	464b      	mov	r3, r9
 8002312:	460a      	mov	r2, r1
 8002314:	eb42 0303 	adc.w	r3, r2, r3
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800232c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002330:	460b      	mov	r3, r1
 8002332:	18db      	adds	r3, r3, r3
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002336:	4613      	mov	r3, r2
 8002338:	eb42 0303 	adc.w	r3, r2, r3
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002346:	f7fd ff9b 	bl	8000280 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2164      	movs	r1, #100	@ 0x64
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	3332      	adds	r3, #50	@ 0x32
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 0207 	and.w	r2, r3, #7
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4422      	add	r2, r4
 8002376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002378:	e106      	b.n	8002588 <UART_SetConfig+0x4d8>
 800237a:	bf00      	nop
 800237c:	40011000 	.word	0x40011000
 8002380:	40011400 	.word	0x40011400
 8002384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800239a:	4642      	mov	r2, r8
 800239c:	464b      	mov	r3, r9
 800239e:	1891      	adds	r1, r2, r2
 80023a0:	6239      	str	r1, [r7, #32]
 80023a2:	415b      	adcs	r3, r3
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023aa:	4641      	mov	r1, r8
 80023ac:	1854      	adds	r4, r2, r1
 80023ae:	4649      	mov	r1, r9
 80023b0:	eb43 0501 	adc.w	r5, r3, r1
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023d0:	464b      	mov	r3, r9
 80023d2:	eb45 0303 	adc.w	r3, r5, r3
 80023d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023f6:	4629      	mov	r1, r5
 80023f8:	008b      	lsls	r3, r1, #2
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002400:	4621      	mov	r1, r4
 8002402:	008a      	lsls	r2, r1, #2
 8002404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002408:	f7fd ff3a 	bl	8000280 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4b60      	ldr	r3, [pc, #384]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011c      	lsls	r4, r3, #4
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	61b9      	str	r1, [r7, #24]
 8002434:	415b      	adcs	r3, r3
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243c:	4641      	mov	r1, r8
 800243e:	1851      	adds	r1, r2, r1
 8002440:	6139      	str	r1, [r7, #16]
 8002442:	4649      	mov	r1, r9
 8002444:	414b      	adcs	r3, r1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002454:	4659      	mov	r1, fp
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4651      	mov	r1, sl
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4642      	mov	r2, r8
 800246a:	189b      	adds	r3, r3, r2
 800246c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002470:	464b      	mov	r3, r9
 8002472:	460a      	mov	r2, r1
 8002474:	eb42 0303 	adc.w	r3, r2, r3
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002494:	4649      	mov	r1, r9
 8002496:	008b      	lsls	r3, r1, #2
 8002498:	4641      	mov	r1, r8
 800249a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800249e:	4641      	mov	r1, r8
 80024a0:	008a      	lsls	r2, r1, #2
 80024a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024a6:	f7fd feeb 	bl	8000280 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <UART_SetConfig+0x4e4>)
 80024b2:	fba3 2301 	umull	r2, r3, r3, r1
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2264      	movs	r2, #100	@ 0x64
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	1acb      	subs	r3, r1, r3
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	3332      	adds	r3, #50	@ 0x32
 80024c4:	4a33      	ldr	r2, [pc, #204]	@ (8002594 <UART_SetConfig+0x4e4>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d0:	441c      	add	r4, r3
 80024d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d6:	2200      	movs	r2, #0
 80024d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80024da:	677a      	str	r2, [r7, #116]	@ 0x74
 80024dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	415b      	adcs	r3, r3
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f0:	4641      	mov	r1, r8
 80024f2:	1851      	adds	r1, r2, r1
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	4649      	mov	r1, r9
 80024f8:	414b      	adcs	r3, r1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002508:	4659      	mov	r1, fp
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4651      	mov	r1, sl
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4651      	mov	r1, sl
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4642      	mov	r2, r8
 800251e:	189b      	adds	r3, r3, r2
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002522:	464b      	mov	r3, r9
 8002524:	460a      	mov	r2, r1
 8002526:	eb42 0303 	adc.w	r3, r2, r3
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	663b      	str	r3, [r7, #96]	@ 0x60
 8002536:	667a      	str	r2, [r7, #100]	@ 0x64
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002544:	4649      	mov	r1, r9
 8002546:	008b      	lsls	r3, r1, #2
 8002548:	4641      	mov	r1, r8
 800254a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800254e:	4641      	mov	r1, r8
 8002550:	008a      	lsls	r2, r1, #2
 8002552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002556:	f7fd fe93 	bl	8000280 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	@ 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	3332      	adds	r3, #50	@ 0x32
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4422      	add	r2, r4
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800258e:	46bd      	mov	sp, r7
 8002590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002594:	51eb851f 	.word	0x51eb851f

08002598 <std>:
 8002598:	2300      	movs	r3, #0
 800259a:	b510      	push	{r4, lr}
 800259c:	4604      	mov	r4, r0
 800259e:	e9c0 3300 	strd	r3, r3, [r0]
 80025a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025a6:	6083      	str	r3, [r0, #8]
 80025a8:	8181      	strh	r1, [r0, #12]
 80025aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80025ac:	81c2      	strh	r2, [r0, #14]
 80025ae:	6183      	str	r3, [r0, #24]
 80025b0:	4619      	mov	r1, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	305c      	adds	r0, #92	@ 0x5c
 80025b6:	f000 f9f9 	bl	80029ac <memset>
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <std+0x58>)
 80025bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <std+0x5c>)
 80025c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <std+0x60>)
 80025c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025c6:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <std+0x64>)
 80025c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <std+0x68>)
 80025cc:	6224      	str	r4, [r4, #32]
 80025ce:	429c      	cmp	r4, r3
 80025d0:	d006      	beq.n	80025e0 <std+0x48>
 80025d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025d6:	4294      	cmp	r4, r2
 80025d8:	d002      	beq.n	80025e0 <std+0x48>
 80025da:	33d0      	adds	r3, #208	@ 0xd0
 80025dc:	429c      	cmp	r4, r3
 80025de:	d105      	bne.n	80025ec <std+0x54>
 80025e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e8:	f000 ba58 	b.w	8002a9c <__retarget_lock_init_recursive>
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	080027fd 	.word	0x080027fd
 80025f4:	0800281f 	.word	0x0800281f
 80025f8:	08002857 	.word	0x08002857
 80025fc:	0800287b 	.word	0x0800287b
 8002600:	200000d8 	.word	0x200000d8

08002604 <stdio_exit_handler>:
 8002604:	4a02      	ldr	r2, [pc, #8]	@ (8002610 <stdio_exit_handler+0xc>)
 8002606:	4903      	ldr	r1, [pc, #12]	@ (8002614 <stdio_exit_handler+0x10>)
 8002608:	4803      	ldr	r0, [pc, #12]	@ (8002618 <stdio_exit_handler+0x14>)
 800260a:	f000 b869 	b.w	80026e0 <_fwalk_sglue>
 800260e:	bf00      	nop
 8002610:	2000000c 	.word	0x2000000c
 8002614:	08003339 	.word	0x08003339
 8002618:	2000001c 	.word	0x2000001c

0800261c <cleanup_stdio>:
 800261c:	6841      	ldr	r1, [r0, #4]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <cleanup_stdio+0x34>)
 8002620:	4299      	cmp	r1, r3
 8002622:	b510      	push	{r4, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	d001      	beq.n	800262c <cleanup_stdio+0x10>
 8002628:	f000 fe86 	bl	8003338 <_fflush_r>
 800262c:	68a1      	ldr	r1, [r4, #8]
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <cleanup_stdio+0x38>)
 8002630:	4299      	cmp	r1, r3
 8002632:	d002      	beq.n	800263a <cleanup_stdio+0x1e>
 8002634:	4620      	mov	r0, r4
 8002636:	f000 fe7f 	bl	8003338 <_fflush_r>
 800263a:	68e1      	ldr	r1, [r4, #12]
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <cleanup_stdio+0x3c>)
 800263e:	4299      	cmp	r1, r3
 8002640:	d004      	beq.n	800264c <cleanup_stdio+0x30>
 8002642:	4620      	mov	r0, r4
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002648:	f000 be76 	b.w	8003338 <_fflush_r>
 800264c:	bd10      	pop	{r4, pc}
 800264e:	bf00      	nop
 8002650:	200000d8 	.word	0x200000d8
 8002654:	20000140 	.word	0x20000140
 8002658:	200001a8 	.word	0x200001a8

0800265c <global_stdio_init.part.0>:
 800265c:	b510      	push	{r4, lr}
 800265e:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <global_stdio_init.part.0+0x30>)
 8002660:	4c0b      	ldr	r4, [pc, #44]	@ (8002690 <global_stdio_init.part.0+0x34>)
 8002662:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <global_stdio_init.part.0+0x38>)
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4620      	mov	r0, r4
 8002668:	2200      	movs	r2, #0
 800266a:	2104      	movs	r1, #4
 800266c:	f7ff ff94 	bl	8002598 <std>
 8002670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002674:	2201      	movs	r2, #1
 8002676:	2109      	movs	r1, #9
 8002678:	f7ff ff8e 	bl	8002598 <std>
 800267c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002680:	2202      	movs	r2, #2
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002686:	2112      	movs	r1, #18
 8002688:	f7ff bf86 	b.w	8002598 <std>
 800268c:	20000210 	.word	0x20000210
 8002690:	200000d8 	.word	0x200000d8
 8002694:	08002605 	.word	0x08002605

08002698 <__sfp_lock_acquire>:
 8002698:	4801      	ldr	r0, [pc, #4]	@ (80026a0 <__sfp_lock_acquire+0x8>)
 800269a:	f000 ba00 	b.w	8002a9e <__retarget_lock_acquire_recursive>
 800269e:	bf00      	nop
 80026a0:	20000219 	.word	0x20000219

080026a4 <__sfp_lock_release>:
 80026a4:	4801      	ldr	r0, [pc, #4]	@ (80026ac <__sfp_lock_release+0x8>)
 80026a6:	f000 b9fb 	b.w	8002aa0 <__retarget_lock_release_recursive>
 80026aa:	bf00      	nop
 80026ac:	20000219 	.word	0x20000219

080026b0 <__sinit>:
 80026b0:	b510      	push	{r4, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	f7ff fff0 	bl	8002698 <__sfp_lock_acquire>
 80026b8:	6a23      	ldr	r3, [r4, #32]
 80026ba:	b11b      	cbz	r3, 80026c4 <__sinit+0x14>
 80026bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c0:	f7ff bff0 	b.w	80026a4 <__sfp_lock_release>
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <__sinit+0x28>)
 80026c6:	6223      	str	r3, [r4, #32]
 80026c8:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <__sinit+0x2c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f5      	bne.n	80026bc <__sinit+0xc>
 80026d0:	f7ff ffc4 	bl	800265c <global_stdio_init.part.0>
 80026d4:	e7f2      	b.n	80026bc <__sinit+0xc>
 80026d6:	bf00      	nop
 80026d8:	0800261d 	.word	0x0800261d
 80026dc:	20000210 	.word	0x20000210

080026e0 <_fwalk_sglue>:
 80026e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e4:	4607      	mov	r7, r0
 80026e6:	4688      	mov	r8, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	2600      	movs	r6, #0
 80026ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026f0:	f1b9 0901 	subs.w	r9, r9, #1
 80026f4:	d505      	bpl.n	8002702 <_fwalk_sglue+0x22>
 80026f6:	6824      	ldr	r4, [r4, #0]
 80026f8:	2c00      	cmp	r4, #0
 80026fa:	d1f7      	bne.n	80026ec <_fwalk_sglue+0xc>
 80026fc:	4630      	mov	r0, r6
 80026fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002702:	89ab      	ldrh	r3, [r5, #12]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d907      	bls.n	8002718 <_fwalk_sglue+0x38>
 8002708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800270c:	3301      	adds	r3, #1
 800270e:	d003      	beq.n	8002718 <_fwalk_sglue+0x38>
 8002710:	4629      	mov	r1, r5
 8002712:	4638      	mov	r0, r7
 8002714:	47c0      	blx	r8
 8002716:	4306      	orrs	r6, r0
 8002718:	3568      	adds	r5, #104	@ 0x68
 800271a:	e7e9      	b.n	80026f0 <_fwalk_sglue+0x10>

0800271c <iprintf>:
 800271c:	b40f      	push	{r0, r1, r2, r3}
 800271e:	b507      	push	{r0, r1, r2, lr}
 8002720:	4906      	ldr	r1, [pc, #24]	@ (800273c <iprintf+0x20>)
 8002722:	ab04      	add	r3, sp, #16
 8002724:	6808      	ldr	r0, [r1, #0]
 8002726:	f853 2b04 	ldr.w	r2, [r3], #4
 800272a:	6881      	ldr	r1, [r0, #8]
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f000 fadb 	bl	8002ce8 <_vfiprintf_r>
 8002732:	b003      	add	sp, #12
 8002734:	f85d eb04 	ldr.w	lr, [sp], #4
 8002738:	b004      	add	sp, #16
 800273a:	4770      	bx	lr
 800273c:	20000018 	.word	0x20000018

08002740 <_puts_r>:
 8002740:	6a03      	ldr	r3, [r0, #32]
 8002742:	b570      	push	{r4, r5, r6, lr}
 8002744:	6884      	ldr	r4, [r0, #8]
 8002746:	4605      	mov	r5, r0
 8002748:	460e      	mov	r6, r1
 800274a:	b90b      	cbnz	r3, 8002750 <_puts_r+0x10>
 800274c:	f7ff ffb0 	bl	80026b0 <__sinit>
 8002750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002752:	07db      	lsls	r3, r3, #31
 8002754:	d405      	bmi.n	8002762 <_puts_r+0x22>
 8002756:	89a3      	ldrh	r3, [r4, #12]
 8002758:	0598      	lsls	r0, r3, #22
 800275a:	d402      	bmi.n	8002762 <_puts_r+0x22>
 800275c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800275e:	f000 f99e 	bl	8002a9e <__retarget_lock_acquire_recursive>
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	0719      	lsls	r1, r3, #28
 8002766:	d502      	bpl.n	800276e <_puts_r+0x2e>
 8002768:	6923      	ldr	r3, [r4, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d135      	bne.n	80027da <_puts_r+0x9a>
 800276e:	4621      	mov	r1, r4
 8002770:	4628      	mov	r0, r5
 8002772:	f000 f8c5 	bl	8002900 <__swsetup_r>
 8002776:	b380      	cbz	r0, 80027da <_puts_r+0x9a>
 8002778:	f04f 35ff 	mov.w	r5, #4294967295
 800277c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800277e:	07da      	lsls	r2, r3, #31
 8002780:	d405      	bmi.n	800278e <_puts_r+0x4e>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	059b      	lsls	r3, r3, #22
 8002786:	d402      	bmi.n	800278e <_puts_r+0x4e>
 8002788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800278a:	f000 f989 	bl	8002aa0 <__retarget_lock_release_recursive>
 800278e:	4628      	mov	r0, r5
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	2b00      	cmp	r3, #0
 8002794:	da04      	bge.n	80027a0 <_puts_r+0x60>
 8002796:	69a2      	ldr	r2, [r4, #24]
 8002798:	429a      	cmp	r2, r3
 800279a:	dc17      	bgt.n	80027cc <_puts_r+0x8c>
 800279c:	290a      	cmp	r1, #10
 800279e:	d015      	beq.n	80027cc <_puts_r+0x8c>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	6022      	str	r2, [r4, #0]
 80027a6:	7019      	strb	r1, [r3, #0]
 80027a8:	68a3      	ldr	r3, [r4, #8]
 80027aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60a3      	str	r3, [r4, #8]
 80027b2:	2900      	cmp	r1, #0
 80027b4:	d1ed      	bne.n	8002792 <_puts_r+0x52>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da11      	bge.n	80027de <_puts_r+0x9e>
 80027ba:	4622      	mov	r2, r4
 80027bc:	210a      	movs	r1, #10
 80027be:	4628      	mov	r0, r5
 80027c0:	f000 f85f 	bl	8002882 <__swbuf_r>
 80027c4:	3001      	adds	r0, #1
 80027c6:	d0d7      	beq.n	8002778 <_puts_r+0x38>
 80027c8:	250a      	movs	r5, #10
 80027ca:	e7d7      	b.n	800277c <_puts_r+0x3c>
 80027cc:	4622      	mov	r2, r4
 80027ce:	4628      	mov	r0, r5
 80027d0:	f000 f857 	bl	8002882 <__swbuf_r>
 80027d4:	3001      	adds	r0, #1
 80027d6:	d1e7      	bne.n	80027a8 <_puts_r+0x68>
 80027d8:	e7ce      	b.n	8002778 <_puts_r+0x38>
 80027da:	3e01      	subs	r6, #1
 80027dc:	e7e4      	b.n	80027a8 <_puts_r+0x68>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	6022      	str	r2, [r4, #0]
 80027e4:	220a      	movs	r2, #10
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e7ee      	b.n	80027c8 <_puts_r+0x88>
	...

080027ec <puts>:
 80027ec:	4b02      	ldr	r3, [pc, #8]	@ (80027f8 <puts+0xc>)
 80027ee:	4601      	mov	r1, r0
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	f7ff bfa5 	b.w	8002740 <_puts_r>
 80027f6:	bf00      	nop
 80027f8:	20000018 	.word	0x20000018

080027fc <__sread>:
 80027fc:	b510      	push	{r4, lr}
 80027fe:	460c      	mov	r4, r1
 8002800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002804:	f000 f8fc 	bl	8002a00 <_read_r>
 8002808:	2800      	cmp	r0, #0
 800280a:	bfab      	itete	ge
 800280c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800280e:	89a3      	ldrhlt	r3, [r4, #12]
 8002810:	181b      	addge	r3, r3, r0
 8002812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002816:	bfac      	ite	ge
 8002818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800281a:	81a3      	strhlt	r3, [r4, #12]
 800281c:	bd10      	pop	{r4, pc}

0800281e <__swrite>:
 800281e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002822:	461f      	mov	r7, r3
 8002824:	898b      	ldrh	r3, [r1, #12]
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	4605      	mov	r5, r0
 800282a:	460c      	mov	r4, r1
 800282c:	4616      	mov	r6, r2
 800282e:	d505      	bpl.n	800283c <__swrite+0x1e>
 8002830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002834:	2302      	movs	r3, #2
 8002836:	2200      	movs	r2, #0
 8002838:	f000 f8d0 	bl	80029dc <_lseek_r>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	4632      	mov	r2, r6
 800284a:	463b      	mov	r3, r7
 800284c:	4628      	mov	r0, r5
 800284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002852:	f000 b8e7 	b.w	8002a24 <_write_r>

08002856 <__sseek>:
 8002856:	b510      	push	{r4, lr}
 8002858:	460c      	mov	r4, r1
 800285a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285e:	f000 f8bd 	bl	80029dc <_lseek_r>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	bf15      	itete	ne
 8002868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800286a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800286e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002872:	81a3      	strheq	r3, [r4, #12]
 8002874:	bf18      	it	ne
 8002876:	81a3      	strhne	r3, [r4, #12]
 8002878:	bd10      	pop	{r4, pc}

0800287a <__sclose>:
 800287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287e:	f000 b89d 	b.w	80029bc <_close_r>

08002882 <__swbuf_r>:
 8002882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002884:	460e      	mov	r6, r1
 8002886:	4614      	mov	r4, r2
 8002888:	4605      	mov	r5, r0
 800288a:	b118      	cbz	r0, 8002894 <__swbuf_r+0x12>
 800288c:	6a03      	ldr	r3, [r0, #32]
 800288e:	b90b      	cbnz	r3, 8002894 <__swbuf_r+0x12>
 8002890:	f7ff ff0e 	bl	80026b0 <__sinit>
 8002894:	69a3      	ldr	r3, [r4, #24]
 8002896:	60a3      	str	r3, [r4, #8]
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	071a      	lsls	r2, r3, #28
 800289c:	d501      	bpl.n	80028a2 <__swbuf_r+0x20>
 800289e:	6923      	ldr	r3, [r4, #16]
 80028a0:	b943      	cbnz	r3, 80028b4 <__swbuf_r+0x32>
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f000 f82b 	bl	8002900 <__swsetup_r>
 80028aa:	b118      	cbz	r0, 80028b4 <__swbuf_r+0x32>
 80028ac:	f04f 37ff 	mov.w	r7, #4294967295
 80028b0:	4638      	mov	r0, r7
 80028b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	6922      	ldr	r2, [r4, #16]
 80028b8:	1a98      	subs	r0, r3, r2
 80028ba:	6963      	ldr	r3, [r4, #20]
 80028bc:	b2f6      	uxtb	r6, r6
 80028be:	4283      	cmp	r3, r0
 80028c0:	4637      	mov	r7, r6
 80028c2:	dc05      	bgt.n	80028d0 <__swbuf_r+0x4e>
 80028c4:	4621      	mov	r1, r4
 80028c6:	4628      	mov	r0, r5
 80028c8:	f000 fd36 	bl	8003338 <_fflush_r>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d1ed      	bne.n	80028ac <__swbuf_r+0x2a>
 80028d0:	68a3      	ldr	r3, [r4, #8]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60a3      	str	r3, [r4, #8]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	6022      	str	r2, [r4, #0]
 80028dc:	701e      	strb	r6, [r3, #0]
 80028de:	6962      	ldr	r2, [r4, #20]
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d004      	beq.n	80028f0 <__swbuf_r+0x6e>
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	07db      	lsls	r3, r3, #31
 80028ea:	d5e1      	bpl.n	80028b0 <__swbuf_r+0x2e>
 80028ec:	2e0a      	cmp	r6, #10
 80028ee:	d1df      	bne.n	80028b0 <__swbuf_r+0x2e>
 80028f0:	4621      	mov	r1, r4
 80028f2:	4628      	mov	r0, r5
 80028f4:	f000 fd20 	bl	8003338 <_fflush_r>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d0d9      	beq.n	80028b0 <__swbuf_r+0x2e>
 80028fc:	e7d6      	b.n	80028ac <__swbuf_r+0x2a>
	...

08002900 <__swsetup_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <__swsetup_r+0xa8>)
 8002904:	4605      	mov	r5, r0
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	460c      	mov	r4, r1
 800290a:	b118      	cbz	r0, 8002914 <__swsetup_r+0x14>
 800290c:	6a03      	ldr	r3, [r0, #32]
 800290e:	b90b      	cbnz	r3, 8002914 <__swsetup_r+0x14>
 8002910:	f7ff fece 	bl	80026b0 <__sinit>
 8002914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002918:	0719      	lsls	r1, r3, #28
 800291a:	d422      	bmi.n	8002962 <__swsetup_r+0x62>
 800291c:	06da      	lsls	r2, r3, #27
 800291e:	d407      	bmi.n	8002930 <__swsetup_r+0x30>
 8002920:	2209      	movs	r2, #9
 8002922:	602a      	str	r2, [r5, #0]
 8002924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	f04f 30ff 	mov.w	r0, #4294967295
 800292e:	e033      	b.n	8002998 <__swsetup_r+0x98>
 8002930:	0758      	lsls	r0, r3, #29
 8002932:	d512      	bpl.n	800295a <__swsetup_r+0x5a>
 8002934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002936:	b141      	cbz	r1, 800294a <__swsetup_r+0x4a>
 8002938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800293c:	4299      	cmp	r1, r3
 800293e:	d002      	beq.n	8002946 <__swsetup_r+0x46>
 8002940:	4628      	mov	r0, r5
 8002942:	f000 f8af 	bl	8002aa4 <_free_r>
 8002946:	2300      	movs	r3, #0
 8002948:	6363      	str	r3, [r4, #52]	@ 0x34
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	2300      	movs	r3, #0
 8002954:	6063      	str	r3, [r4, #4]
 8002956:	6923      	ldr	r3, [r4, #16]
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	81a3      	strh	r3, [r4, #12]
 8002962:	6923      	ldr	r3, [r4, #16]
 8002964:	b94b      	cbnz	r3, 800297a <__swsetup_r+0x7a>
 8002966:	89a3      	ldrh	r3, [r4, #12]
 8002968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800296c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002970:	d003      	beq.n	800297a <__swsetup_r+0x7a>
 8002972:	4621      	mov	r1, r4
 8002974:	4628      	mov	r0, r5
 8002976:	f000 fd2d 	bl	80033d4 <__smakebuf_r>
 800297a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800297e:	f013 0201 	ands.w	r2, r3, #1
 8002982:	d00a      	beq.n	800299a <__swsetup_r+0x9a>
 8002984:	2200      	movs	r2, #0
 8002986:	60a2      	str	r2, [r4, #8]
 8002988:	6962      	ldr	r2, [r4, #20]
 800298a:	4252      	negs	r2, r2
 800298c:	61a2      	str	r2, [r4, #24]
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	b942      	cbnz	r2, 80029a4 <__swsetup_r+0xa4>
 8002992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002996:	d1c5      	bne.n	8002924 <__swsetup_r+0x24>
 8002998:	bd38      	pop	{r3, r4, r5, pc}
 800299a:	0799      	lsls	r1, r3, #30
 800299c:	bf58      	it	pl
 800299e:	6962      	ldrpl	r2, [r4, #20]
 80029a0:	60a2      	str	r2, [r4, #8]
 80029a2:	e7f4      	b.n	800298e <__swsetup_r+0x8e>
 80029a4:	2000      	movs	r0, #0
 80029a6:	e7f7      	b.n	8002998 <__swsetup_r+0x98>
 80029a8:	20000018 	.word	0x20000018

080029ac <memset>:
 80029ac:	4402      	add	r2, r0
 80029ae:	4603      	mov	r3, r0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d100      	bne.n	80029b6 <memset+0xa>
 80029b4:	4770      	bx	lr
 80029b6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ba:	e7f9      	b.n	80029b0 <memset+0x4>

080029bc <_close_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4d06      	ldr	r5, [pc, #24]	@ (80029d8 <_close_r+0x1c>)
 80029c0:	2300      	movs	r3, #0
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	f7fe f948 	bl	8000c5c <_close>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_close_r+0x1a>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_close_r+0x1a>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	20000214 	.word	0x20000214

080029dc <_lseek_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4d07      	ldr	r5, [pc, #28]	@ (80029fc <_lseek_r+0x20>)
 80029e0:	4604      	mov	r4, r0
 80029e2:	4608      	mov	r0, r1
 80029e4:	4611      	mov	r1, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	602a      	str	r2, [r5, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7fe f95d 	bl	8000caa <_lseek>
 80029f0:	1c43      	adds	r3, r0, #1
 80029f2:	d102      	bne.n	80029fa <_lseek_r+0x1e>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b103      	cbz	r3, 80029fa <_lseek_r+0x1e>
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	20000214 	.word	0x20000214

08002a00 <_read_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4d07      	ldr	r5, [pc, #28]	@ (8002a20 <_read_r+0x20>)
 8002a04:	4604      	mov	r4, r0
 8002a06:	4608      	mov	r0, r1
 8002a08:	4611      	mov	r1, r2
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	602a      	str	r2, [r5, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7fe f8eb 	bl	8000bea <_read>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_read_r+0x1e>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_read_r+0x1e>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	20000214 	.word	0x20000214

08002a24 <_write_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4d07      	ldr	r5, [pc, #28]	@ (8002a44 <_write_r+0x20>)
 8002a28:	4604      	mov	r4, r0
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	602a      	str	r2, [r5, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7fe f8f6 	bl	8000c24 <_write>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_write_r+0x1e>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_write_r+0x1e>
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	20000214 	.word	0x20000214

08002a48 <__errno>:
 8002a48:	4b01      	ldr	r3, [pc, #4]	@ (8002a50 <__errno+0x8>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000018 	.word	0x20000018

08002a54 <__libc_init_array>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	4d0d      	ldr	r5, [pc, #52]	@ (8002a8c <__libc_init_array+0x38>)
 8002a58:	4c0d      	ldr	r4, [pc, #52]	@ (8002a90 <__libc_init_array+0x3c>)
 8002a5a:	1b64      	subs	r4, r4, r5
 8002a5c:	10a4      	asrs	r4, r4, #2
 8002a5e:	2600      	movs	r6, #0
 8002a60:	42a6      	cmp	r6, r4
 8002a62:	d109      	bne.n	8002a78 <__libc_init_array+0x24>
 8002a64:	4d0b      	ldr	r5, [pc, #44]	@ (8002a94 <__libc_init_array+0x40>)
 8002a66:	4c0c      	ldr	r4, [pc, #48]	@ (8002a98 <__libc_init_array+0x44>)
 8002a68:	f000 fd22 	bl	80034b0 <_init>
 8002a6c:	1b64      	subs	r4, r4, r5
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	2600      	movs	r6, #0
 8002a72:	42a6      	cmp	r6, r4
 8002a74:	d105      	bne.n	8002a82 <__libc_init_array+0x2e>
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7c:	4798      	blx	r3
 8002a7e:	3601      	adds	r6, #1
 8002a80:	e7ee      	b.n	8002a60 <__libc_init_array+0xc>
 8002a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a86:	4798      	blx	r3
 8002a88:	3601      	adds	r6, #1
 8002a8a:	e7f2      	b.n	8002a72 <__libc_init_array+0x1e>
 8002a8c:	0800353c 	.word	0x0800353c
 8002a90:	0800353c 	.word	0x0800353c
 8002a94:	0800353c 	.word	0x0800353c
 8002a98:	08003540 	.word	0x08003540

08002a9c <__retarget_lock_init_recursive>:
 8002a9c:	4770      	bx	lr

08002a9e <__retarget_lock_acquire_recursive>:
 8002a9e:	4770      	bx	lr

08002aa0 <__retarget_lock_release_recursive>:
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_free_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d041      	beq.n	8002b30 <_free_r+0x8c>
 8002aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ab0:	1f0c      	subs	r4, r1, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bfb8      	it	lt
 8002ab6:	18e4      	addlt	r4, r4, r3
 8002ab8:	f000 f8e0 	bl	8002c7c <__malloc_lock>
 8002abc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <_free_r+0x90>)
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	b933      	cbnz	r3, 8002ad0 <_free_r+0x2c>
 8002ac2:	6063      	str	r3, [r4, #4]
 8002ac4:	6014      	str	r4, [r2, #0]
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002acc:	f000 b8dc 	b.w	8002c88 <__malloc_unlock>
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	d908      	bls.n	8002ae6 <_free_r+0x42>
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	1821      	adds	r1, r4, r0
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	bf01      	itttt	eq
 8002adc:	6819      	ldreq	r1, [r3, #0]
 8002ade:	685b      	ldreq	r3, [r3, #4]
 8002ae0:	1809      	addeq	r1, r1, r0
 8002ae2:	6021      	streq	r1, [r4, #0]
 8002ae4:	e7ed      	b.n	8002ac2 <_free_r+0x1e>
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b10b      	cbz	r3, 8002af0 <_free_r+0x4c>
 8002aec:	42a3      	cmp	r3, r4
 8002aee:	d9fa      	bls.n	8002ae6 <_free_r+0x42>
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	1850      	adds	r0, r2, r1
 8002af4:	42a0      	cmp	r0, r4
 8002af6:	d10b      	bne.n	8002b10 <_free_r+0x6c>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	4401      	add	r1, r0
 8002afc:	1850      	adds	r0, r2, r1
 8002afe:	4283      	cmp	r3, r0
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	d1e0      	bne.n	8002ac6 <_free_r+0x22>
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6053      	str	r3, [r2, #4]
 8002b0a:	4408      	add	r0, r1
 8002b0c:	6010      	str	r0, [r2, #0]
 8002b0e:	e7da      	b.n	8002ac6 <_free_r+0x22>
 8002b10:	d902      	bls.n	8002b18 <_free_r+0x74>
 8002b12:	230c      	movs	r3, #12
 8002b14:	602b      	str	r3, [r5, #0]
 8002b16:	e7d6      	b.n	8002ac6 <_free_r+0x22>
 8002b18:	6820      	ldr	r0, [r4, #0]
 8002b1a:	1821      	adds	r1, r4, r0
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	bf04      	itt	eq
 8002b20:	6819      	ldreq	r1, [r3, #0]
 8002b22:	685b      	ldreq	r3, [r3, #4]
 8002b24:	6063      	str	r3, [r4, #4]
 8002b26:	bf04      	itt	eq
 8002b28:	1809      	addeq	r1, r1, r0
 8002b2a:	6021      	streq	r1, [r4, #0]
 8002b2c:	6054      	str	r4, [r2, #4]
 8002b2e:	e7ca      	b.n	8002ac6 <_free_r+0x22>
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
 8002b32:	bf00      	nop
 8002b34:	20000220 	.word	0x20000220

08002b38 <sbrk_aligned>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8002b78 <sbrk_aligned+0x40>)
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	6831      	ldr	r1, [r6, #0]
 8002b40:	4605      	mov	r5, r0
 8002b42:	b911      	cbnz	r1, 8002b4a <sbrk_aligned+0x12>
 8002b44:	f000 fca4 	bl	8003490 <_sbrk_r>
 8002b48:	6030      	str	r0, [r6, #0]
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 fc9f 	bl	8003490 <_sbrk_r>
 8002b52:	1c43      	adds	r3, r0, #1
 8002b54:	d103      	bne.n	8002b5e <sbrk_aligned+0x26>
 8002b56:	f04f 34ff 	mov.w	r4, #4294967295
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	1cc4      	adds	r4, r0, #3
 8002b60:	f024 0403 	bic.w	r4, r4, #3
 8002b64:	42a0      	cmp	r0, r4
 8002b66:	d0f8      	beq.n	8002b5a <sbrk_aligned+0x22>
 8002b68:	1a21      	subs	r1, r4, r0
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f000 fc90 	bl	8003490 <_sbrk_r>
 8002b70:	3001      	adds	r0, #1
 8002b72:	d1f2      	bne.n	8002b5a <sbrk_aligned+0x22>
 8002b74:	e7ef      	b.n	8002b56 <sbrk_aligned+0x1e>
 8002b76:	bf00      	nop
 8002b78:	2000021c 	.word	0x2000021c

08002b7c <_malloc_r>:
 8002b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b80:	1ccd      	adds	r5, r1, #3
 8002b82:	f025 0503 	bic.w	r5, r5, #3
 8002b86:	3508      	adds	r5, #8
 8002b88:	2d0c      	cmp	r5, #12
 8002b8a:	bf38      	it	cc
 8002b8c:	250c      	movcc	r5, #12
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	4606      	mov	r6, r0
 8002b92:	db01      	blt.n	8002b98 <_malloc_r+0x1c>
 8002b94:	42a9      	cmp	r1, r5
 8002b96:	d904      	bls.n	8002ba2 <_malloc_r+0x26>
 8002b98:	230c      	movs	r3, #12
 8002b9a:	6033      	str	r3, [r6, #0]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c78 <_malloc_r+0xfc>
 8002ba6:	f000 f869 	bl	8002c7c <__malloc_lock>
 8002baa:	f8d8 3000 	ldr.w	r3, [r8]
 8002bae:	461c      	mov	r4, r3
 8002bb0:	bb44      	cbnz	r4, 8002c04 <_malloc_r+0x88>
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f7ff ffbf 	bl	8002b38 <sbrk_aligned>
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	d158      	bne.n	8002c72 <_malloc_r+0xf6>
 8002bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8002bc4:	4627      	mov	r7, r4
 8002bc6:	2f00      	cmp	r7, #0
 8002bc8:	d143      	bne.n	8002c52 <_malloc_r+0xd6>
 8002bca:	2c00      	cmp	r4, #0
 8002bcc:	d04b      	beq.n	8002c66 <_malloc_r+0xea>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	eb04 0903 	add.w	r9, r4, r3
 8002bd8:	f000 fc5a 	bl	8003490 <_sbrk_r>
 8002bdc:	4581      	cmp	r9, r0
 8002bde:	d142      	bne.n	8002c66 <_malloc_r+0xea>
 8002be0:	6821      	ldr	r1, [r4, #0]
 8002be2:	1a6d      	subs	r5, r5, r1
 8002be4:	4629      	mov	r1, r5
 8002be6:	4630      	mov	r0, r6
 8002be8:	f7ff ffa6 	bl	8002b38 <sbrk_aligned>
 8002bec:	3001      	adds	r0, #1
 8002bee:	d03a      	beq.n	8002c66 <_malloc_r+0xea>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	442b      	add	r3, r5
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	bb62      	cbnz	r2, 8002c58 <_malloc_r+0xdc>
 8002bfe:	f8c8 7000 	str.w	r7, [r8]
 8002c02:	e00f      	b.n	8002c24 <_malloc_r+0xa8>
 8002c04:	6822      	ldr	r2, [r4, #0]
 8002c06:	1b52      	subs	r2, r2, r5
 8002c08:	d420      	bmi.n	8002c4c <_malloc_r+0xd0>
 8002c0a:	2a0b      	cmp	r2, #11
 8002c0c:	d917      	bls.n	8002c3e <_malloc_r+0xc2>
 8002c0e:	1961      	adds	r1, r4, r5
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	6025      	str	r5, [r4, #0]
 8002c14:	bf18      	it	ne
 8002c16:	6059      	strne	r1, [r3, #4]
 8002c18:	6863      	ldr	r3, [r4, #4]
 8002c1a:	bf08      	it	eq
 8002c1c:	f8c8 1000 	streq.w	r1, [r8]
 8002c20:	5162      	str	r2, [r4, r5]
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	4630      	mov	r0, r6
 8002c26:	f000 f82f 	bl	8002c88 <__malloc_unlock>
 8002c2a:	f104 000b 	add.w	r0, r4, #11
 8002c2e:	1d23      	adds	r3, r4, #4
 8002c30:	f020 0007 	bic.w	r0, r0, #7
 8002c34:	1ac2      	subs	r2, r0, r3
 8002c36:	bf1c      	itt	ne
 8002c38:	1a1b      	subne	r3, r3, r0
 8002c3a:	50a3      	strne	r3, [r4, r2]
 8002c3c:	e7af      	b.n	8002b9e <_malloc_r+0x22>
 8002c3e:	6862      	ldr	r2, [r4, #4]
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	bf0c      	ite	eq
 8002c44:	f8c8 2000 	streq.w	r2, [r8]
 8002c48:	605a      	strne	r2, [r3, #4]
 8002c4a:	e7eb      	b.n	8002c24 <_malloc_r+0xa8>
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	6864      	ldr	r4, [r4, #4]
 8002c50:	e7ae      	b.n	8002bb0 <_malloc_r+0x34>
 8002c52:	463c      	mov	r4, r7
 8002c54:	687f      	ldr	r7, [r7, #4]
 8002c56:	e7b6      	b.n	8002bc6 <_malloc_r+0x4a>
 8002c58:	461a      	mov	r2, r3
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	d1fb      	bne.n	8002c58 <_malloc_r+0xdc>
 8002c60:	2300      	movs	r3, #0
 8002c62:	6053      	str	r3, [r2, #4]
 8002c64:	e7de      	b.n	8002c24 <_malloc_r+0xa8>
 8002c66:	230c      	movs	r3, #12
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f000 f80c 	bl	8002c88 <__malloc_unlock>
 8002c70:	e794      	b.n	8002b9c <_malloc_r+0x20>
 8002c72:	6005      	str	r5, [r0, #0]
 8002c74:	e7d6      	b.n	8002c24 <_malloc_r+0xa8>
 8002c76:	bf00      	nop
 8002c78:	20000220 	.word	0x20000220

08002c7c <__malloc_lock>:
 8002c7c:	4801      	ldr	r0, [pc, #4]	@ (8002c84 <__malloc_lock+0x8>)
 8002c7e:	f7ff bf0e 	b.w	8002a9e <__retarget_lock_acquire_recursive>
 8002c82:	bf00      	nop
 8002c84:	20000218 	.word	0x20000218

08002c88 <__malloc_unlock>:
 8002c88:	4801      	ldr	r0, [pc, #4]	@ (8002c90 <__malloc_unlock+0x8>)
 8002c8a:	f7ff bf09 	b.w	8002aa0 <__retarget_lock_release_recursive>
 8002c8e:	bf00      	nop
 8002c90:	20000218 	.word	0x20000218

08002c94 <__sfputc_r>:
 8002c94:	6893      	ldr	r3, [r2, #8]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	b410      	push	{r4}
 8002c9c:	6093      	str	r3, [r2, #8]
 8002c9e:	da08      	bge.n	8002cb2 <__sfputc_r+0x1e>
 8002ca0:	6994      	ldr	r4, [r2, #24]
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	db01      	blt.n	8002caa <__sfputc_r+0x16>
 8002ca6:	290a      	cmp	r1, #10
 8002ca8:	d103      	bne.n	8002cb2 <__sfputc_r+0x1e>
 8002caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cae:	f7ff bde8 	b.w	8002882 <__swbuf_r>
 8002cb2:	6813      	ldr	r3, [r2, #0]
 8002cb4:	1c58      	adds	r0, r3, #1
 8002cb6:	6010      	str	r0, [r2, #0]
 8002cb8:	7019      	strb	r1, [r3, #0]
 8002cba:	4608      	mov	r0, r1
 8002cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <__sfputs_r>:
 8002cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	460f      	mov	r7, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	18d5      	adds	r5, r2, r3
 8002ccc:	42ac      	cmp	r4, r5
 8002cce:	d101      	bne.n	8002cd4 <__sfputs_r+0x12>
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e007      	b.n	8002ce4 <__sfputs_r+0x22>
 8002cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd8:	463a      	mov	r2, r7
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f7ff ffda 	bl	8002c94 <__sfputc_r>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d1f3      	bne.n	8002ccc <__sfputs_r+0xa>
 8002ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce8 <_vfiprintf_r>:
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	460d      	mov	r5, r1
 8002cee:	b09d      	sub	sp, #116	@ 0x74
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	4698      	mov	r8, r3
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	b118      	cbz	r0, 8002d00 <_vfiprintf_r+0x18>
 8002cf8:	6a03      	ldr	r3, [r0, #32]
 8002cfa:	b90b      	cbnz	r3, 8002d00 <_vfiprintf_r+0x18>
 8002cfc:	f7ff fcd8 	bl	80026b0 <__sinit>
 8002d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d02:	07d9      	lsls	r1, r3, #31
 8002d04:	d405      	bmi.n	8002d12 <_vfiprintf_r+0x2a>
 8002d06:	89ab      	ldrh	r3, [r5, #12]
 8002d08:	059a      	lsls	r2, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_vfiprintf_r+0x2a>
 8002d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d0e:	f7ff fec6 	bl	8002a9e <__retarget_lock_acquire_recursive>
 8002d12:	89ab      	ldrh	r3, [r5, #12]
 8002d14:	071b      	lsls	r3, r3, #28
 8002d16:	d501      	bpl.n	8002d1c <_vfiprintf_r+0x34>
 8002d18:	692b      	ldr	r3, [r5, #16]
 8002d1a:	b99b      	cbnz	r3, 8002d44 <_vfiprintf_r+0x5c>
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f7ff fdee 	bl	8002900 <__swsetup_r>
 8002d24:	b170      	cbz	r0, 8002d44 <_vfiprintf_r+0x5c>
 8002d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d28:	07dc      	lsls	r4, r3, #31
 8002d2a:	d504      	bpl.n	8002d36 <_vfiprintf_r+0x4e>
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	b01d      	add	sp, #116	@ 0x74
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	0598      	lsls	r0, r3, #22
 8002d3a:	d4f7      	bmi.n	8002d2c <_vfiprintf_r+0x44>
 8002d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d3e:	f7ff feaf 	bl	8002aa0 <__retarget_lock_release_recursive>
 8002d42:	e7f3      	b.n	8002d2c <_vfiprintf_r+0x44>
 8002d44:	2300      	movs	r3, #0
 8002d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d48:	2320      	movs	r3, #32
 8002d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d52:	2330      	movs	r3, #48	@ 0x30
 8002d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002f04 <_vfiprintf_r+0x21c>
 8002d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d5c:	f04f 0901 	mov.w	r9, #1
 8002d60:	4623      	mov	r3, r4
 8002d62:	469a      	mov	sl, r3
 8002d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d68:	b10a      	cbz	r2, 8002d6e <_vfiprintf_r+0x86>
 8002d6a:	2a25      	cmp	r2, #37	@ 0x25
 8002d6c:	d1f9      	bne.n	8002d62 <_vfiprintf_r+0x7a>
 8002d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d72:	d00b      	beq.n	8002d8c <_vfiprintf_r+0xa4>
 8002d74:	465b      	mov	r3, fp
 8002d76:	4622      	mov	r2, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7ff ffa1 	bl	8002cc2 <__sfputs_r>
 8002d80:	3001      	adds	r0, #1
 8002d82:	f000 80a7 	beq.w	8002ed4 <_vfiprintf_r+0x1ec>
 8002d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d88:	445a      	add	r2, fp
 8002d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 809f 	beq.w	8002ed4 <_vfiprintf_r+0x1ec>
 8002d96:	2300      	movs	r3, #0
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da0:	f10a 0a01 	add.w	sl, sl, #1
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8002dae:	4654      	mov	r4, sl
 8002db0:	2205      	movs	r2, #5
 8002db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db6:	4853      	ldr	r0, [pc, #332]	@ (8002f04 <_vfiprintf_r+0x21c>)
 8002db8:	f7fd fa12 	bl	80001e0 <memchr>
 8002dbc:	9a04      	ldr	r2, [sp, #16]
 8002dbe:	b9d8      	cbnz	r0, 8002df8 <_vfiprintf_r+0x110>
 8002dc0:	06d1      	lsls	r1, r2, #27
 8002dc2:	bf44      	itt	mi
 8002dc4:	2320      	movmi	r3, #32
 8002dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dca:	0713      	lsls	r3, r2, #28
 8002dcc:	bf44      	itt	mi
 8002dce:	232b      	movmi	r3, #43	@ 0x2b
 8002dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dda:	d015      	beq.n	8002e08 <_vfiprintf_r+0x120>
 8002ddc:	9a07      	ldr	r2, [sp, #28]
 8002dde:	4654      	mov	r4, sl
 8002de0:	2000      	movs	r0, #0
 8002de2:	f04f 0c0a 	mov.w	ip, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dec:	3b30      	subs	r3, #48	@ 0x30
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	d94b      	bls.n	8002e8a <_vfiprintf_r+0x1a2>
 8002df2:	b1b0      	cbz	r0, 8002e22 <_vfiprintf_r+0x13a>
 8002df4:	9207      	str	r2, [sp, #28]
 8002df6:	e014      	b.n	8002e22 <_vfiprintf_r+0x13a>
 8002df8:	eba0 0308 	sub.w	r3, r0, r8
 8002dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	46a2      	mov	sl, r4
 8002e06:	e7d2      	b.n	8002dae <_vfiprintf_r+0xc6>
 8002e08:	9b03      	ldr	r3, [sp, #12]
 8002e0a:	1d19      	adds	r1, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	9103      	str	r1, [sp, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bfbb      	ittet	lt
 8002e14:	425b      	neglt	r3, r3
 8002e16:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1a:	9307      	strge	r3, [sp, #28]
 8002e1c:	9307      	strlt	r3, [sp, #28]
 8002e1e:	bfb8      	it	lt
 8002e20:	9204      	strlt	r2, [sp, #16]
 8002e22:	7823      	ldrb	r3, [r4, #0]
 8002e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e26:	d10a      	bne.n	8002e3e <_vfiprintf_r+0x156>
 8002e28:	7863      	ldrb	r3, [r4, #1]
 8002e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e2c:	d132      	bne.n	8002e94 <_vfiprintf_r+0x1ac>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e3a:	3402      	adds	r4, #2
 8002e3c:	9305      	str	r3, [sp, #20]
 8002e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f14 <_vfiprintf_r+0x22c>
 8002e42:	7821      	ldrb	r1, [r4, #0]
 8002e44:	2203      	movs	r2, #3
 8002e46:	4650      	mov	r0, sl
 8002e48:	f7fd f9ca 	bl	80001e0 <memchr>
 8002e4c:	b138      	cbz	r0, 8002e5e <_vfiprintf_r+0x176>
 8002e4e:	9b04      	ldr	r3, [sp, #16]
 8002e50:	eba0 000a 	sub.w	r0, r0, sl
 8002e54:	2240      	movs	r2, #64	@ 0x40
 8002e56:	4082      	lsls	r2, r0
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	3401      	adds	r4, #1
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e62:	4829      	ldr	r0, [pc, #164]	@ (8002f08 <_vfiprintf_r+0x220>)
 8002e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e68:	2206      	movs	r2, #6
 8002e6a:	f7fd f9b9 	bl	80001e0 <memchr>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d03f      	beq.n	8002ef2 <_vfiprintf_r+0x20a>
 8002e72:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <_vfiprintf_r+0x224>)
 8002e74:	bb1b      	cbnz	r3, 8002ebe <_vfiprintf_r+0x1d6>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3307      	adds	r3, #7
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	3308      	adds	r3, #8
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e84:	443b      	add	r3, r7
 8002e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e88:	e76a      	b.n	8002d60 <_vfiprintf_r+0x78>
 8002e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e8e:	460c      	mov	r4, r1
 8002e90:	2001      	movs	r0, #1
 8002e92:	e7a8      	b.n	8002de6 <_vfiprintf_r+0xfe>
 8002e94:	2300      	movs	r3, #0
 8002e96:	3401      	adds	r4, #1
 8002e98:	9305      	str	r3, [sp, #20]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 0c0a 	mov.w	ip, #10
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea6:	3a30      	subs	r2, #48	@ 0x30
 8002ea8:	2a09      	cmp	r2, #9
 8002eaa:	d903      	bls.n	8002eb4 <_vfiprintf_r+0x1cc>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0c6      	beq.n	8002e3e <_vfiprintf_r+0x156>
 8002eb0:	9105      	str	r1, [sp, #20]
 8002eb2:	e7c4      	b.n	8002e3e <_vfiprintf_r+0x156>
 8002eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eb8:	4604      	mov	r4, r0
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e7f0      	b.n	8002ea0 <_vfiprintf_r+0x1b8>
 8002ebe:	ab03      	add	r3, sp, #12
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	462a      	mov	r2, r5
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <_vfiprintf_r+0x228>)
 8002ec6:	a904      	add	r1, sp, #16
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f3af 8000 	nop.w
 8002ece:	4607      	mov	r7, r0
 8002ed0:	1c78      	adds	r0, r7, #1
 8002ed2:	d1d6      	bne.n	8002e82 <_vfiprintf_r+0x19a>
 8002ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ed6:	07d9      	lsls	r1, r3, #31
 8002ed8:	d405      	bmi.n	8002ee6 <_vfiprintf_r+0x1fe>
 8002eda:	89ab      	ldrh	r3, [r5, #12]
 8002edc:	059a      	lsls	r2, r3, #22
 8002ede:	d402      	bmi.n	8002ee6 <_vfiprintf_r+0x1fe>
 8002ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ee2:	f7ff fddd 	bl	8002aa0 <__retarget_lock_release_recursive>
 8002ee6:	89ab      	ldrh	r3, [r5, #12]
 8002ee8:	065b      	lsls	r3, r3, #25
 8002eea:	f53f af1f 	bmi.w	8002d2c <_vfiprintf_r+0x44>
 8002eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ef0:	e71e      	b.n	8002d30 <_vfiprintf_r+0x48>
 8002ef2:	ab03      	add	r3, sp, #12
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	462a      	mov	r2, r5
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <_vfiprintf_r+0x228>)
 8002efa:	a904      	add	r1, sp, #16
 8002efc:	4630      	mov	r0, r6
 8002efe:	f000 f879 	bl	8002ff4 <_printf_i>
 8002f02:	e7e4      	b.n	8002ece <_vfiprintf_r+0x1e6>
 8002f04:	08003500 	.word	0x08003500
 8002f08:	0800350a 	.word	0x0800350a
 8002f0c:	00000000 	.word	0x00000000
 8002f10:	08002cc3 	.word	0x08002cc3
 8002f14:	08003506 	.word	0x08003506

08002f18 <_printf_common>:
 8002f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f1c:	4616      	mov	r6, r2
 8002f1e:	4698      	mov	r8, r3
 8002f20:	688a      	ldr	r2, [r1, #8]
 8002f22:	690b      	ldr	r3, [r1, #16]
 8002f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bfb8      	it	lt
 8002f2c:	4613      	movlt	r3, r2
 8002f2e:	6033      	str	r3, [r6, #0]
 8002f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f34:	4607      	mov	r7, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	b10a      	cbz	r2, 8002f3e <_printf_common+0x26>
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	6033      	str	r3, [r6, #0]
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	0699      	lsls	r1, r3, #26
 8002f42:	bf42      	ittt	mi
 8002f44:	6833      	ldrmi	r3, [r6, #0]
 8002f46:	3302      	addmi	r3, #2
 8002f48:	6033      	strmi	r3, [r6, #0]
 8002f4a:	6825      	ldr	r5, [r4, #0]
 8002f4c:	f015 0506 	ands.w	r5, r5, #6
 8002f50:	d106      	bne.n	8002f60 <_printf_common+0x48>
 8002f52:	f104 0a19 	add.w	sl, r4, #25
 8002f56:	68e3      	ldr	r3, [r4, #12]
 8002f58:	6832      	ldr	r2, [r6, #0]
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	42ab      	cmp	r3, r5
 8002f5e:	dc26      	bgt.n	8002fae <_printf_common+0x96>
 8002f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	3b00      	subs	r3, #0
 8002f68:	bf18      	it	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	0692      	lsls	r2, r2, #26
 8002f6e:	d42b      	bmi.n	8002fc8 <_printf_common+0xb0>
 8002f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f74:	4641      	mov	r1, r8
 8002f76:	4638      	mov	r0, r7
 8002f78:	47c8      	blx	r9
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d01e      	beq.n	8002fbc <_printf_common+0xa4>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	6922      	ldr	r2, [r4, #16]
 8002f82:	f003 0306 	and.w	r3, r3, #6
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf02      	ittt	eq
 8002f8a:	68e5      	ldreq	r5, [r4, #12]
 8002f8c:	6833      	ldreq	r3, [r6, #0]
 8002f8e:	1aed      	subeq	r5, r5, r3
 8002f90:	68a3      	ldr	r3, [r4, #8]
 8002f92:	bf0c      	ite	eq
 8002f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f98:	2500      	movne	r5, #0
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	bfc4      	itt	gt
 8002f9e:	1a9b      	subgt	r3, r3, r2
 8002fa0:	18ed      	addgt	r5, r5, r3
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	341a      	adds	r4, #26
 8002fa6:	42b5      	cmp	r5, r6
 8002fa8:	d11a      	bne.n	8002fe0 <_printf_common+0xc8>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e008      	b.n	8002fc0 <_printf_common+0xa8>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	4652      	mov	r2, sl
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	47c8      	blx	r9
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d103      	bne.n	8002fc4 <_printf_common+0xac>
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc4:	3501      	adds	r5, #1
 8002fc6:	e7c6      	b.n	8002f56 <_printf_common+0x3e>
 8002fc8:	18e1      	adds	r1, r4, r3
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	2030      	movs	r0, #48	@ 0x30
 8002fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fd2:	4422      	add	r2, r4
 8002fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fdc:	3302      	adds	r3, #2
 8002fde:	e7c7      	b.n	8002f70 <_printf_common+0x58>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	47c8      	blx	r9
 8002fea:	3001      	adds	r0, #1
 8002fec:	d0e6      	beq.n	8002fbc <_printf_common+0xa4>
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7d9      	b.n	8002fa6 <_printf_common+0x8e>
	...

08002ff4 <_printf_i>:
 8002ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff8:	7e0f      	ldrb	r7, [r1, #24]
 8002ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ffc:	2f78      	cmp	r7, #120	@ 0x78
 8002ffe:	4691      	mov	r9, r2
 8003000:	4680      	mov	r8, r0
 8003002:	460c      	mov	r4, r1
 8003004:	469a      	mov	sl, r3
 8003006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800300a:	d807      	bhi.n	800301c <_printf_i+0x28>
 800300c:	2f62      	cmp	r7, #98	@ 0x62
 800300e:	d80a      	bhi.n	8003026 <_printf_i+0x32>
 8003010:	2f00      	cmp	r7, #0
 8003012:	f000 80d1 	beq.w	80031b8 <_printf_i+0x1c4>
 8003016:	2f58      	cmp	r7, #88	@ 0x58
 8003018:	f000 80b8 	beq.w	800318c <_printf_i+0x198>
 800301c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003024:	e03a      	b.n	800309c <_printf_i+0xa8>
 8003026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800302a:	2b15      	cmp	r3, #21
 800302c:	d8f6      	bhi.n	800301c <_printf_i+0x28>
 800302e:	a101      	add	r1, pc, #4	@ (adr r1, 8003034 <_printf_i+0x40>)
 8003030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003034:	0800308d 	.word	0x0800308d
 8003038:	080030a1 	.word	0x080030a1
 800303c:	0800301d 	.word	0x0800301d
 8003040:	0800301d 	.word	0x0800301d
 8003044:	0800301d 	.word	0x0800301d
 8003048:	0800301d 	.word	0x0800301d
 800304c:	080030a1 	.word	0x080030a1
 8003050:	0800301d 	.word	0x0800301d
 8003054:	0800301d 	.word	0x0800301d
 8003058:	0800301d 	.word	0x0800301d
 800305c:	0800301d 	.word	0x0800301d
 8003060:	0800319f 	.word	0x0800319f
 8003064:	080030cb 	.word	0x080030cb
 8003068:	08003159 	.word	0x08003159
 800306c:	0800301d 	.word	0x0800301d
 8003070:	0800301d 	.word	0x0800301d
 8003074:	080031c1 	.word	0x080031c1
 8003078:	0800301d 	.word	0x0800301d
 800307c:	080030cb 	.word	0x080030cb
 8003080:	0800301d 	.word	0x0800301d
 8003084:	0800301d 	.word	0x0800301d
 8003088:	08003161 	.word	0x08003161
 800308c:	6833      	ldr	r3, [r6, #0]
 800308e:	1d1a      	adds	r2, r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6032      	str	r2, [r6, #0]
 8003094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800309c:	2301      	movs	r3, #1
 800309e:	e09c      	b.n	80031da <_printf_i+0x1e6>
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1d19      	adds	r1, r3, #4
 80030a6:	6031      	str	r1, [r6, #0]
 80030a8:	0606      	lsls	r6, r0, #24
 80030aa:	d501      	bpl.n	80030b0 <_printf_i+0xbc>
 80030ac:	681d      	ldr	r5, [r3, #0]
 80030ae:	e003      	b.n	80030b8 <_printf_i+0xc4>
 80030b0:	0645      	lsls	r5, r0, #25
 80030b2:	d5fb      	bpl.n	80030ac <_printf_i+0xb8>
 80030b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	da03      	bge.n	80030c4 <_printf_i+0xd0>
 80030bc:	232d      	movs	r3, #45	@ 0x2d
 80030be:	426d      	negs	r5, r5
 80030c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030c4:	4858      	ldr	r0, [pc, #352]	@ (8003228 <_printf_i+0x234>)
 80030c6:	230a      	movs	r3, #10
 80030c8:	e011      	b.n	80030ee <_printf_i+0xfa>
 80030ca:	6821      	ldr	r1, [r4, #0]
 80030cc:	6833      	ldr	r3, [r6, #0]
 80030ce:	0608      	lsls	r0, r1, #24
 80030d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80030d4:	d402      	bmi.n	80030dc <_printf_i+0xe8>
 80030d6:	0649      	lsls	r1, r1, #25
 80030d8:	bf48      	it	mi
 80030da:	b2ad      	uxthmi	r5, r5
 80030dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80030de:	4852      	ldr	r0, [pc, #328]	@ (8003228 <_printf_i+0x234>)
 80030e0:	6033      	str	r3, [r6, #0]
 80030e2:	bf14      	ite	ne
 80030e4:	230a      	movne	r3, #10
 80030e6:	2308      	moveq	r3, #8
 80030e8:	2100      	movs	r1, #0
 80030ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030ee:	6866      	ldr	r6, [r4, #4]
 80030f0:	60a6      	str	r6, [r4, #8]
 80030f2:	2e00      	cmp	r6, #0
 80030f4:	db05      	blt.n	8003102 <_printf_i+0x10e>
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	432e      	orrs	r6, r5
 80030fa:	f021 0104 	bic.w	r1, r1, #4
 80030fe:	6021      	str	r1, [r4, #0]
 8003100:	d04b      	beq.n	800319a <_printf_i+0x1a6>
 8003102:	4616      	mov	r6, r2
 8003104:	fbb5 f1f3 	udiv	r1, r5, r3
 8003108:	fb03 5711 	mls	r7, r3, r1, r5
 800310c:	5dc7      	ldrb	r7, [r0, r7]
 800310e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003112:	462f      	mov	r7, r5
 8003114:	42bb      	cmp	r3, r7
 8003116:	460d      	mov	r5, r1
 8003118:	d9f4      	bls.n	8003104 <_printf_i+0x110>
 800311a:	2b08      	cmp	r3, #8
 800311c:	d10b      	bne.n	8003136 <_printf_i+0x142>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	07df      	lsls	r7, r3, #31
 8003122:	d508      	bpl.n	8003136 <_printf_i+0x142>
 8003124:	6923      	ldr	r3, [r4, #16]
 8003126:	6861      	ldr	r1, [r4, #4]
 8003128:	4299      	cmp	r1, r3
 800312a:	bfde      	ittt	le
 800312c:	2330      	movle	r3, #48	@ 0x30
 800312e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003132:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003136:	1b92      	subs	r2, r2, r6
 8003138:	6122      	str	r2, [r4, #16]
 800313a:	f8cd a000 	str.w	sl, [sp]
 800313e:	464b      	mov	r3, r9
 8003140:	aa03      	add	r2, sp, #12
 8003142:	4621      	mov	r1, r4
 8003144:	4640      	mov	r0, r8
 8003146:	f7ff fee7 	bl	8002f18 <_printf_common>
 800314a:	3001      	adds	r0, #1
 800314c:	d14a      	bne.n	80031e4 <_printf_i+0x1f0>
 800314e:	f04f 30ff 	mov.w	r0, #4294967295
 8003152:	b004      	add	sp, #16
 8003154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f043 0320 	orr.w	r3, r3, #32
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	4832      	ldr	r0, [pc, #200]	@ (800322c <_printf_i+0x238>)
 8003162:	2778      	movs	r7, #120	@ 0x78
 8003164:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	6831      	ldr	r1, [r6, #0]
 800316c:	061f      	lsls	r7, r3, #24
 800316e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003172:	d402      	bmi.n	800317a <_printf_i+0x186>
 8003174:	065f      	lsls	r7, r3, #25
 8003176:	bf48      	it	mi
 8003178:	b2ad      	uxthmi	r5, r5
 800317a:	6031      	str	r1, [r6, #0]
 800317c:	07d9      	lsls	r1, r3, #31
 800317e:	bf44      	itt	mi
 8003180:	f043 0320 	orrmi.w	r3, r3, #32
 8003184:	6023      	strmi	r3, [r4, #0]
 8003186:	b11d      	cbz	r5, 8003190 <_printf_i+0x19c>
 8003188:	2310      	movs	r3, #16
 800318a:	e7ad      	b.n	80030e8 <_printf_i+0xf4>
 800318c:	4826      	ldr	r0, [pc, #152]	@ (8003228 <_printf_i+0x234>)
 800318e:	e7e9      	b.n	8003164 <_printf_i+0x170>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f023 0320 	bic.w	r3, r3, #32
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	e7f6      	b.n	8003188 <_printf_i+0x194>
 800319a:	4616      	mov	r6, r2
 800319c:	e7bd      	b.n	800311a <_printf_i+0x126>
 800319e:	6833      	ldr	r3, [r6, #0]
 80031a0:	6825      	ldr	r5, [r4, #0]
 80031a2:	6961      	ldr	r1, [r4, #20]
 80031a4:	1d18      	adds	r0, r3, #4
 80031a6:	6030      	str	r0, [r6, #0]
 80031a8:	062e      	lsls	r6, r5, #24
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	d501      	bpl.n	80031b2 <_printf_i+0x1be>
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	e002      	b.n	80031b8 <_printf_i+0x1c4>
 80031b2:	0668      	lsls	r0, r5, #25
 80031b4:	d5fb      	bpl.n	80031ae <_printf_i+0x1ba>
 80031b6:	8019      	strh	r1, [r3, #0]
 80031b8:	2300      	movs	r3, #0
 80031ba:	6123      	str	r3, [r4, #16]
 80031bc:	4616      	mov	r6, r2
 80031be:	e7bc      	b.n	800313a <_printf_i+0x146>
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	6032      	str	r2, [r6, #0]
 80031c6:	681e      	ldr	r6, [r3, #0]
 80031c8:	6862      	ldr	r2, [r4, #4]
 80031ca:	2100      	movs	r1, #0
 80031cc:	4630      	mov	r0, r6
 80031ce:	f7fd f807 	bl	80001e0 <memchr>
 80031d2:	b108      	cbz	r0, 80031d8 <_printf_i+0x1e4>
 80031d4:	1b80      	subs	r0, r0, r6
 80031d6:	6060      	str	r0, [r4, #4]
 80031d8:	6863      	ldr	r3, [r4, #4]
 80031da:	6123      	str	r3, [r4, #16]
 80031dc:	2300      	movs	r3, #0
 80031de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031e2:	e7aa      	b.n	800313a <_printf_i+0x146>
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	4632      	mov	r2, r6
 80031e8:	4649      	mov	r1, r9
 80031ea:	4640      	mov	r0, r8
 80031ec:	47d0      	blx	sl
 80031ee:	3001      	adds	r0, #1
 80031f0:	d0ad      	beq.n	800314e <_printf_i+0x15a>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	079b      	lsls	r3, r3, #30
 80031f6:	d413      	bmi.n	8003220 <_printf_i+0x22c>
 80031f8:	68e0      	ldr	r0, [r4, #12]
 80031fa:	9b03      	ldr	r3, [sp, #12]
 80031fc:	4298      	cmp	r0, r3
 80031fe:	bfb8      	it	lt
 8003200:	4618      	movlt	r0, r3
 8003202:	e7a6      	b.n	8003152 <_printf_i+0x15e>
 8003204:	2301      	movs	r3, #1
 8003206:	4632      	mov	r2, r6
 8003208:	4649      	mov	r1, r9
 800320a:	4640      	mov	r0, r8
 800320c:	47d0      	blx	sl
 800320e:	3001      	adds	r0, #1
 8003210:	d09d      	beq.n	800314e <_printf_i+0x15a>
 8003212:	3501      	adds	r5, #1
 8003214:	68e3      	ldr	r3, [r4, #12]
 8003216:	9903      	ldr	r1, [sp, #12]
 8003218:	1a5b      	subs	r3, r3, r1
 800321a:	42ab      	cmp	r3, r5
 800321c:	dcf2      	bgt.n	8003204 <_printf_i+0x210>
 800321e:	e7eb      	b.n	80031f8 <_printf_i+0x204>
 8003220:	2500      	movs	r5, #0
 8003222:	f104 0619 	add.w	r6, r4, #25
 8003226:	e7f5      	b.n	8003214 <_printf_i+0x220>
 8003228:	08003511 	.word	0x08003511
 800322c:	08003522 	.word	0x08003522

08003230 <__sflush_r>:
 8003230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003238:	0716      	lsls	r6, r2, #28
 800323a:	4605      	mov	r5, r0
 800323c:	460c      	mov	r4, r1
 800323e:	d454      	bmi.n	80032ea <__sflush_r+0xba>
 8003240:	684b      	ldr	r3, [r1, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	dc02      	bgt.n	800324c <__sflush_r+0x1c>
 8003246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	dd48      	ble.n	80032de <__sflush_r+0xae>
 800324c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800324e:	2e00      	cmp	r6, #0
 8003250:	d045      	beq.n	80032de <__sflush_r+0xae>
 8003252:	2300      	movs	r3, #0
 8003254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003258:	682f      	ldr	r7, [r5, #0]
 800325a:	6a21      	ldr	r1, [r4, #32]
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	d030      	beq.n	80032c2 <__sflush_r+0x92>
 8003260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	0759      	lsls	r1, r3, #29
 8003266:	d505      	bpl.n	8003274 <__sflush_r+0x44>
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800326e:	b10b      	cbz	r3, 8003274 <__sflush_r+0x44>
 8003270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	2300      	movs	r3, #0
 8003276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003278:	6a21      	ldr	r1, [r4, #32]
 800327a:	4628      	mov	r0, r5
 800327c:	47b0      	blx	r6
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	d106      	bne.n	8003292 <__sflush_r+0x62>
 8003284:	6829      	ldr	r1, [r5, #0]
 8003286:	291d      	cmp	r1, #29
 8003288:	d82b      	bhi.n	80032e2 <__sflush_r+0xb2>
 800328a:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <__sflush_r+0x104>)
 800328c:	40ca      	lsrs	r2, r1
 800328e:	07d6      	lsls	r6, r2, #31
 8003290:	d527      	bpl.n	80032e2 <__sflush_r+0xb2>
 8003292:	2200      	movs	r2, #0
 8003294:	6062      	str	r2, [r4, #4]
 8003296:	04d9      	lsls	r1, r3, #19
 8003298:	6922      	ldr	r2, [r4, #16]
 800329a:	6022      	str	r2, [r4, #0]
 800329c:	d504      	bpl.n	80032a8 <__sflush_r+0x78>
 800329e:	1c42      	adds	r2, r0, #1
 80032a0:	d101      	bne.n	80032a6 <__sflush_r+0x76>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	b903      	cbnz	r3, 80032a8 <__sflush_r+0x78>
 80032a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80032a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032aa:	602f      	str	r7, [r5, #0]
 80032ac:	b1b9      	cbz	r1, 80032de <__sflush_r+0xae>
 80032ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032b2:	4299      	cmp	r1, r3
 80032b4:	d002      	beq.n	80032bc <__sflush_r+0x8c>
 80032b6:	4628      	mov	r0, r5
 80032b8:	f7ff fbf4 	bl	8002aa4 <_free_r>
 80032bc:	2300      	movs	r3, #0
 80032be:	6363      	str	r3, [r4, #52]	@ 0x34
 80032c0:	e00d      	b.n	80032de <__sflush_r+0xae>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b0      	blx	r6
 80032c8:	4602      	mov	r2, r0
 80032ca:	1c50      	adds	r0, r2, #1
 80032cc:	d1c9      	bne.n	8003262 <__sflush_r+0x32>
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0c6      	beq.n	8003262 <__sflush_r+0x32>
 80032d4:	2b1d      	cmp	r3, #29
 80032d6:	d001      	beq.n	80032dc <__sflush_r+0xac>
 80032d8:	2b16      	cmp	r3, #22
 80032da:	d11e      	bne.n	800331a <__sflush_r+0xea>
 80032dc:	602f      	str	r7, [r5, #0]
 80032de:	2000      	movs	r0, #0
 80032e0:	e022      	b.n	8003328 <__sflush_r+0xf8>
 80032e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	e01b      	b.n	8003322 <__sflush_r+0xf2>
 80032ea:	690f      	ldr	r7, [r1, #16]
 80032ec:	2f00      	cmp	r7, #0
 80032ee:	d0f6      	beq.n	80032de <__sflush_r+0xae>
 80032f0:	0793      	lsls	r3, r2, #30
 80032f2:	680e      	ldr	r6, [r1, #0]
 80032f4:	bf08      	it	eq
 80032f6:	694b      	ldreq	r3, [r1, #20]
 80032f8:	600f      	str	r7, [r1, #0]
 80032fa:	bf18      	it	ne
 80032fc:	2300      	movne	r3, #0
 80032fe:	eba6 0807 	sub.w	r8, r6, r7
 8003302:	608b      	str	r3, [r1, #8]
 8003304:	f1b8 0f00 	cmp.w	r8, #0
 8003308:	dde9      	ble.n	80032de <__sflush_r+0xae>
 800330a:	6a21      	ldr	r1, [r4, #32]
 800330c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800330e:	4643      	mov	r3, r8
 8003310:	463a      	mov	r2, r7
 8003312:	4628      	mov	r0, r5
 8003314:	47b0      	blx	r6
 8003316:	2800      	cmp	r0, #0
 8003318:	dc08      	bgt.n	800332c <__sflush_r+0xfc>
 800331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800332c:	4407      	add	r7, r0
 800332e:	eba8 0800 	sub.w	r8, r8, r0
 8003332:	e7e7      	b.n	8003304 <__sflush_r+0xd4>
 8003334:	20400001 	.word	0x20400001

08003338 <_fflush_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	690b      	ldr	r3, [r1, #16]
 800333c:	4605      	mov	r5, r0
 800333e:	460c      	mov	r4, r1
 8003340:	b913      	cbnz	r3, 8003348 <_fflush_r+0x10>
 8003342:	2500      	movs	r5, #0
 8003344:	4628      	mov	r0, r5
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	b118      	cbz	r0, 8003352 <_fflush_r+0x1a>
 800334a:	6a03      	ldr	r3, [r0, #32]
 800334c:	b90b      	cbnz	r3, 8003352 <_fflush_r+0x1a>
 800334e:	f7ff f9af 	bl	80026b0 <__sinit>
 8003352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f3      	beq.n	8003342 <_fflush_r+0xa>
 800335a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800335c:	07d0      	lsls	r0, r2, #31
 800335e:	d404      	bmi.n	800336a <_fflush_r+0x32>
 8003360:	0599      	lsls	r1, r3, #22
 8003362:	d402      	bmi.n	800336a <_fflush_r+0x32>
 8003364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003366:	f7ff fb9a 	bl	8002a9e <__retarget_lock_acquire_recursive>
 800336a:	4628      	mov	r0, r5
 800336c:	4621      	mov	r1, r4
 800336e:	f7ff ff5f 	bl	8003230 <__sflush_r>
 8003372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003374:	07da      	lsls	r2, r3, #31
 8003376:	4605      	mov	r5, r0
 8003378:	d4e4      	bmi.n	8003344 <_fflush_r+0xc>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	059b      	lsls	r3, r3, #22
 800337e:	d4e1      	bmi.n	8003344 <_fflush_r+0xc>
 8003380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003382:	f7ff fb8d 	bl	8002aa0 <__retarget_lock_release_recursive>
 8003386:	e7dd      	b.n	8003344 <_fflush_r+0xc>

08003388 <__swhatbuf_r>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	460c      	mov	r4, r1
 800338c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003390:	2900      	cmp	r1, #0
 8003392:	b096      	sub	sp, #88	@ 0x58
 8003394:	4615      	mov	r5, r2
 8003396:	461e      	mov	r6, r3
 8003398:	da0d      	bge.n	80033b6 <__swhatbuf_r+0x2e>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2340      	movne	r3, #64	@ 0x40
 80033a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033ac:	2000      	movs	r0, #0
 80033ae:	6031      	str	r1, [r6, #0]
 80033b0:	602b      	str	r3, [r5, #0]
 80033b2:	b016      	add	sp, #88	@ 0x58
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
 80033b6:	466a      	mov	r2, sp
 80033b8:	f000 f848 	bl	800344c <_fstat_r>
 80033bc:	2800      	cmp	r0, #0
 80033be:	dbec      	blt.n	800339a <__swhatbuf_r+0x12>
 80033c0:	9901      	ldr	r1, [sp, #4]
 80033c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033ca:	4259      	negs	r1, r3
 80033cc:	4159      	adcs	r1, r3
 80033ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d2:	e7eb      	b.n	80033ac <__swhatbuf_r+0x24>

080033d4 <__smakebuf_r>:
 80033d4:	898b      	ldrh	r3, [r1, #12]
 80033d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033d8:	079d      	lsls	r5, r3, #30
 80033da:	4606      	mov	r6, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	d507      	bpl.n	80033f0 <__smakebuf_r+0x1c>
 80033e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	2301      	movs	r3, #1
 80033ea:	6163      	str	r3, [r4, #20]
 80033ec:	b003      	add	sp, #12
 80033ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f0:	ab01      	add	r3, sp, #4
 80033f2:	466a      	mov	r2, sp
 80033f4:	f7ff ffc8 	bl	8003388 <__swhatbuf_r>
 80033f8:	9f00      	ldr	r7, [sp, #0]
 80033fa:	4605      	mov	r5, r0
 80033fc:	4639      	mov	r1, r7
 80033fe:	4630      	mov	r0, r6
 8003400:	f7ff fbbc 	bl	8002b7c <_malloc_r>
 8003404:	b948      	cbnz	r0, 800341a <__smakebuf_r+0x46>
 8003406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340a:	059a      	lsls	r2, r3, #22
 800340c:	d4ee      	bmi.n	80033ec <__smakebuf_r+0x18>
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	e7e2      	b.n	80033e0 <__smakebuf_r+0xc>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	6020      	str	r0, [r4, #0]
 800341e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	9b01      	ldr	r3, [sp, #4]
 8003426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800342a:	b15b      	cbz	r3, 8003444 <__smakebuf_r+0x70>
 800342c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003430:	4630      	mov	r0, r6
 8003432:	f000 f81d 	bl	8003470 <_isatty_r>
 8003436:	b128      	cbz	r0, 8003444 <__smakebuf_r+0x70>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	431d      	orrs	r5, r3
 8003448:	81a5      	strh	r5, [r4, #12]
 800344a:	e7cf      	b.n	80033ec <__smakebuf_r+0x18>

0800344c <_fstat_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4d07      	ldr	r5, [pc, #28]	@ (800346c <_fstat_r+0x20>)
 8003450:	2300      	movs	r3, #0
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	f7fd fc0b 	bl	8000c74 <_fstat>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	d102      	bne.n	8003468 <_fstat_r+0x1c>
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	b103      	cbz	r3, 8003468 <_fstat_r+0x1c>
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	20000214 	.word	0x20000214

08003470 <_isatty_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d06      	ldr	r5, [pc, #24]	@ (800348c <_isatty_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd fc0a 	bl	8000c94 <_isatty>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_isatty_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_isatty_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20000214 	.word	0x20000214

08003490 <_sbrk_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4d06      	ldr	r5, [pc, #24]	@ (80034ac <_sbrk_r+0x1c>)
 8003494:	2300      	movs	r3, #0
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f7fd fc12 	bl	8000cc4 <_sbrk>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_sbrk_r+0x1a>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_sbrk_r+0x1a>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	20000214 	.word	0x20000214

080034b0 <_init>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr

080034bc <_fini>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr
