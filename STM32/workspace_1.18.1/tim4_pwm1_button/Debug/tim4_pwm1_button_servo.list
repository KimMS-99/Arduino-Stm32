
tim4_pwm1_button_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004198  08004198  00005198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0000523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004244  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000006c  080042b0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080042b0  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ab  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  00012a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000146e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  00015350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f84  00000000  00000000  00015d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d54b  00000000  00000000  0002cc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090072  00000000  00000000  0003a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  000ca288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000cde7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004180 	.word	0x08004180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004180 	.word	0x08004180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int pluse = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
	int keyNum = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc67 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f87b 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f967 	bl	8000894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f93b 	bl	8000840 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005ca:	f000 f8df 	bl	800078c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80005ce:	4833      	ldr	r0, [pc, #204]	@ (800069c <main+0xf0>)
 80005d0:	f001 fc48 	bl	8001e64 <HAL_TIM_Base_Start_IT>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <main+0x32>
	  Error_Handler();
 80005da:	f000 fa5f 	bl	8000a9c <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80005de:	2100      	movs	r1, #0
 80005e0:	482e      	ldr	r0, [pc, #184]	@ (800069c <main+0xf0>)
 80005e2:	f001 fcf1 	bl	8001fc8 <HAL_TIM_PWM_Start>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <main+0x44>
	  Error_Handler();
 80005ec:	f000 fa56 	bl	8000a9c <Error_Handler>
  printf("time4_pwm1_button start!\r\n");
 80005f0:	482b      	ldr	r0, [pc, #172]	@ (80006a0 <main+0xf4>)
 80005f2:	f002 ff63 	bl	80034bc <puts>
  lastDebounceTime = HAL_GetTick();
 80005f6:	f000 fcaf 	bl	8000f58 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a29      	ldr	r2, [pc, #164]	@ (80006a4 <main+0xf8>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(time3SecFlag)
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <main+0xfc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <main+0x6a>
	  {
		  time3SecFlag = 0;
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <main+0xfc>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800060e:	2120      	movs	r1, #32
 8000610:	4826      	ldr	r0, [pc, #152]	@ (80006ac <main+0x100>)
 8000612:	f000 ff74 	bl	80014fe <HAL_GPIO_TogglePin>
		  //printf("time3SecCnt : %d\r\n", time3SecCnt);
	  }

	  if((HAL_GetTick() - lastDebounceTime) > lastDebounceTime)
 8000616:	f000 fc9f 	bl	8000f58 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <main+0xf8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <main+0xf8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	d9ea      	bls.n	8000600 <main+0x54>
	  {
		  keyNum = getKeyNum();
 800062a:	f000 fa03 	bl	8000a34 <getKeyNum>
 800062e:	6038      	str	r0, [r7, #0]
		  if(keyNum != 0)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0e4      	beq.n	8000600 <main+0x54>
		  {
			  printf("keyNum : %d\r\n", keyNum);
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	481d      	ldr	r0, [pc, #116]	@ (80006b0 <main+0x104>)
 800063a:	f002 fed7 	bl	80033ec <iprintf>

			  if(keyNum == 1)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d102      	bne.n	800064a <main+0x9e>
			  {
				  pluse = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e01a      	b.n	8000680 <main+0xd4>
			  }
			  else if(keyNum == 2)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d103      	bne.n	8000658 <main+0xac>
			  {
				  pluse = 1000;
 8000650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e013      	b.n	8000680 <main+0xd4>
			  }
			  else if(keyNum == 3 && pluse > 0)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b03      	cmp	r3, #3
 800065c:	d106      	bne.n	800066c <main+0xc0>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	dd03      	ble.n	800066c <main+0xc0>
			  {
				  pluse -= 100;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b64      	subs	r3, #100	@ 0x64
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e009      	b.n	8000680 <main+0xd4>
			  }
			  else if(keyNum == 4 && pluse < 1000)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d106      	bne.n	8000680 <main+0xd4>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000678:	da02      	bge.n	8000680 <main+0xd4>
			  {
				  pluse += 100;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3364      	adds	r3, #100	@ 0x64
 800067e:	607b      	str	r3, [r7, #4]
			  }
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, (pluse-1 < 0 ? 0 : pluse-1));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b01      	cmp	r3, #1
 8000684:	bfb8      	it	lt
 8000686:	2301      	movlt	r3, #1
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <main+0xf0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
			  printf("pluse : %d\r\n", pluse);
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <main+0x108>)
 8000694:	f002 feaa 	bl	80033ec <iprintf>
	  if(time3SecFlag)
 8000698:	e7b2      	b.n	8000600 <main+0x54>
 800069a:	bf00      	nop
 800069c:	20000088 	.word	0x20000088
 80006a0:	08004198 	.word	0x08004198
 80006a4:	20000128 	.word	0x20000128
 80006a8:	20000118 	.word	0x20000118
 80006ac:	40020000 	.word	0x40020000
 80006b0:	080041b4 	.word	0x080041b4
 80006b4:	080041c4 	.word	0x080041c4

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	@ 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ffd8 	bl	800367c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	@ (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800072c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000730:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000732:	2304      	movs	r3, #4
 8000734:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fef8 	bl	8001534 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800074a:	f000 f9a7 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f95a 	bl	8001a24 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f991 	bl	8000a9c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	@ 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007b0:	4a22      	ldr	r2, [pc, #136]	@ (800083c <MX_TIM4_Init+0xb0>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80007b4:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007b6:	2253      	movs	r2, #83	@ 0x53
 80007b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007d4:	4818      	ldr	r0, [pc, #96]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007d6:	f001 fba7 	bl	8001f28 <HAL_TIM_PWM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f95c 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4619      	mov	r1, r3
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <MX_TIM4_Init+0xac>)
 80007f4:	f002 f8aa 	bl	800294c <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007fe:	f000 f94d 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000802:	2360      	movs	r3, #96	@ 0x60
 8000804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM4_Init+0xac>)
 800081a:	f001 fd75 	bl	8002308 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000824:	f000 f93a 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM4_Init+0xac>)
 800082a:	f000 f993 	bl	8000b54 <HAL_TIM_MspPostInit>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000088 	.word	0x20000088
 800083c:	40000800 	.word	0x40000800

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_USART2_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000878:	f002 f8ea 	bl	8002a50 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f90b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000d0 	.word	0x200000d0
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b33      	ldr	r3, [pc, #204]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a32      	ldr	r2, [pc, #200]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a2b      	ldr	r2, [pc, #172]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b25      	ldr	r3, [pc, #148]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a24      	ldr	r2, [pc, #144]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b22      	ldr	r3, [pc, #136]	@ (800097c <MX_GPIO_Init+0xe8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_GPIO_Init+0xe8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a1d      	ldr	r2, [pc, #116]	@ (800097c <MX_GPIO_Init+0xe8>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_GPIO_Init+0xe8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_GPIO_Init+0xec>)
 8000920:	f000 fdd4 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4812      	ldr	r0, [pc, #72]	@ (8000984 <MX_GPIO_Init+0xf0>)
 800093c:	f000 fc2a 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000940:	230f      	movs	r3, #15
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_GPIO_Init+0xf0>)
 8000954:	f000 fc1e 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000958:	2320      	movs	r3, #32
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_GPIO_Init+0xec>)
 8000970:	f000 fc10 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	@ 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020800 	.word	0x40020800

08000988 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000990:	1d39      	adds	r1, r7, #4
 8000992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000996:	2201      	movs	r2, #1
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <__io_putchar+0x20>)
 800099a:	f002 f8a9 	bl	8002af0 <HAL_UART_Transmit>

  return ch;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000d0 	.word	0x200000d0

080009ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d126      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		time3CntFlag = 1;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
		time3Cnt++;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009cc:	6013      	str	r3, [r2, #0]
		if(!(time3Cnt%100))
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80009d4:	fba3 1302 	umull	r1, r3, r3, r2
 80009d8:	095b      	lsrs	r3, r3, #5
 80009da:	2164      	movs	r1, #100	@ 0x64
 80009dc:	fb01 f303 	mul.w	r3, r1, r3
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			time3_100msFlag = 1;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
		}
		if(time3Cnt >= 1000) // 1ms * 1000 = 1Sec
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009f4:	d30a      	bcc.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			time3SecCnt++;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80009fe:	6013      	str	r3, [r2, #0]
			time3SecFlag = 1;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
			time3Cnt = 0;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000120 	.word	0x20000120
 8000a24:	51eb851f 	.word	0x51eb851f
 8000a28:	20000124 	.word	0x20000124
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	20000118 	.word	0x20000118

08000a34 <getKeyNum>:

int getKeyNum()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	int buttonState = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
	static int btnOld[4] = {0,};
	for(int i = 0; i < 4; i++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e01f      	b.n	8000a84 <getKeyNum+0x50>
	{
		buttonState = HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin<<i);
 8000a44:	2201      	movs	r2, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	@ (8000a94 <getKeyNum+0x60>)
 8000a52:	f000 fd23 	bl	800149c <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	603b      	str	r3, [r7, #0]
		if(buttonState != btnOld[i])
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <getKeyNum+0x64>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d00a      	beq.n	8000a7e <getKeyNum+0x4a>
		{
			btnOld[i] = buttonState;
 8000a68:	490b      	ldr	r1, [pc, #44]	@ (8000a98 <getKeyNum+0x64>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonState)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <getKeyNum+0x4a>
				return i + 1;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	e006      	b.n	8000a8c <getKeyNum+0x58>
	for(int i = 0; i < 4; i++)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3301      	adds	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	dddc      	ble.n	8000a44 <getKeyNum+0x10>
		}
	}
	return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020800 	.word	0x40020800
 8000a98:	2000012c 	.word	0x2000012c

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error_Handler()\r\n");
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <Error_Handler+0x14>)
 8000aa6:	f002 fd09 	bl	80034bc <puts>
  {
 8000aaa:	bf00      	nop
 8000aac:	e7fa      	b.n	8000aa4 <Error_Handler+0x8>
 8000aae:	bf00      	nop
 8000ab0:	080041d4 	.word	0x080041d4

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fb0c 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_TIM_PWM_MspInit+0x48>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d115      	bne.n	8000b42 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x4c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	201e      	movs	r0, #30
 8000b38:	f000 faf5 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b3c:	201e      	movs	r0, #30
 8000b3e:	f000 fb0e 	bl	800115e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40000800 	.word	0x40000800
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <HAL_TIM_MspPostInit+0x68>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d11d      	bne.n	8000bb2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_TIM_MspPostInit+0x6c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_TIM_MspPostInit+0x6c>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_TIM_MspPostInit+0x6c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIME4_PWM1_MOTOR_Pin;
 8000b92:	2340      	movs	r3, #64	@ 0x40
 8000b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIME4_PWM1_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_TIM_MspPostInit+0x70>)
 8000bae:	f000 faf1 	bl	8001194 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40000800 	.word	0x40000800
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c22:	230c      	movs	r3, #12
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c32:	2307      	movs	r3, #7
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_UART_MspInit+0x8c>)
 8000c3e:	f000 faa9 	bl	8001194 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f93f 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM4_IRQHandler+0x10>)
 8000cbe:	f001 fa33 	bl	8002128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000088 	.word	0x20000088

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe31 	bl	8000988 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f002 fc9e 	bl	8003718 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	2000013c 	.word	0x2000013c
 8000e10:	20000290 	.word	0x20000290

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fc5d 	bl	8003724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fb9f 	bl	80005ac <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e7c:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8000e80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e84:	20000290 	.word	0x20000290

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f92b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fdf8 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f943 	bl	800117a <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f90b 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000004 	.word	0x20000004
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20000140 	.word	0x20000140

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000140 	.word	0x20000140

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e159      	b.n	8001464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8148 	bne.w	800145e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a2 	beq.w	800145e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b57      	ldr	r3, [pc, #348]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a56      	ldr	r2, [pc, #344]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b54      	ldr	r3, [pc, #336]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x2ec>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a49      	ldr	r2, [pc, #292]	@ (8001484 <HAL_GPIO_Init+0x2f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x202>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a48      	ldr	r2, [pc, #288]	@ (8001488 <HAL_GPIO_Init+0x2f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x1fe>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a47      	ldr	r2, [pc, #284]	@ (800148c <HAL_GPIO_Init+0x2f8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x1fa>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a46      	ldr	r2, [pc, #280]	@ (8001490 <HAL_GPIO_Init+0x2fc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x1f6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <HAL_GPIO_Init+0x300>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x1f2>
 8001382:	2304      	movs	r3, #4
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001386:	2307      	movs	r3, #7
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x2ec>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a24      	ldr	r2, [pc, #144]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_GPIO_Init+0x304>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <HAL_GPIO_Init+0x304>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f aea2 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001510:	887a      	ldrh	r2, [r7, #2]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	041a      	lsls	r2, r3, #16
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43d9      	mvns	r1, r3
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	400b      	ands	r3, r1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e267      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d075      	beq.n	800163e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001552:	4b88      	ldr	r3, [pc, #544]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b04      	cmp	r3, #4
 800155c:	d00c      	beq.n	8001578 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155e:	4b85      	ldr	r3, [pc, #532]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001566:	2b08      	cmp	r3, #8
 8001568:	d112      	bne.n	8001590 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156a:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001576:	d10b      	bne.n	8001590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	4b7e      	ldr	r3, [pc, #504]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d05b      	beq.n	800163c <HAL_RCC_OscConfig+0x108>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d157      	bne.n	800163c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e242      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x74>
 800159a:	4b76      	ldr	r3, [pc, #472]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a75      	ldr	r2, [pc, #468]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e01d      	b.n	80015e4 <HAL_RCC_OscConfig+0xb0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x98>
 80015b2:	4b70      	ldr	r3, [pc, #448]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b6d      	ldr	r3, [pc, #436]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0xb0>
 80015cc:	4b69      	ldr	r3, [pc, #420]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a68      	ldr	r2, [pc, #416]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b66      	ldr	r3, [pc, #408]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a65      	ldr	r2, [pc, #404]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80015de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d013      	beq.n	8001614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fcb4 	bl	8000f58 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fcb0 	bl	8000f58 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e207      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b5b      	ldr	r3, [pc, #364]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0xc0>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fca0 	bl	8000f58 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc9c 	bl	8000f58 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1f3      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	4b51      	ldr	r3, [pc, #324]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0xe8>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d063      	beq.n	8001712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800164a:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800165e:	2b08      	cmp	r3, #8
 8001660:	d11c      	bne.n	800169c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b44      	ldr	r3, [pc, #272]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d116      	bne.n	800169c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_RCC_OscConfig+0x152>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e1c7      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4937      	ldr	r1, [pc, #220]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	e03a      	b.n	8001712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <HAL_RCC_OscConfig+0x244>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff fc55 	bl	8000f58 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fc51 	bl	8000f58 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1a8      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4925      	ldr	r1, [pc, #148]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e6:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_RCC_OscConfig+0x244>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc34 	bl	8000f58 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff fc30 	bl	8000f58 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e187      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d036      	beq.n	800178c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_RCC_OscConfig+0x248>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fc14 	bl	8000f58 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fc10 	bl	8000f58 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e167      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_OscConfig+0x240>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x200>
 8001752:	e01b      	b.n	800178c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_OscConfig+0x248>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff fbfd 	bl	8000f58 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fbf9 	bl	8000f58 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d907      	bls.n	8001780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e150      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
 8001774:	40023800 	.word	0x40023800
 8001778:	42470000 	.word	0x42470000
 800177c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b88      	ldr	r3, [pc, #544]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ea      	bne.n	8001762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8097 	beq.w	80018c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b81      	ldr	r3, [pc, #516]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b7d      	ldr	r3, [pc, #500]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a7c      	ldr	r2, [pc, #496]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b7a      	ldr	r3, [pc, #488]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b77      	ldr	r3, [pc, #476]	@ (80019a8 <HAL_RCC_OscConfig+0x474>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b74      	ldr	r3, [pc, #464]	@ (80019a8 <HAL_RCC_OscConfig+0x474>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a73      	ldr	r2, [pc, #460]	@ (80019a8 <HAL_RCC_OscConfig+0x474>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fbb9 	bl	8000f58 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff fbb5 	bl	8000f58 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e10c      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_RCC_OscConfig+0x474>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x2ea>
 8001810:	4b64      	ldr	r3, [pc, #400]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001814:	4a63      	ldr	r2, [pc, #396]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	@ 0x70
 800181c:	e01c      	b.n	8001858 <HAL_RCC_OscConfig+0x324>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x30c>
 8001826:	4b5f      	ldr	r3, [pc, #380]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182a:	4a5e      	ldr	r2, [pc, #376]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	@ 0x70
 8001832:	4b5c      	ldr	r3, [pc, #368]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001836:	4a5b      	ldr	r2, [pc, #364]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6713      	str	r3, [r2, #112]	@ 0x70
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0x324>
 8001840:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a57      	ldr	r2, [pc, #348]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001850:	4a54      	ldr	r2, [pc, #336]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d015      	beq.n	800188c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fb7a 	bl	8000f58 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fb76 	bl	8000f58 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0cb      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0ee      	beq.n	8001868 <HAL_RCC_OscConfig+0x334>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fb64 	bl	8000f58 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	e00a      	b.n	80018aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff fb60 	bl	8000f58 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0b5      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	4a38      	ldr	r2, [pc, #224]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a1 	beq.w	8001a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d2:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d05c      	beq.n	8001998 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d141      	bne.n	800196a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <HAL_RCC_OscConfig+0x478>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb34 	bl	8000f58 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fb30 	bl	8000f58 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e087      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	491b      	ldr	r1, [pc, #108]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x478>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb09 	bl	8000f58 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fb05 	bl	8000f58 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e05c      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x416>
 8001968:	e054      	b.n	8001a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_RCC_OscConfig+0x478>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff faf2 	bl	8000f58 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff faee 	bl	8000f58 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e045      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_OscConfig+0x470>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x444>
 8001996:	e03d      	b.n	8001a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e038      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <HAL_RCC_OscConfig+0x4ec>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d028      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d121      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d11a      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	3b01      	subs	r3, #1
 80019fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0cc      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b68      	ldr	r3, [pc, #416]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d90c      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b63      	ldr	r3, [pc, #396]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0b8      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a78:	4b59      	ldr	r3, [pc, #356]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a58      	ldr	r2, [pc, #352]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a90:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a52      	ldr	r2, [pc, #328]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	494d      	ldr	r1, [pc, #308]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d044      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d119      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07f      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e06f      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e067      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4934      	ldr	r1, [pc, #208]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b14:	f7ff fa20 	bl	8000f58 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff fa1c 	bl	8000f58 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e04f      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d20c      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e032      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4916      	ldr	r1, [pc, #88]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	490e      	ldr	r1, [pc, #56]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001baa:	f000 f821 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	490a      	ldr	r1, [pc, #40]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	5ccb      	ldrb	r3, [r1, r3]
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f980 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00
 8001be0:	40023800 	.word	0x40023800
 8001be4:	080041e8 	.word	0x080041e8
 8001be8:	20000004 	.word	0x20000004
 8001bec:	20000008 	.word	0x20000008

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf4:	b094      	sub	sp, #80	@ 0x50
 8001bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c08:	4b79      	ldr	r3, [pc, #484]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d00d      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x40>
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	f200 80e1 	bhi.w	8001ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x34>
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d003      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c22:	e0db      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b73      	ldr	r3, [pc, #460]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c28:	e0db      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2a:	4b73      	ldr	r3, [pc, #460]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c2e:	e0d8      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c46:	4b6a      	ldr	r3, [pc, #424]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	099b      	lsrs	r3, r3, #6
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c62:	4622      	mov	r2, r4
 8001c64:	462b      	mov	r3, r5
 8001c66:	f04f 0000 	mov.w	r0, #0
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	0159      	lsls	r1, r3, #5
 8001c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c74:	0150      	lsls	r0, r2, #5
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	1a51      	subs	r1, r2, r1
 8001c7e:	6139      	str	r1, [r7, #16]
 8001c80:	4629      	mov	r1, r5
 8001c82:	eb63 0301 	sbc.w	r3, r3, r1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c94:	4659      	mov	r1, fp
 8001c96:	018b      	lsls	r3, r1, #6
 8001c98:	4651      	mov	r1, sl
 8001c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c9e:	4651      	mov	r1, sl
 8001ca0:	018a      	lsls	r2, r1, #6
 8001ca2:	4651      	mov	r1, sl
 8001ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca8:	4659      	mov	r1, fp
 8001caa:	eb63 0901 	sbc.w	r9, r3, r1
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc2:	4690      	mov	r8, r2
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	eb18 0303 	adds.w	r3, r8, r3
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	462b      	mov	r3, r5
 8001cd0:	eb49 0303 	adc.w	r3, r9, r3
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	024b      	lsls	r3, r1, #9
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cec:	4621      	mov	r1, r4
 8001cee:	024a      	lsls	r2, r1, #9
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d00:	f7fe fabe 	bl	8000280 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d0c:	e058      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0e:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	099b      	lsrs	r3, r3, #6
 8001d14:	2200      	movs	r2, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	4611      	mov	r1, r2
 8001d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d28:	4642      	mov	r2, r8
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	f04f 0000 	mov.w	r0, #0
 8001d30:	f04f 0100 	mov.w	r1, #0
 8001d34:	0159      	lsls	r1, r3, #5
 8001d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3a:	0150      	lsls	r0, r2, #5
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4641      	mov	r1, r8
 8001d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d46:	4649      	mov	r1, r9
 8001d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d60:	ebb2 040a 	subs.w	r4, r2, sl
 8001d64:	eb63 050b 	sbc.w	r5, r3, fp
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	00eb      	lsls	r3, r5, #3
 8001d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d76:	00e2      	lsls	r2, r4, #3
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	18e3      	adds	r3, r4, r3
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	464b      	mov	r3, r9
 8001d84:	eb45 0303 	adc.w	r3, r5, r3
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d96:	4629      	mov	r1, r5
 8001d98:	028b      	lsls	r3, r1, #10
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da0:	4621      	mov	r1, r4
 8001da2:	028a      	lsls	r2, r1, #10
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001daa:	2200      	movs	r2, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	61fa      	str	r2, [r7, #28]
 8001db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db4:	f7fe fa64 	bl	8000280 <__aeabi_uldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001dd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dda:	e002      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3750      	adds	r7, #80	@ 0x50
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	00f42400 	.word	0x00f42400
 8001df8:	007a1200 	.word	0x007a1200

08001dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e18:	f7ff fff0 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0a9b      	lsrs	r3, r3, #10
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	@ (8001e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	080041f8 	.word	0x080041f8

08001e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e40:	f7ff ffdc 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0b5b      	lsrs	r3, r3, #13
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	@ (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	080041f8 	.word	0x080041f8

08001e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e044      	b.n	8001f06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d018      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x6c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea6:	d013      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xb8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d010      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	e007      	b.n	8001f04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40000c00 	.word	0x40000c00
 8001f24:	40014000 	.word	0x40014000

08001f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e041      	b.n	8001fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fdd8 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f000 fab8 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_TIM_PWM_Start+0x24>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e022      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d109      	bne.n	8002006 <HAL_TIM_PWM_Start+0x3e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	e015      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d109      	bne.n	8002020 <HAL_TIM_PWM_Start+0x58>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e008      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e068      	b.n	800210c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0x82>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002048:	e013      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0x92>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002058:	e00b      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d104      	bne.n	800206a <HAL_TIM_PWM_Start+0xa2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002068:	e003      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fc40 	bl	8002900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_TIM_PWM_Start+0x14c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d107      	bne.n	800209a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_TIM_PWM_Start+0x14c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d018      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ac:	d013      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a19      	ldr	r2, [pc, #100]	@ (8002118 <HAL_TIM_PWM_Start+0x150>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	@ (800211c <HAL_TIM_PWM_Start+0x154>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_TIM_PWM_Start+0x158>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <HAL_TIM_PWM_Start+0x15c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d010      	beq.n	800210a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	e007      	b.n	800210a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40014000 	.word	0x40014000

08002128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d020      	beq.n	800218c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0202 	mvn.w	r2, #2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f994 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f986 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f997 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d020      	beq.n	80021d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0204 	mvn.w	r2, #4
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f96e 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f960 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f971 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d020      	beq.n	8002224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f948 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f93a 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f94b 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0210 	mvn.w	r2, #16
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2208      	movs	r2, #8
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f922 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f914 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f925 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0201 	mvn.w	r2, #1
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fb8c 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fbc2 	bl	8002a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8f6 	bl	80024c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0220 	mvn.w	r2, #32
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fb94 	bl	8002a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002322:	2302      	movs	r3, #2
 8002324:	e0ae      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	f200 809f 	bhi.w	8002474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002336:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	08002371 	.word	0x08002371
 8002340:	08002475 	.word	0x08002475
 8002344:	08002475 	.word	0x08002475
 8002348:	08002475 	.word	0x08002475
 800234c:	080023b1 	.word	0x080023b1
 8002350:	08002475 	.word	0x08002475
 8002354:	08002475 	.word	0x08002475
 8002358:	08002475 	.word	0x08002475
 800235c:	080023f3 	.word	0x080023f3
 8002360:	08002475 	.word	0x08002475
 8002364:	08002475 	.word	0x08002475
 8002368:	08002475 	.word	0x08002475
 800236c:	08002433 	.word	0x08002433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f936 	bl	80025e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0208 	orr.w	r2, r2, #8
 800238a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	619a      	str	r2, [r3, #24]
      break;
 80023ae:	e064      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f97c 	bl	80026b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
      break;
 80023f0:	e043      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f9c7 	bl	800278c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0208 	orr.w	r2, r2, #8
 800240c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0204 	bic.w	r2, r2, #4
 800241c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	61da      	str	r2, [r3, #28]
      break;
 8002430:	e023      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa11 	bl	8002860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800244c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	021a      	lsls	r2, r3, #8
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	61da      	str	r2, [r3, #28]
      break;
 8002472:	e002      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
      break;
 8002478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a37      	ldr	r2, [pc, #220]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00f      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fa:	d00b      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a34      	ldr	r2, [pc, #208]	@ (80025d0 <TIM_Base_SetConfig+0xf4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a33      	ldr	r2, [pc, #204]	@ (80025d4 <TIM_Base_SetConfig+0xf8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a32      	ldr	r2, [pc, #200]	@ (80025d8 <TIM_Base_SetConfig+0xfc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01b      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002534:	d017      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a25      	ldr	r2, [pc, #148]	@ (80025d0 <TIM_Base_SetConfig+0xf4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a24      	ldr	r2, [pc, #144]	@ (80025d4 <TIM_Base_SetConfig+0xf8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00f      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <TIM_Base_SetConfig+0xfc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <TIM_Base_SetConfig+0x100>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <TIM_Base_SetConfig+0x104>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <TIM_Base_SetConfig+0x108>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d103      	bne.n	80025a6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0201 	bic.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <TIM_OC1_SetConfig+0xc8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10c      	bne.n	800265e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0308 	bic.w	r3, r3, #8
 800264a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <TIM_OC1_SetConfig+0xc8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800266c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40010000 	.word	0x40010000

080026b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f023 0210 	bic.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0320 	bic.w	r3, r3, #32
 80026fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <TIM_OC2_SetConfig+0xd4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10d      	bne.n	8002730 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800271a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800272e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a15      	ldr	r2, [pc, #84]	@ (8002788 <TIM_OC2_SetConfig+0xd4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d113      	bne.n	8002760 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800273e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40010000 	.word	0x40010000

0800278c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <TIM_OC3_SetConfig+0xd0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10d      	bne.n	8002806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <TIM_OC3_SetConfig+0xd0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800281c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40010000 	.word	0x40010000

08002860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	031b      	lsls	r3, r3, #12
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <TIM_OC4_SetConfig+0x9c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d109      	bne.n	80028d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000

08002900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2201      	movs	r2, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	43db      	mvns	r3, r3
 8002922:	401a      	ands	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	431a      	orrs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002960:	2302      	movs	r3, #2
 8002962:	e050      	b.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b0:	d013      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a13      	ldr	r2, [pc, #76]	@ (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10c      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40014000 	.word	0x40014000

08002a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e042      	b.n	8002ae8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe f8a6 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	@ 0x24
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f973 	bl	8002d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d175      	bne.n	8002bfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Transmit+0x2c>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e06e      	b.n	8002bfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	@ 0x21
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fa13 	bl	8000f58 <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b48:	d108      	bne.n	8002b5c <HAL_UART_Transmit+0x6c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e003      	b.n	8002b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b64:	e02e      	b.n	8002bc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	@ 0x80
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f848 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e03a      	b.n	8002bfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e007      	b.n	8002bb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1cb      	bne.n	8002b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2140      	movs	r1, #64	@ 0x40
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f814 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e006      	b.n	8002bfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	e03b      	b.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d037      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe f99a 	bl	8000f58 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	6a3a      	ldr	r2, [r7, #32]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e03a      	b.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b80      	cmp	r3, #128	@ 0x80
 8002c4c:	d020      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b40      	cmp	r3, #64	@ 0x40
 8002c52:	d01d      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d116      	bne.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f81d 	bl	8002cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2208      	movs	r2, #8
 8002c82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e00f      	b.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d0b4      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b095      	sub	sp, #84	@ 0x54
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ce0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d119      	bne.n	8002d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f023 0310 	bic.w	r3, r3, #16
 8002d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d50:	61ba      	str	r2, [r7, #24]
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e5      	bne.n	8002d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d72:	bf00      	nop
 8002d74:	3754      	adds	r7, #84	@ 0x54
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b0c0      	sub	sp, #256	@ 0x100
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	ea40 0301 	orr.w	r3, r0, r1
 8002da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002dd8:	f021 010c 	bic.w	r1, r1, #12
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfa:	6999      	ldr	r1, [r3, #24]
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	ea40 0301 	orr.w	r3, r0, r1
 8002e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800304c <UART_SetConfig+0x2cc>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d005      	beq.n	8002e20 <UART_SetConfig+0xa0>
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003050 <UART_SetConfig+0x2d0>)
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d104      	bne.n	8002e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7ff f80c 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e28:	e003      	b.n	8002e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2a:	f7fe fff3 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8002e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3c:	f040 810c 	bne.w	8003058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e52:	4622      	mov	r2, r4
 8002e54:	462b      	mov	r3, r5
 8002e56:	1891      	adds	r1, r2, r2
 8002e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e5a:	415b      	adcs	r3, r3
 8002e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e62:	4621      	mov	r1, r4
 8002e64:	eb12 0801 	adds.w	r8, r2, r1
 8002e68:	4629      	mov	r1, r5
 8002e6a:	eb43 0901 	adc.w	r9, r3, r1
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e82:	4690      	mov	r8, r2
 8002e84:	4699      	mov	r9, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	eb18 0303 	adds.w	r3, r8, r3
 8002e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e90:	462b      	mov	r3, r5
 8002e92:	eb49 0303 	adc.w	r3, r9, r3
 8002e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002eae:	460b      	mov	r3, r1
 8002eb0:	18db      	adds	r3, r3, r3
 8002eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	eb42 0303 	adc.w	r3, r2, r3
 8002eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ec4:	f7fd f9dc 	bl	8000280 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4b61      	ldr	r3, [pc, #388]	@ (8003054 <UART_SetConfig+0x2d4>)
 8002ece:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	011c      	lsls	r4, r3, #4
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ef8:	4641      	mov	r1, r8
 8002efa:	eb12 0a01 	adds.w	sl, r2, r1
 8002efe:	4649      	mov	r1, r9
 8002f00:	eb43 0b01 	adc.w	fp, r3, r1
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f18:	4692      	mov	sl, r2
 8002f1a:	469b      	mov	fp, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f26:	464b      	mov	r3, r9
 8002f28:	eb4b 0303 	adc.w	r3, fp, r3
 8002f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f44:	460b      	mov	r3, r1
 8002f46:	18db      	adds	r3, r3, r3
 8002f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	eb42 0303 	adc.w	r3, r2, r3
 8002f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f5a:	f7fd f991 	bl	8000280 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <UART_SetConfig+0x2d4>)
 8002f66:	fba3 2301 	umull	r2, r3, r3, r1
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2264      	movs	r2, #100	@ 0x64
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	1acb      	subs	r3, r1, r3
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f7a:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <UART_SetConfig+0x2d4>)
 8002f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f88:	441c      	add	r4, r3
 8002f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	1891      	adds	r1, r2, r2
 8002fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fa4:	415b      	adcs	r3, r3
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002fac:	4641      	mov	r1, r8
 8002fae:	1851      	adds	r1, r2, r1
 8002fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	414b      	adcs	r3, r1
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fc4:	4659      	mov	r1, fp
 8002fc6:	00cb      	lsls	r3, r1, #3
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fce:	4651      	mov	r1, sl
 8002fd0:	00ca      	lsls	r2, r1, #3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4642      	mov	r2, r8
 8002fda:	189b      	adds	r3, r3, r2
 8002fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fe0:	464b      	mov	r3, r9
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	eb42 0303 	adc.w	r3, r2, r3
 8002fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003000:	460b      	mov	r3, r1
 8003002:	18db      	adds	r3, r3, r3
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003006:	4613      	mov	r3, r2
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003016:	f7fd f933 	bl	8000280 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <UART_SetConfig+0x2d4>)
 8003020:	fba3 1302 	umull	r1, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	2164      	movs	r1, #100	@ 0x64
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	3332      	adds	r3, #50	@ 0x32
 8003032:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <UART_SetConfig+0x2d4>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	f003 0207 	and.w	r2, r3, #7
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4422      	add	r2, r4
 8003046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003048:	e106      	b.n	8003258 <UART_SetConfig+0x4d8>
 800304a:	bf00      	nop
 800304c:	40011000 	.word	0x40011000
 8003050:	40011400 	.word	0x40011400
 8003054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800306a:	4642      	mov	r2, r8
 800306c:	464b      	mov	r3, r9
 800306e:	1891      	adds	r1, r2, r2
 8003070:	6239      	str	r1, [r7, #32]
 8003072:	415b      	adcs	r3, r3
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
 8003076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800307a:	4641      	mov	r1, r8
 800307c:	1854      	adds	r4, r2, r1
 800307e:	4649      	mov	r1, r9
 8003080:	eb43 0501 	adc.w	r5, r3, r1
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	00eb      	lsls	r3, r5, #3
 800308e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003092:	00e2      	lsls	r2, r4, #3
 8003094:	4614      	mov	r4, r2
 8003096:	461d      	mov	r5, r3
 8003098:	4643      	mov	r3, r8
 800309a:	18e3      	adds	r3, r4, r3
 800309c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030a0:	464b      	mov	r3, r9
 80030a2:	eb45 0303 	adc.w	r3, r5, r3
 80030a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030c6:	4629      	mov	r1, r5
 80030c8:	008b      	lsls	r3, r1, #2
 80030ca:	4621      	mov	r1, r4
 80030cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d0:	4621      	mov	r1, r4
 80030d2:	008a      	lsls	r2, r1, #2
 80030d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030d8:	f7fd f8d2 	bl	8000280 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b60      	ldr	r3, [pc, #384]	@ (8003264 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 2302 	umull	r2, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	011c      	lsls	r4, r3, #4
 80030ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	61b9      	str	r1, [r7, #24]
 8003104:	415b      	adcs	r3, r3
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310c:	4641      	mov	r1, r8
 800310e:	1851      	adds	r1, r2, r1
 8003110:	6139      	str	r1, [r7, #16]
 8003112:	4649      	mov	r1, r9
 8003114:	414b      	adcs	r3, r1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003124:	4659      	mov	r1, fp
 8003126:	00cb      	lsls	r3, r1, #3
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312e:	4651      	mov	r1, sl
 8003130:	00ca      	lsls	r2, r1, #3
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	4603      	mov	r3, r0
 8003138:	4642      	mov	r2, r8
 800313a:	189b      	adds	r3, r3, r2
 800313c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003140:	464b      	mov	r3, r9
 8003142:	460a      	mov	r2, r1
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003164:	4649      	mov	r1, r9
 8003166:	008b      	lsls	r3, r1, #2
 8003168:	4641      	mov	r1, r8
 800316a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316e:	4641      	mov	r1, r8
 8003170:	008a      	lsls	r2, r1, #2
 8003172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003176:	f7fd f883 	bl	8000280 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4611      	mov	r1, r2
 8003180:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <UART_SetConfig+0x4e4>)
 8003182:	fba3 2301 	umull	r2, r3, r3, r1
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2264      	movs	r2, #100	@ 0x64
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	1acb      	subs	r3, r1, r3
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	3332      	adds	r3, #50	@ 0x32
 8003194:	4a33      	ldr	r2, [pc, #204]	@ (8003264 <UART_SetConfig+0x4e4>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	441c      	add	r4, r3
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a6:	2200      	movs	r2, #0
 80031a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80031aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80031ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	1891      	adds	r1, r2, r2
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	415b      	adcs	r3, r3
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c0:	4641      	mov	r1, r8
 80031c2:	1851      	adds	r1, r2, r1
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	4649      	mov	r1, r9
 80031c8:	414b      	adcs	r3, r1
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031d8:	4659      	mov	r1, fp
 80031da:	00cb      	lsls	r3, r1, #3
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e2:	4651      	mov	r1, sl
 80031e4:	00ca      	lsls	r2, r1, #3
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	4642      	mov	r2, r8
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f2:	464b      	mov	r3, r9
 80031f4:	460a      	mov	r2, r1
 80031f6:	eb42 0303 	adc.w	r3, r2, r3
 80031fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	663b      	str	r3, [r7, #96]	@ 0x60
 8003206:	667a      	str	r2, [r7, #100]	@ 0x64
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003214:	4649      	mov	r1, r9
 8003216:	008b      	lsls	r3, r1, #2
 8003218:	4641      	mov	r1, r8
 800321a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800321e:	4641      	mov	r1, r8
 8003220:	008a      	lsls	r2, r1, #2
 8003222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003226:	f7fd f82b 	bl	8000280 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <UART_SetConfig+0x4e4>)
 8003230:	fba3 1302 	umull	r1, r3, r3, r2
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	2164      	movs	r1, #100	@ 0x64
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	3332      	adds	r3, #50	@ 0x32
 8003242:	4a08      	ldr	r2, [pc, #32]	@ (8003264 <UART_SetConfig+0x4e4>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4422      	add	r2, r4
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800325e:	46bd      	mov	sp, r7
 8003260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003264:	51eb851f 	.word	0x51eb851f

08003268 <std>:
 8003268:	2300      	movs	r3, #0
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	e9c0 3300 	strd	r3, r3, [r0]
 8003272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003276:	6083      	str	r3, [r0, #8]
 8003278:	8181      	strh	r1, [r0, #12]
 800327a:	6643      	str	r3, [r0, #100]	@ 0x64
 800327c:	81c2      	strh	r2, [r0, #14]
 800327e:	6183      	str	r3, [r0, #24]
 8003280:	4619      	mov	r1, r3
 8003282:	2208      	movs	r2, #8
 8003284:	305c      	adds	r0, #92	@ 0x5c
 8003286:	f000 f9f9 	bl	800367c <memset>
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <std+0x58>)
 800328c:	6263      	str	r3, [r4, #36]	@ 0x24
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <std+0x5c>)
 8003290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <std+0x60>)
 8003294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <std+0x64>)
 8003298:	6323      	str	r3, [r4, #48]	@ 0x30
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <std+0x68>)
 800329c:	6224      	str	r4, [r4, #32]
 800329e:	429c      	cmp	r4, r3
 80032a0:	d006      	beq.n	80032b0 <std+0x48>
 80032a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032a6:	4294      	cmp	r4, r2
 80032a8:	d002      	beq.n	80032b0 <std+0x48>
 80032aa:	33d0      	adds	r3, #208	@ 0xd0
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d105      	bne.n	80032bc <std+0x54>
 80032b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b8:	f000 ba58 	b.w	800376c <__retarget_lock_init_recursive>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop
 80032c0:	080034cd 	.word	0x080034cd
 80032c4:	080034ef 	.word	0x080034ef
 80032c8:	08003527 	.word	0x08003527
 80032cc:	0800354b 	.word	0x0800354b
 80032d0:	20000144 	.word	0x20000144

080032d4 <stdio_exit_handler>:
 80032d4:	4a02      	ldr	r2, [pc, #8]	@ (80032e0 <stdio_exit_handler+0xc>)
 80032d6:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <stdio_exit_handler+0x10>)
 80032d8:	4803      	ldr	r0, [pc, #12]	@ (80032e8 <stdio_exit_handler+0x14>)
 80032da:	f000 b869 	b.w	80033b0 <_fwalk_sglue>
 80032de:	bf00      	nop
 80032e0:	20000010 	.word	0x20000010
 80032e4:	08004009 	.word	0x08004009
 80032e8:	20000020 	.word	0x20000020

080032ec <cleanup_stdio>:
 80032ec:	6841      	ldr	r1, [r0, #4]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <cleanup_stdio+0x34>)
 80032f0:	4299      	cmp	r1, r3
 80032f2:	b510      	push	{r4, lr}
 80032f4:	4604      	mov	r4, r0
 80032f6:	d001      	beq.n	80032fc <cleanup_stdio+0x10>
 80032f8:	f000 fe86 	bl	8004008 <_fflush_r>
 80032fc:	68a1      	ldr	r1, [r4, #8]
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <cleanup_stdio+0x38>)
 8003300:	4299      	cmp	r1, r3
 8003302:	d002      	beq.n	800330a <cleanup_stdio+0x1e>
 8003304:	4620      	mov	r0, r4
 8003306:	f000 fe7f 	bl	8004008 <_fflush_r>
 800330a:	68e1      	ldr	r1, [r4, #12]
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <cleanup_stdio+0x3c>)
 800330e:	4299      	cmp	r1, r3
 8003310:	d004      	beq.n	800331c <cleanup_stdio+0x30>
 8003312:	4620      	mov	r0, r4
 8003314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003318:	f000 be76 	b.w	8004008 <_fflush_r>
 800331c:	bd10      	pop	{r4, pc}
 800331e:	bf00      	nop
 8003320:	20000144 	.word	0x20000144
 8003324:	200001ac 	.word	0x200001ac
 8003328:	20000214 	.word	0x20000214

0800332c <global_stdio_init.part.0>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <global_stdio_init.part.0+0x30>)
 8003330:	4c0b      	ldr	r4, [pc, #44]	@ (8003360 <global_stdio_init.part.0+0x34>)
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <global_stdio_init.part.0+0x38>)
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4620      	mov	r0, r4
 8003338:	2200      	movs	r2, #0
 800333a:	2104      	movs	r1, #4
 800333c:	f7ff ff94 	bl	8003268 <std>
 8003340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003344:	2201      	movs	r2, #1
 8003346:	2109      	movs	r1, #9
 8003348:	f7ff ff8e 	bl	8003268 <std>
 800334c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003350:	2202      	movs	r2, #2
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003356:	2112      	movs	r1, #18
 8003358:	f7ff bf86 	b.w	8003268 <std>
 800335c:	2000027c 	.word	0x2000027c
 8003360:	20000144 	.word	0x20000144
 8003364:	080032d5 	.word	0x080032d5

08003368 <__sfp_lock_acquire>:
 8003368:	4801      	ldr	r0, [pc, #4]	@ (8003370 <__sfp_lock_acquire+0x8>)
 800336a:	f000 ba00 	b.w	800376e <__retarget_lock_acquire_recursive>
 800336e:	bf00      	nop
 8003370:	20000285 	.word	0x20000285

08003374 <__sfp_lock_release>:
 8003374:	4801      	ldr	r0, [pc, #4]	@ (800337c <__sfp_lock_release+0x8>)
 8003376:	f000 b9fb 	b.w	8003770 <__retarget_lock_release_recursive>
 800337a:	bf00      	nop
 800337c:	20000285 	.word	0x20000285

08003380 <__sinit>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	f7ff fff0 	bl	8003368 <__sfp_lock_acquire>
 8003388:	6a23      	ldr	r3, [r4, #32]
 800338a:	b11b      	cbz	r3, 8003394 <__sinit+0x14>
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f7ff bff0 	b.w	8003374 <__sfp_lock_release>
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__sinit+0x28>)
 8003396:	6223      	str	r3, [r4, #32]
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <__sinit+0x2c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f5      	bne.n	800338c <__sinit+0xc>
 80033a0:	f7ff ffc4 	bl	800332c <global_stdio_init.part.0>
 80033a4:	e7f2      	b.n	800338c <__sinit+0xc>
 80033a6:	bf00      	nop
 80033a8:	080032ed 	.word	0x080032ed
 80033ac:	2000027c 	.word	0x2000027c

080033b0 <_fwalk_sglue>:
 80033b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	4607      	mov	r7, r0
 80033b6:	4688      	mov	r8, r1
 80033b8:	4614      	mov	r4, r2
 80033ba:	2600      	movs	r6, #0
 80033bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033c0:	f1b9 0901 	subs.w	r9, r9, #1
 80033c4:	d505      	bpl.n	80033d2 <_fwalk_sglue+0x22>
 80033c6:	6824      	ldr	r4, [r4, #0]
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	d1f7      	bne.n	80033bc <_fwalk_sglue+0xc>
 80033cc:	4630      	mov	r0, r6
 80033ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d2:	89ab      	ldrh	r3, [r5, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d907      	bls.n	80033e8 <_fwalk_sglue+0x38>
 80033d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033dc:	3301      	adds	r3, #1
 80033de:	d003      	beq.n	80033e8 <_fwalk_sglue+0x38>
 80033e0:	4629      	mov	r1, r5
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	4306      	orrs	r6, r0
 80033e8:	3568      	adds	r5, #104	@ 0x68
 80033ea:	e7e9      	b.n	80033c0 <_fwalk_sglue+0x10>

080033ec <iprintf>:
 80033ec:	b40f      	push	{r0, r1, r2, r3}
 80033ee:	b507      	push	{r0, r1, r2, lr}
 80033f0:	4906      	ldr	r1, [pc, #24]	@ (800340c <iprintf+0x20>)
 80033f2:	ab04      	add	r3, sp, #16
 80033f4:	6808      	ldr	r0, [r1, #0]
 80033f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80033fa:	6881      	ldr	r1, [r0, #8]
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	f000 fadb 	bl	80039b8 <_vfiprintf_r>
 8003402:	b003      	add	sp, #12
 8003404:	f85d eb04 	ldr.w	lr, [sp], #4
 8003408:	b004      	add	sp, #16
 800340a:	4770      	bx	lr
 800340c:	2000001c 	.word	0x2000001c

08003410 <_puts_r>:
 8003410:	6a03      	ldr	r3, [r0, #32]
 8003412:	b570      	push	{r4, r5, r6, lr}
 8003414:	6884      	ldr	r4, [r0, #8]
 8003416:	4605      	mov	r5, r0
 8003418:	460e      	mov	r6, r1
 800341a:	b90b      	cbnz	r3, 8003420 <_puts_r+0x10>
 800341c:	f7ff ffb0 	bl	8003380 <__sinit>
 8003420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003422:	07db      	lsls	r3, r3, #31
 8003424:	d405      	bmi.n	8003432 <_puts_r+0x22>
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	0598      	lsls	r0, r3, #22
 800342a:	d402      	bmi.n	8003432 <_puts_r+0x22>
 800342c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800342e:	f000 f99e 	bl	800376e <__retarget_lock_acquire_recursive>
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	0719      	lsls	r1, r3, #28
 8003436:	d502      	bpl.n	800343e <_puts_r+0x2e>
 8003438:	6923      	ldr	r3, [r4, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d135      	bne.n	80034aa <_puts_r+0x9a>
 800343e:	4621      	mov	r1, r4
 8003440:	4628      	mov	r0, r5
 8003442:	f000 f8c5 	bl	80035d0 <__swsetup_r>
 8003446:	b380      	cbz	r0, 80034aa <_puts_r+0x9a>
 8003448:	f04f 35ff 	mov.w	r5, #4294967295
 800344c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800344e:	07da      	lsls	r2, r3, #31
 8003450:	d405      	bmi.n	800345e <_puts_r+0x4e>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	059b      	lsls	r3, r3, #22
 8003456:	d402      	bmi.n	800345e <_puts_r+0x4e>
 8003458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800345a:	f000 f989 	bl	8003770 <__retarget_lock_release_recursive>
 800345e:	4628      	mov	r0, r5
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	2b00      	cmp	r3, #0
 8003464:	da04      	bge.n	8003470 <_puts_r+0x60>
 8003466:	69a2      	ldr	r2, [r4, #24]
 8003468:	429a      	cmp	r2, r3
 800346a:	dc17      	bgt.n	800349c <_puts_r+0x8c>
 800346c:	290a      	cmp	r1, #10
 800346e:	d015      	beq.n	800349c <_puts_r+0x8c>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	6022      	str	r2, [r4, #0]
 8003476:	7019      	strb	r1, [r3, #0]
 8003478:	68a3      	ldr	r3, [r4, #8]
 800347a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800347e:	3b01      	subs	r3, #1
 8003480:	60a3      	str	r3, [r4, #8]
 8003482:	2900      	cmp	r1, #0
 8003484:	d1ed      	bne.n	8003462 <_puts_r+0x52>
 8003486:	2b00      	cmp	r3, #0
 8003488:	da11      	bge.n	80034ae <_puts_r+0x9e>
 800348a:	4622      	mov	r2, r4
 800348c:	210a      	movs	r1, #10
 800348e:	4628      	mov	r0, r5
 8003490:	f000 f85f 	bl	8003552 <__swbuf_r>
 8003494:	3001      	adds	r0, #1
 8003496:	d0d7      	beq.n	8003448 <_puts_r+0x38>
 8003498:	250a      	movs	r5, #10
 800349a:	e7d7      	b.n	800344c <_puts_r+0x3c>
 800349c:	4622      	mov	r2, r4
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 f857 	bl	8003552 <__swbuf_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d1e7      	bne.n	8003478 <_puts_r+0x68>
 80034a8:	e7ce      	b.n	8003448 <_puts_r+0x38>
 80034aa:	3e01      	subs	r6, #1
 80034ac:	e7e4      	b.n	8003478 <_puts_r+0x68>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	6022      	str	r2, [r4, #0]
 80034b4:	220a      	movs	r2, #10
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e7ee      	b.n	8003498 <_puts_r+0x88>
	...

080034bc <puts>:
 80034bc:	4b02      	ldr	r3, [pc, #8]	@ (80034c8 <puts+0xc>)
 80034be:	4601      	mov	r1, r0
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f7ff bfa5 	b.w	8003410 <_puts_r>
 80034c6:	bf00      	nop
 80034c8:	2000001c 	.word	0x2000001c

080034cc <__sread>:
 80034cc:	b510      	push	{r4, lr}
 80034ce:	460c      	mov	r4, r1
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	f000 f8fc 	bl	80036d0 <_read_r>
 80034d8:	2800      	cmp	r0, #0
 80034da:	bfab      	itete	ge
 80034dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034de:	89a3      	ldrhlt	r3, [r4, #12]
 80034e0:	181b      	addge	r3, r3, r0
 80034e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034e6:	bfac      	ite	ge
 80034e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034ea:	81a3      	strhlt	r3, [r4, #12]
 80034ec:	bd10      	pop	{r4, pc}

080034ee <__swrite>:
 80034ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	461f      	mov	r7, r3
 80034f4:	898b      	ldrh	r3, [r1, #12]
 80034f6:	05db      	lsls	r3, r3, #23
 80034f8:	4605      	mov	r5, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	4616      	mov	r6, r2
 80034fe:	d505      	bpl.n	800350c <__swrite+0x1e>
 8003500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003504:	2302      	movs	r3, #2
 8003506:	2200      	movs	r2, #0
 8003508:	f000 f8d0 	bl	80036ac <_lseek_r>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003516:	81a3      	strh	r3, [r4, #12]
 8003518:	4632      	mov	r2, r6
 800351a:	463b      	mov	r3, r7
 800351c:	4628      	mov	r0, r5
 800351e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003522:	f000 b8e7 	b.w	80036f4 <_write_r>

08003526 <__sseek>:
 8003526:	b510      	push	{r4, lr}
 8003528:	460c      	mov	r4, r1
 800352a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352e:	f000 f8bd 	bl	80036ac <_lseek_r>
 8003532:	1c43      	adds	r3, r0, #1
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	bf15      	itete	ne
 8003538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800353a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800353e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003542:	81a3      	strheq	r3, [r4, #12]
 8003544:	bf18      	it	ne
 8003546:	81a3      	strhne	r3, [r4, #12]
 8003548:	bd10      	pop	{r4, pc}

0800354a <__sclose>:
 800354a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354e:	f000 b89d 	b.w	800368c <_close_r>

08003552 <__swbuf_r>:
 8003552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003554:	460e      	mov	r6, r1
 8003556:	4614      	mov	r4, r2
 8003558:	4605      	mov	r5, r0
 800355a:	b118      	cbz	r0, 8003564 <__swbuf_r+0x12>
 800355c:	6a03      	ldr	r3, [r0, #32]
 800355e:	b90b      	cbnz	r3, 8003564 <__swbuf_r+0x12>
 8003560:	f7ff ff0e 	bl	8003380 <__sinit>
 8003564:	69a3      	ldr	r3, [r4, #24]
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	071a      	lsls	r2, r3, #28
 800356c:	d501      	bpl.n	8003572 <__swbuf_r+0x20>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	b943      	cbnz	r3, 8003584 <__swbuf_r+0x32>
 8003572:	4621      	mov	r1, r4
 8003574:	4628      	mov	r0, r5
 8003576:	f000 f82b 	bl	80035d0 <__swsetup_r>
 800357a:	b118      	cbz	r0, 8003584 <__swbuf_r+0x32>
 800357c:	f04f 37ff 	mov.w	r7, #4294967295
 8003580:	4638      	mov	r0, r7
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	6922      	ldr	r2, [r4, #16]
 8003588:	1a98      	subs	r0, r3, r2
 800358a:	6963      	ldr	r3, [r4, #20]
 800358c:	b2f6      	uxtb	r6, r6
 800358e:	4283      	cmp	r3, r0
 8003590:	4637      	mov	r7, r6
 8003592:	dc05      	bgt.n	80035a0 <__swbuf_r+0x4e>
 8003594:	4621      	mov	r1, r4
 8003596:	4628      	mov	r0, r5
 8003598:	f000 fd36 	bl	8004008 <_fflush_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	d1ed      	bne.n	800357c <__swbuf_r+0x2a>
 80035a0:	68a3      	ldr	r3, [r4, #8]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	6022      	str	r2, [r4, #0]
 80035ac:	701e      	strb	r6, [r3, #0]
 80035ae:	6962      	ldr	r2, [r4, #20]
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d004      	beq.n	80035c0 <__swbuf_r+0x6e>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	07db      	lsls	r3, r3, #31
 80035ba:	d5e1      	bpl.n	8003580 <__swbuf_r+0x2e>
 80035bc:	2e0a      	cmp	r6, #10
 80035be:	d1df      	bne.n	8003580 <__swbuf_r+0x2e>
 80035c0:	4621      	mov	r1, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 fd20 	bl	8004008 <_fflush_r>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d0d9      	beq.n	8003580 <__swbuf_r+0x2e>
 80035cc:	e7d6      	b.n	800357c <__swbuf_r+0x2a>
	...

080035d0 <__swsetup_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4b29      	ldr	r3, [pc, #164]	@ (8003678 <__swsetup_r+0xa8>)
 80035d4:	4605      	mov	r5, r0
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	460c      	mov	r4, r1
 80035da:	b118      	cbz	r0, 80035e4 <__swsetup_r+0x14>
 80035dc:	6a03      	ldr	r3, [r0, #32]
 80035de:	b90b      	cbnz	r3, 80035e4 <__swsetup_r+0x14>
 80035e0:	f7ff fece 	bl	8003380 <__sinit>
 80035e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e8:	0719      	lsls	r1, r3, #28
 80035ea:	d422      	bmi.n	8003632 <__swsetup_r+0x62>
 80035ec:	06da      	lsls	r2, r3, #27
 80035ee:	d407      	bmi.n	8003600 <__swsetup_r+0x30>
 80035f0:	2209      	movs	r2, #9
 80035f2:	602a      	str	r2, [r5, #0]
 80035f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	e033      	b.n	8003668 <__swsetup_r+0x98>
 8003600:	0758      	lsls	r0, r3, #29
 8003602:	d512      	bpl.n	800362a <__swsetup_r+0x5a>
 8003604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003606:	b141      	cbz	r1, 800361a <__swsetup_r+0x4a>
 8003608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800360c:	4299      	cmp	r1, r3
 800360e:	d002      	beq.n	8003616 <__swsetup_r+0x46>
 8003610:	4628      	mov	r0, r5
 8003612:	f000 f8af 	bl	8003774 <_free_r>
 8003616:	2300      	movs	r3, #0
 8003618:	6363      	str	r3, [r4, #52]	@ 0x34
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003620:	81a3      	strh	r3, [r4, #12]
 8003622:	2300      	movs	r3, #0
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	b94b      	cbnz	r3, 800364a <__swsetup_r+0x7a>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d003      	beq.n	800364a <__swsetup_r+0x7a>
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f000 fd2d 	bl	80040a4 <__smakebuf_r>
 800364a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364e:	f013 0201 	ands.w	r2, r3, #1
 8003652:	d00a      	beq.n	800366a <__swsetup_r+0x9a>
 8003654:	2200      	movs	r2, #0
 8003656:	60a2      	str	r2, [r4, #8]
 8003658:	6962      	ldr	r2, [r4, #20]
 800365a:	4252      	negs	r2, r2
 800365c:	61a2      	str	r2, [r4, #24]
 800365e:	6922      	ldr	r2, [r4, #16]
 8003660:	b942      	cbnz	r2, 8003674 <__swsetup_r+0xa4>
 8003662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003666:	d1c5      	bne.n	80035f4 <__swsetup_r+0x24>
 8003668:	bd38      	pop	{r3, r4, r5, pc}
 800366a:	0799      	lsls	r1, r3, #30
 800366c:	bf58      	it	pl
 800366e:	6962      	ldrpl	r2, [r4, #20]
 8003670:	60a2      	str	r2, [r4, #8]
 8003672:	e7f4      	b.n	800365e <__swsetup_r+0x8e>
 8003674:	2000      	movs	r0, #0
 8003676:	e7f7      	b.n	8003668 <__swsetup_r+0x98>
 8003678:	2000001c 	.word	0x2000001c

0800367c <memset>:
 800367c:	4402      	add	r2, r0
 800367e:	4603      	mov	r3, r0
 8003680:	4293      	cmp	r3, r2
 8003682:	d100      	bne.n	8003686 <memset+0xa>
 8003684:	4770      	bx	lr
 8003686:	f803 1b01 	strb.w	r1, [r3], #1
 800368a:	e7f9      	b.n	8003680 <memset+0x4>

0800368c <_close_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d06      	ldr	r5, [pc, #24]	@ (80036a8 <_close_r+0x1c>)
 8003690:	2300      	movs	r3, #0
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd fb51 	bl	8000d3e <_close>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_close_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_close_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000280 	.word	0x20000280

080036ac <_lseek_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d07      	ldr	r5, [pc, #28]	@ (80036cc <_lseek_r+0x20>)
 80036b0:	4604      	mov	r4, r0
 80036b2:	4608      	mov	r0, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	602a      	str	r2, [r5, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f7fd fb66 	bl	8000d8c <_lseek>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_lseek_r+0x1e>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_lseek_r+0x1e>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20000280 	.word	0x20000280

080036d0 <_read_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4d07      	ldr	r5, [pc, #28]	@ (80036f0 <_read_r+0x20>)
 80036d4:	4604      	mov	r4, r0
 80036d6:	4608      	mov	r0, r1
 80036d8:	4611      	mov	r1, r2
 80036da:	2200      	movs	r2, #0
 80036dc:	602a      	str	r2, [r5, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	f7fd faf4 	bl	8000ccc <_read>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_read_r+0x1e>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_read_r+0x1e>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000280 	.word	0x20000280

080036f4 <_write_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4d07      	ldr	r5, [pc, #28]	@ (8003714 <_write_r+0x20>)
 80036f8:	4604      	mov	r4, r0
 80036fa:	4608      	mov	r0, r1
 80036fc:	4611      	mov	r1, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	602a      	str	r2, [r5, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f7fd faff 	bl	8000d06 <_write>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_write_r+0x1e>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b103      	cbz	r3, 8003712 <_write_r+0x1e>
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	20000280 	.word	0x20000280

08003718 <__errno>:
 8003718:	4b01      	ldr	r3, [pc, #4]	@ (8003720 <__errno+0x8>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000001c 	.word	0x2000001c

08003724 <__libc_init_array>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4d0d      	ldr	r5, [pc, #52]	@ (800375c <__libc_init_array+0x38>)
 8003728:	4c0d      	ldr	r4, [pc, #52]	@ (8003760 <__libc_init_array+0x3c>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	2600      	movs	r6, #0
 8003730:	42a6      	cmp	r6, r4
 8003732:	d109      	bne.n	8003748 <__libc_init_array+0x24>
 8003734:	4d0b      	ldr	r5, [pc, #44]	@ (8003764 <__libc_init_array+0x40>)
 8003736:	4c0c      	ldr	r4, [pc, #48]	@ (8003768 <__libc_init_array+0x44>)
 8003738:	f000 fd22 	bl	8004180 <_init>
 800373c:	1b64      	subs	r4, r4, r5
 800373e:	10a4      	asrs	r4, r4, #2
 8003740:	2600      	movs	r6, #0
 8003742:	42a6      	cmp	r6, r4
 8003744:	d105      	bne.n	8003752 <__libc_init_array+0x2e>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	f855 3b04 	ldr.w	r3, [r5], #4
 800374c:	4798      	blx	r3
 800374e:	3601      	adds	r6, #1
 8003750:	e7ee      	b.n	8003730 <__libc_init_array+0xc>
 8003752:	f855 3b04 	ldr.w	r3, [r5], #4
 8003756:	4798      	blx	r3
 8003758:	3601      	adds	r6, #1
 800375a:	e7f2      	b.n	8003742 <__libc_init_array+0x1e>
 800375c:	0800423c 	.word	0x0800423c
 8003760:	0800423c 	.word	0x0800423c
 8003764:	0800423c 	.word	0x0800423c
 8003768:	08004240 	.word	0x08004240

0800376c <__retarget_lock_init_recursive>:
 800376c:	4770      	bx	lr

0800376e <__retarget_lock_acquire_recursive>:
 800376e:	4770      	bx	lr

08003770 <__retarget_lock_release_recursive>:
 8003770:	4770      	bx	lr
	...

08003774 <_free_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4605      	mov	r5, r0
 8003778:	2900      	cmp	r1, #0
 800377a:	d041      	beq.n	8003800 <_free_r+0x8c>
 800377c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003780:	1f0c      	subs	r4, r1, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfb8      	it	lt
 8003786:	18e4      	addlt	r4, r4, r3
 8003788:	f000 f8e0 	bl	800394c <__malloc_lock>
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <_free_r+0x90>)
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x2c>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	4628      	mov	r0, r5
 8003798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379c:	f000 b8dc 	b.w	8003958 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x42>
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	1821      	adds	r1, r4, r0
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1809      	addeq	r1, r1, r0
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x1e>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x4c>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x42>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1850      	adds	r0, r2, r1
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x6c>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	4401      	add	r1, r0
 80037cc:	1850      	adds	r0, r2, r1
 80037ce:	4283      	cmp	r3, r0
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x22>
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	4408      	add	r0, r1
 80037dc:	6010      	str	r0, [r2, #0]
 80037de:	e7da      	b.n	8003796 <_free_r+0x22>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x74>
 80037e2:	230c      	movs	r3, #12
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x22>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	1821      	adds	r1, r4, r0
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1809      	addeq	r1, r1, r0
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7ca      	b.n	8003796 <_free_r+0x22>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	2000028c 	.word	0x2000028c

08003808 <sbrk_aligned>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4e0f      	ldr	r6, [pc, #60]	@ (8003848 <sbrk_aligned+0x40>)
 800380c:	460c      	mov	r4, r1
 800380e:	6831      	ldr	r1, [r6, #0]
 8003810:	4605      	mov	r5, r0
 8003812:	b911      	cbnz	r1, 800381a <sbrk_aligned+0x12>
 8003814:	f000 fca4 	bl	8004160 <_sbrk_r>
 8003818:	6030      	str	r0, [r6, #0]
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fc9f 	bl	8004160 <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d103      	bne.n	800382e <sbrk_aligned+0x26>
 8003826:	f04f 34ff 	mov.w	r4, #4294967295
 800382a:	4620      	mov	r0, r4
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d0f8      	beq.n	800382a <sbrk_aligned+0x22>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4628      	mov	r0, r5
 800383c:	f000 fc90 	bl	8004160 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d1f2      	bne.n	800382a <sbrk_aligned+0x22>
 8003844:	e7ef      	b.n	8003826 <sbrk_aligned+0x1e>
 8003846:	bf00      	nop
 8003848:	20000288 	.word	0x20000288

0800384c <_malloc_r>:
 800384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003850:	1ccd      	adds	r5, r1, #3
 8003852:	f025 0503 	bic.w	r5, r5, #3
 8003856:	3508      	adds	r5, #8
 8003858:	2d0c      	cmp	r5, #12
 800385a:	bf38      	it	cc
 800385c:	250c      	movcc	r5, #12
 800385e:	2d00      	cmp	r5, #0
 8003860:	4606      	mov	r6, r0
 8003862:	db01      	blt.n	8003868 <_malloc_r+0x1c>
 8003864:	42a9      	cmp	r1, r5
 8003866:	d904      	bls.n	8003872 <_malloc_r+0x26>
 8003868:	230c      	movs	r3, #12
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	2000      	movs	r0, #0
 800386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003872:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003948 <_malloc_r+0xfc>
 8003876:	f000 f869 	bl	800394c <__malloc_lock>
 800387a:	f8d8 3000 	ldr.w	r3, [r8]
 800387e:	461c      	mov	r4, r3
 8003880:	bb44      	cbnz	r4, 80038d4 <_malloc_r+0x88>
 8003882:	4629      	mov	r1, r5
 8003884:	4630      	mov	r0, r6
 8003886:	f7ff ffbf 	bl	8003808 <sbrk_aligned>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	4604      	mov	r4, r0
 800388e:	d158      	bne.n	8003942 <_malloc_r+0xf6>
 8003890:	f8d8 4000 	ldr.w	r4, [r8]
 8003894:	4627      	mov	r7, r4
 8003896:	2f00      	cmp	r7, #0
 8003898:	d143      	bne.n	8003922 <_malloc_r+0xd6>
 800389a:	2c00      	cmp	r4, #0
 800389c:	d04b      	beq.n	8003936 <_malloc_r+0xea>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	4639      	mov	r1, r7
 80038a2:	4630      	mov	r0, r6
 80038a4:	eb04 0903 	add.w	r9, r4, r3
 80038a8:	f000 fc5a 	bl	8004160 <_sbrk_r>
 80038ac:	4581      	cmp	r9, r0
 80038ae:	d142      	bne.n	8003936 <_malloc_r+0xea>
 80038b0:	6821      	ldr	r1, [r4, #0]
 80038b2:	1a6d      	subs	r5, r5, r1
 80038b4:	4629      	mov	r1, r5
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7ff ffa6 	bl	8003808 <sbrk_aligned>
 80038bc:	3001      	adds	r0, #1
 80038be:	d03a      	beq.n	8003936 <_malloc_r+0xea>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	442b      	add	r3, r5
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	f8d8 3000 	ldr.w	r3, [r8]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	bb62      	cbnz	r2, 8003928 <_malloc_r+0xdc>
 80038ce:	f8c8 7000 	str.w	r7, [r8]
 80038d2:	e00f      	b.n	80038f4 <_malloc_r+0xa8>
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	1b52      	subs	r2, r2, r5
 80038d8:	d420      	bmi.n	800391c <_malloc_r+0xd0>
 80038da:	2a0b      	cmp	r2, #11
 80038dc:	d917      	bls.n	800390e <_malloc_r+0xc2>
 80038de:	1961      	adds	r1, r4, r5
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	6025      	str	r5, [r4, #0]
 80038e4:	bf18      	it	ne
 80038e6:	6059      	strne	r1, [r3, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	bf08      	it	eq
 80038ec:	f8c8 1000 	streq.w	r1, [r8]
 80038f0:	5162      	str	r2, [r4, r5]
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f82f 	bl	8003958 <__malloc_unlock>
 80038fa:	f104 000b 	add.w	r0, r4, #11
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	f020 0007 	bic.w	r0, r0, #7
 8003904:	1ac2      	subs	r2, r0, r3
 8003906:	bf1c      	itt	ne
 8003908:	1a1b      	subne	r3, r3, r0
 800390a:	50a3      	strne	r3, [r4, r2]
 800390c:	e7af      	b.n	800386e <_malloc_r+0x22>
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	42a3      	cmp	r3, r4
 8003912:	bf0c      	ite	eq
 8003914:	f8c8 2000 	streq.w	r2, [r8]
 8003918:	605a      	strne	r2, [r3, #4]
 800391a:	e7eb      	b.n	80038f4 <_malloc_r+0xa8>
 800391c:	4623      	mov	r3, r4
 800391e:	6864      	ldr	r4, [r4, #4]
 8003920:	e7ae      	b.n	8003880 <_malloc_r+0x34>
 8003922:	463c      	mov	r4, r7
 8003924:	687f      	ldr	r7, [r7, #4]
 8003926:	e7b6      	b.n	8003896 <_malloc_r+0x4a>
 8003928:	461a      	mov	r2, r3
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	42a3      	cmp	r3, r4
 800392e:	d1fb      	bne.n	8003928 <_malloc_r+0xdc>
 8003930:	2300      	movs	r3, #0
 8003932:	6053      	str	r3, [r2, #4]
 8003934:	e7de      	b.n	80038f4 <_malloc_r+0xa8>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	4630      	mov	r0, r6
 800393c:	f000 f80c 	bl	8003958 <__malloc_unlock>
 8003940:	e794      	b.n	800386c <_malloc_r+0x20>
 8003942:	6005      	str	r5, [r0, #0]
 8003944:	e7d6      	b.n	80038f4 <_malloc_r+0xa8>
 8003946:	bf00      	nop
 8003948:	2000028c 	.word	0x2000028c

0800394c <__malloc_lock>:
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <__malloc_lock+0x8>)
 800394e:	f7ff bf0e 	b.w	800376e <__retarget_lock_acquire_recursive>
 8003952:	bf00      	nop
 8003954:	20000284 	.word	0x20000284

08003958 <__malloc_unlock>:
 8003958:	4801      	ldr	r0, [pc, #4]	@ (8003960 <__malloc_unlock+0x8>)
 800395a:	f7ff bf09 	b.w	8003770 <__retarget_lock_release_recursive>
 800395e:	bf00      	nop
 8003960:	20000284 	.word	0x20000284

08003964 <__sfputc_r>:
 8003964:	6893      	ldr	r3, [r2, #8]
 8003966:	3b01      	subs	r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	b410      	push	{r4}
 800396c:	6093      	str	r3, [r2, #8]
 800396e:	da08      	bge.n	8003982 <__sfputc_r+0x1e>
 8003970:	6994      	ldr	r4, [r2, #24]
 8003972:	42a3      	cmp	r3, r4
 8003974:	db01      	blt.n	800397a <__sfputc_r+0x16>
 8003976:	290a      	cmp	r1, #10
 8003978:	d103      	bne.n	8003982 <__sfputc_r+0x1e>
 800397a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800397e:	f7ff bde8 	b.w	8003552 <__swbuf_r>
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	1c58      	adds	r0, r3, #1
 8003986:	6010      	str	r0, [r2, #0]
 8003988:	7019      	strb	r1, [r3, #0]
 800398a:	4608      	mov	r0, r1
 800398c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003990:	4770      	bx	lr

08003992 <__sfputs_r>:
 8003992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003994:	4606      	mov	r6, r0
 8003996:	460f      	mov	r7, r1
 8003998:	4614      	mov	r4, r2
 800399a:	18d5      	adds	r5, r2, r3
 800399c:	42ac      	cmp	r4, r5
 800399e:	d101      	bne.n	80039a4 <__sfputs_r+0x12>
 80039a0:	2000      	movs	r0, #0
 80039a2:	e007      	b.n	80039b4 <__sfputs_r+0x22>
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	463a      	mov	r2, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7ff ffda 	bl	8003964 <__sfputc_r>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d1f3      	bne.n	800399c <__sfputs_r+0xa>
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039b8 <_vfiprintf_r>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	460d      	mov	r5, r1
 80039be:	b09d      	sub	sp, #116	@ 0x74
 80039c0:	4614      	mov	r4, r2
 80039c2:	4698      	mov	r8, r3
 80039c4:	4606      	mov	r6, r0
 80039c6:	b118      	cbz	r0, 80039d0 <_vfiprintf_r+0x18>
 80039c8:	6a03      	ldr	r3, [r0, #32]
 80039ca:	b90b      	cbnz	r3, 80039d0 <_vfiprintf_r+0x18>
 80039cc:	f7ff fcd8 	bl	8003380 <__sinit>
 80039d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039d2:	07d9      	lsls	r1, r3, #31
 80039d4:	d405      	bmi.n	80039e2 <_vfiprintf_r+0x2a>
 80039d6:	89ab      	ldrh	r3, [r5, #12]
 80039d8:	059a      	lsls	r2, r3, #22
 80039da:	d402      	bmi.n	80039e2 <_vfiprintf_r+0x2a>
 80039dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039de:	f7ff fec6 	bl	800376e <__retarget_lock_acquire_recursive>
 80039e2:	89ab      	ldrh	r3, [r5, #12]
 80039e4:	071b      	lsls	r3, r3, #28
 80039e6:	d501      	bpl.n	80039ec <_vfiprintf_r+0x34>
 80039e8:	692b      	ldr	r3, [r5, #16]
 80039ea:	b99b      	cbnz	r3, 8003a14 <_vfiprintf_r+0x5c>
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7ff fdee 	bl	80035d0 <__swsetup_r>
 80039f4:	b170      	cbz	r0, 8003a14 <_vfiprintf_r+0x5c>
 80039f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039f8:	07dc      	lsls	r4, r3, #31
 80039fa:	d504      	bpl.n	8003a06 <_vfiprintf_r+0x4e>
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	b01d      	add	sp, #116	@ 0x74
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a06:	89ab      	ldrh	r3, [r5, #12]
 8003a08:	0598      	lsls	r0, r3, #22
 8003a0a:	d4f7      	bmi.n	80039fc <_vfiprintf_r+0x44>
 8003a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a0e:	f7ff feaf 	bl	8003770 <__retarget_lock_release_recursive>
 8003a12:	e7f3      	b.n	80039fc <_vfiprintf_r+0x44>
 8003a14:	2300      	movs	r3, #0
 8003a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a18:	2320      	movs	r3, #32
 8003a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a22:	2330      	movs	r3, #48	@ 0x30
 8003a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003bd4 <_vfiprintf_r+0x21c>
 8003a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a2c:	f04f 0901 	mov.w	r9, #1
 8003a30:	4623      	mov	r3, r4
 8003a32:	469a      	mov	sl, r3
 8003a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a38:	b10a      	cbz	r2, 8003a3e <_vfiprintf_r+0x86>
 8003a3a:	2a25      	cmp	r2, #37	@ 0x25
 8003a3c:	d1f9      	bne.n	8003a32 <_vfiprintf_r+0x7a>
 8003a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a42:	d00b      	beq.n	8003a5c <_vfiprintf_r+0xa4>
 8003a44:	465b      	mov	r3, fp
 8003a46:	4622      	mov	r2, r4
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7ff ffa1 	bl	8003992 <__sfputs_r>
 8003a50:	3001      	adds	r0, #1
 8003a52:	f000 80a7 	beq.w	8003ba4 <_vfiprintf_r+0x1ec>
 8003a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a58:	445a      	add	r2, fp
 8003a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 809f 	beq.w	8003ba4 <_vfiprintf_r+0x1ec>
 8003a66:	2300      	movs	r3, #0
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a70:	f10a 0a01 	add.w	sl, sl, #1
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	9307      	str	r3, [sp, #28]
 8003a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a7e:	4654      	mov	r4, sl
 8003a80:	2205      	movs	r2, #5
 8003a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a86:	4853      	ldr	r0, [pc, #332]	@ (8003bd4 <_vfiprintf_r+0x21c>)
 8003a88:	f7fc fbaa 	bl	80001e0 <memchr>
 8003a8c:	9a04      	ldr	r2, [sp, #16]
 8003a8e:	b9d8      	cbnz	r0, 8003ac8 <_vfiprintf_r+0x110>
 8003a90:	06d1      	lsls	r1, r2, #27
 8003a92:	bf44      	itt	mi
 8003a94:	2320      	movmi	r3, #32
 8003a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a9a:	0713      	lsls	r3, r2, #28
 8003a9c:	bf44      	itt	mi
 8003a9e:	232b      	movmi	r3, #43	@ 0x2b
 8003aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8003aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aaa:	d015      	beq.n	8003ad8 <_vfiprintf_r+0x120>
 8003aac:	9a07      	ldr	r2, [sp, #28]
 8003aae:	4654      	mov	r4, sl
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f04f 0c0a 	mov.w	ip, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003abc:	3b30      	subs	r3, #48	@ 0x30
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	d94b      	bls.n	8003b5a <_vfiprintf_r+0x1a2>
 8003ac2:	b1b0      	cbz	r0, 8003af2 <_vfiprintf_r+0x13a>
 8003ac4:	9207      	str	r2, [sp, #28]
 8003ac6:	e014      	b.n	8003af2 <_vfiprintf_r+0x13a>
 8003ac8:	eba0 0308 	sub.w	r3, r0, r8
 8003acc:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	46a2      	mov	sl, r4
 8003ad6:	e7d2      	b.n	8003a7e <_vfiprintf_r+0xc6>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	1d19      	adds	r1, r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	9103      	str	r1, [sp, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bfbb      	ittet	lt
 8003ae4:	425b      	neglt	r3, r3
 8003ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8003aea:	9307      	strge	r3, [sp, #28]
 8003aec:	9307      	strlt	r3, [sp, #28]
 8003aee:	bfb8      	it	lt
 8003af0:	9204      	strlt	r2, [sp, #16]
 8003af2:	7823      	ldrb	r3, [r4, #0]
 8003af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003af6:	d10a      	bne.n	8003b0e <_vfiprintf_r+0x156>
 8003af8:	7863      	ldrb	r3, [r4, #1]
 8003afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003afc:	d132      	bne.n	8003b64 <_vfiprintf_r+0x1ac>
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	1d1a      	adds	r2, r3, #4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	9203      	str	r2, [sp, #12]
 8003b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b0a:	3402      	adds	r4, #2
 8003b0c:	9305      	str	r3, [sp, #20]
 8003b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003be4 <_vfiprintf_r+0x22c>
 8003b12:	7821      	ldrb	r1, [r4, #0]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4650      	mov	r0, sl
 8003b18:	f7fc fb62 	bl	80001e0 <memchr>
 8003b1c:	b138      	cbz	r0, 8003b2e <_vfiprintf_r+0x176>
 8003b1e:	9b04      	ldr	r3, [sp, #16]
 8003b20:	eba0 000a 	sub.w	r0, r0, sl
 8003b24:	2240      	movs	r2, #64	@ 0x40
 8003b26:	4082      	lsls	r2, r0
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	3401      	adds	r4, #1
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b32:	4829      	ldr	r0, [pc, #164]	@ (8003bd8 <_vfiprintf_r+0x220>)
 8003b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b38:	2206      	movs	r2, #6
 8003b3a:	f7fc fb51 	bl	80001e0 <memchr>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d03f      	beq.n	8003bc2 <_vfiprintf_r+0x20a>
 8003b42:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <_vfiprintf_r+0x224>)
 8003b44:	bb1b      	cbnz	r3, 8003b8e <_vfiprintf_r+0x1d6>
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	3307      	adds	r3, #7
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	3308      	adds	r3, #8
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b54:	443b      	add	r3, r7
 8003b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b58:	e76a      	b.n	8003a30 <_vfiprintf_r+0x78>
 8003b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b5e:	460c      	mov	r4, r1
 8003b60:	2001      	movs	r0, #1
 8003b62:	e7a8      	b.n	8003ab6 <_vfiprintf_r+0xfe>
 8003b64:	2300      	movs	r3, #0
 8003b66:	3401      	adds	r4, #1
 8003b68:	9305      	str	r3, [sp, #20]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 0c0a 	mov.w	ip, #10
 8003b70:	4620      	mov	r0, r4
 8003b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b76:	3a30      	subs	r2, #48	@ 0x30
 8003b78:	2a09      	cmp	r2, #9
 8003b7a:	d903      	bls.n	8003b84 <_vfiprintf_r+0x1cc>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0c6      	beq.n	8003b0e <_vfiprintf_r+0x156>
 8003b80:	9105      	str	r1, [sp, #20]
 8003b82:	e7c4      	b.n	8003b0e <_vfiprintf_r+0x156>
 8003b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b88:	4604      	mov	r4, r0
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e7f0      	b.n	8003b70 <_vfiprintf_r+0x1b8>
 8003b8e:	ab03      	add	r3, sp, #12
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	462a      	mov	r2, r5
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <_vfiprintf_r+0x228>)
 8003b96:	a904      	add	r1, sp, #16
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f3af 8000 	nop.w
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	1c78      	adds	r0, r7, #1
 8003ba2:	d1d6      	bne.n	8003b52 <_vfiprintf_r+0x19a>
 8003ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ba6:	07d9      	lsls	r1, r3, #31
 8003ba8:	d405      	bmi.n	8003bb6 <_vfiprintf_r+0x1fe>
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	059a      	lsls	r2, r3, #22
 8003bae:	d402      	bmi.n	8003bb6 <_vfiprintf_r+0x1fe>
 8003bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bb2:	f7ff fddd 	bl	8003770 <__retarget_lock_release_recursive>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	065b      	lsls	r3, r3, #25
 8003bba:	f53f af1f 	bmi.w	80039fc <_vfiprintf_r+0x44>
 8003bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bc0:	e71e      	b.n	8003a00 <_vfiprintf_r+0x48>
 8003bc2:	ab03      	add	r3, sp, #12
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <_vfiprintf_r+0x228>)
 8003bca:	a904      	add	r1, sp, #16
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f000 f879 	bl	8003cc4 <_printf_i>
 8003bd2:	e7e4      	b.n	8003b9e <_vfiprintf_r+0x1e6>
 8003bd4:	08004200 	.word	0x08004200
 8003bd8:	0800420a 	.word	0x0800420a
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	08003993 	.word	0x08003993
 8003be4:	08004206 	.word	0x08004206

08003be8 <_printf_common>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	4616      	mov	r6, r2
 8003bee:	4698      	mov	r8, r3
 8003bf0:	688a      	ldr	r2, [r1, #8]
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	bfb8      	it	lt
 8003bfc:	4613      	movlt	r3, r2
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c04:	4607      	mov	r7, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	b10a      	cbz	r2, 8003c0e <_printf_common+0x26>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	6833      	ldrmi	r3, [r6, #0]
 8003c16:	3302      	addmi	r3, #2
 8003c18:	6033      	strmi	r3, [r6, #0]
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	f015 0506 	ands.w	r5, r5, #6
 8003c20:	d106      	bne.n	8003c30 <_printf_common+0x48>
 8003c22:	f104 0a19 	add.w	sl, r4, #25
 8003c26:	68e3      	ldr	r3, [r4, #12]
 8003c28:	6832      	ldr	r2, [r6, #0]
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dc26      	bgt.n	8003c7e <_printf_common+0x96>
 8003c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	3b00      	subs	r3, #0
 8003c38:	bf18      	it	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	0692      	lsls	r2, r2, #26
 8003c3e:	d42b      	bmi.n	8003c98 <_printf_common+0xb0>
 8003c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c44:	4641      	mov	r1, r8
 8003c46:	4638      	mov	r0, r7
 8003c48:	47c8      	blx	r9
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d01e      	beq.n	8003c8c <_printf_common+0xa4>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	6922      	ldr	r2, [r4, #16]
 8003c52:	f003 0306 	and.w	r3, r3, #6
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf02      	ittt	eq
 8003c5a:	68e5      	ldreq	r5, [r4, #12]
 8003c5c:	6833      	ldreq	r3, [r6, #0]
 8003c5e:	1aed      	subeq	r5, r5, r3
 8003c60:	68a3      	ldr	r3, [r4, #8]
 8003c62:	bf0c      	ite	eq
 8003c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c68:	2500      	movne	r5, #0
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	bfc4      	itt	gt
 8003c6e:	1a9b      	subgt	r3, r3, r2
 8003c70:	18ed      	addgt	r5, r5, r3
 8003c72:	2600      	movs	r6, #0
 8003c74:	341a      	adds	r4, #26
 8003c76:	42b5      	cmp	r5, r6
 8003c78:	d11a      	bne.n	8003cb0 <_printf_common+0xc8>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e008      	b.n	8003c90 <_printf_common+0xa8>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4652      	mov	r2, sl
 8003c82:	4641      	mov	r1, r8
 8003c84:	4638      	mov	r0, r7
 8003c86:	47c8      	blx	r9
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d103      	bne.n	8003c94 <_printf_common+0xac>
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c94:	3501      	adds	r5, #1
 8003c96:	e7c6      	b.n	8003c26 <_printf_common+0x3e>
 8003c98:	18e1      	adds	r1, r4, r3
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	2030      	movs	r0, #48	@ 0x30
 8003c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ca2:	4422      	add	r2, r4
 8003ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cac:	3302      	adds	r3, #2
 8003cae:	e7c7      	b.n	8003c40 <_printf_common+0x58>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	47c8      	blx	r9
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d0e6      	beq.n	8003c8c <_printf_common+0xa4>
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7d9      	b.n	8003c76 <_printf_common+0x8e>
	...

08003cc4 <_printf_i>:
 8003cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	7e0f      	ldrb	r7, [r1, #24]
 8003cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ccc:	2f78      	cmp	r7, #120	@ 0x78
 8003cce:	4691      	mov	r9, r2
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	469a      	mov	sl, r3
 8003cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cda:	d807      	bhi.n	8003cec <_printf_i+0x28>
 8003cdc:	2f62      	cmp	r7, #98	@ 0x62
 8003cde:	d80a      	bhi.n	8003cf6 <_printf_i+0x32>
 8003ce0:	2f00      	cmp	r7, #0
 8003ce2:	f000 80d1 	beq.w	8003e88 <_printf_i+0x1c4>
 8003ce6:	2f58      	cmp	r7, #88	@ 0x58
 8003ce8:	f000 80b8 	beq.w	8003e5c <_printf_i+0x198>
 8003cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cf4:	e03a      	b.n	8003d6c <_printf_i+0xa8>
 8003cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cfa:	2b15      	cmp	r3, #21
 8003cfc:	d8f6      	bhi.n	8003cec <_printf_i+0x28>
 8003cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003d04 <_printf_i+0x40>)
 8003d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d71 	.word	0x08003d71
 8003d0c:	08003ced 	.word	0x08003ced
 8003d10:	08003ced 	.word	0x08003ced
 8003d14:	08003ced 	.word	0x08003ced
 8003d18:	08003ced 	.word	0x08003ced
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003ced 	.word	0x08003ced
 8003d24:	08003ced 	.word	0x08003ced
 8003d28:	08003ced 	.word	0x08003ced
 8003d2c:	08003ced 	.word	0x08003ced
 8003d30:	08003e6f 	.word	0x08003e6f
 8003d34:	08003d9b 	.word	0x08003d9b
 8003d38:	08003e29 	.word	0x08003e29
 8003d3c:	08003ced 	.word	0x08003ced
 8003d40:	08003ced 	.word	0x08003ced
 8003d44:	08003e91 	.word	0x08003e91
 8003d48:	08003ced 	.word	0x08003ced
 8003d4c:	08003d9b 	.word	0x08003d9b
 8003d50:	08003ced 	.word	0x08003ced
 8003d54:	08003ced 	.word	0x08003ced
 8003d58:	08003e31 	.word	0x08003e31
 8003d5c:	6833      	ldr	r3, [r6, #0]
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6032      	str	r2, [r6, #0]
 8003d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e09c      	b.n	8003eaa <_printf_i+0x1e6>
 8003d70:	6833      	ldr	r3, [r6, #0]
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	1d19      	adds	r1, r3, #4
 8003d76:	6031      	str	r1, [r6, #0]
 8003d78:	0606      	lsls	r6, r0, #24
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0xbc>
 8003d7c:	681d      	ldr	r5, [r3, #0]
 8003d7e:	e003      	b.n	8003d88 <_printf_i+0xc4>
 8003d80:	0645      	lsls	r5, r0, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0xb8>
 8003d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	da03      	bge.n	8003d94 <_printf_i+0xd0>
 8003d8c:	232d      	movs	r3, #45	@ 0x2d
 8003d8e:	426d      	negs	r5, r5
 8003d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d94:	4858      	ldr	r0, [pc, #352]	@ (8003ef8 <_printf_i+0x234>)
 8003d96:	230a      	movs	r3, #10
 8003d98:	e011      	b.n	8003dbe <_printf_i+0xfa>
 8003d9a:	6821      	ldr	r1, [r4, #0]
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	0608      	lsls	r0, r1, #24
 8003da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003da4:	d402      	bmi.n	8003dac <_printf_i+0xe8>
 8003da6:	0649      	lsls	r1, r1, #25
 8003da8:	bf48      	it	mi
 8003daa:	b2ad      	uxthmi	r5, r5
 8003dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dae:	4852      	ldr	r0, [pc, #328]	@ (8003ef8 <_printf_i+0x234>)
 8003db0:	6033      	str	r3, [r6, #0]
 8003db2:	bf14      	ite	ne
 8003db4:	230a      	movne	r3, #10
 8003db6:	2308      	moveq	r3, #8
 8003db8:	2100      	movs	r1, #0
 8003dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dbe:	6866      	ldr	r6, [r4, #4]
 8003dc0:	60a6      	str	r6, [r4, #8]
 8003dc2:	2e00      	cmp	r6, #0
 8003dc4:	db05      	blt.n	8003dd2 <_printf_i+0x10e>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	432e      	orrs	r6, r5
 8003dca:	f021 0104 	bic.w	r1, r1, #4
 8003dce:	6021      	str	r1, [r4, #0]
 8003dd0:	d04b      	beq.n	8003e6a <_printf_i+0x1a6>
 8003dd2:	4616      	mov	r6, r2
 8003dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ddc:	5dc7      	ldrb	r7, [r0, r7]
 8003dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003de2:	462f      	mov	r7, r5
 8003de4:	42bb      	cmp	r3, r7
 8003de6:	460d      	mov	r5, r1
 8003de8:	d9f4      	bls.n	8003dd4 <_printf_i+0x110>
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d10b      	bne.n	8003e06 <_printf_i+0x142>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	07df      	lsls	r7, r3, #31
 8003df2:	d508      	bpl.n	8003e06 <_printf_i+0x142>
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	6861      	ldr	r1, [r4, #4]
 8003df8:	4299      	cmp	r1, r3
 8003dfa:	bfde      	ittt	le
 8003dfc:	2330      	movle	r3, #48	@ 0x30
 8003dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e06:	1b92      	subs	r2, r2, r6
 8003e08:	6122      	str	r2, [r4, #16]
 8003e0a:	f8cd a000 	str.w	sl, [sp]
 8003e0e:	464b      	mov	r3, r9
 8003e10:	aa03      	add	r2, sp, #12
 8003e12:	4621      	mov	r1, r4
 8003e14:	4640      	mov	r0, r8
 8003e16:	f7ff fee7 	bl	8003be8 <_printf_common>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d14a      	bne.n	8003eb4 <_printf_i+0x1f0>
 8003e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e22:	b004      	add	sp, #16
 8003e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	f043 0320 	orr.w	r3, r3, #32
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	4832      	ldr	r0, [pc, #200]	@ (8003efc <_printf_i+0x238>)
 8003e32:	2778      	movs	r7, #120	@ 0x78
 8003e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	6831      	ldr	r1, [r6, #0]
 8003e3c:	061f      	lsls	r7, r3, #24
 8003e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e42:	d402      	bmi.n	8003e4a <_printf_i+0x186>
 8003e44:	065f      	lsls	r7, r3, #25
 8003e46:	bf48      	it	mi
 8003e48:	b2ad      	uxthmi	r5, r5
 8003e4a:	6031      	str	r1, [r6, #0]
 8003e4c:	07d9      	lsls	r1, r3, #31
 8003e4e:	bf44      	itt	mi
 8003e50:	f043 0320 	orrmi.w	r3, r3, #32
 8003e54:	6023      	strmi	r3, [r4, #0]
 8003e56:	b11d      	cbz	r5, 8003e60 <_printf_i+0x19c>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	e7ad      	b.n	8003db8 <_printf_i+0xf4>
 8003e5c:	4826      	ldr	r0, [pc, #152]	@ (8003ef8 <_printf_i+0x234>)
 8003e5e:	e7e9      	b.n	8003e34 <_printf_i+0x170>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f023 0320 	bic.w	r3, r3, #32
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	e7f6      	b.n	8003e58 <_printf_i+0x194>
 8003e6a:	4616      	mov	r6, r2
 8003e6c:	e7bd      	b.n	8003dea <_printf_i+0x126>
 8003e6e:	6833      	ldr	r3, [r6, #0]
 8003e70:	6825      	ldr	r5, [r4, #0]
 8003e72:	6961      	ldr	r1, [r4, #20]
 8003e74:	1d18      	adds	r0, r3, #4
 8003e76:	6030      	str	r0, [r6, #0]
 8003e78:	062e      	lsls	r6, r5, #24
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	d501      	bpl.n	8003e82 <_printf_i+0x1be>
 8003e7e:	6019      	str	r1, [r3, #0]
 8003e80:	e002      	b.n	8003e88 <_printf_i+0x1c4>
 8003e82:	0668      	lsls	r0, r5, #25
 8003e84:	d5fb      	bpl.n	8003e7e <_printf_i+0x1ba>
 8003e86:	8019      	strh	r1, [r3, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6123      	str	r3, [r4, #16]
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	e7bc      	b.n	8003e0a <_printf_i+0x146>
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	6032      	str	r2, [r6, #0]
 8003e96:	681e      	ldr	r6, [r3, #0]
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7fc f99f 	bl	80001e0 <memchr>
 8003ea2:	b108      	cbz	r0, 8003ea8 <_printf_i+0x1e4>
 8003ea4:	1b80      	subs	r0, r0, r6
 8003ea6:	6060      	str	r0, [r4, #4]
 8003ea8:	6863      	ldr	r3, [r4, #4]
 8003eaa:	6123      	str	r3, [r4, #16]
 8003eac:	2300      	movs	r3, #0
 8003eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb2:	e7aa      	b.n	8003e0a <_printf_i+0x146>
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	4632      	mov	r2, r6
 8003eb8:	4649      	mov	r1, r9
 8003eba:	4640      	mov	r0, r8
 8003ebc:	47d0      	blx	sl
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d0ad      	beq.n	8003e1e <_printf_i+0x15a>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	079b      	lsls	r3, r3, #30
 8003ec6:	d413      	bmi.n	8003ef0 <_printf_i+0x22c>
 8003ec8:	68e0      	ldr	r0, [r4, #12]
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	4298      	cmp	r0, r3
 8003ece:	bfb8      	it	lt
 8003ed0:	4618      	movlt	r0, r3
 8003ed2:	e7a6      	b.n	8003e22 <_printf_i+0x15e>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	4649      	mov	r1, r9
 8003eda:	4640      	mov	r0, r8
 8003edc:	47d0      	blx	sl
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d09d      	beq.n	8003e1e <_printf_i+0x15a>
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	68e3      	ldr	r3, [r4, #12]
 8003ee6:	9903      	ldr	r1, [sp, #12]
 8003ee8:	1a5b      	subs	r3, r3, r1
 8003eea:	42ab      	cmp	r3, r5
 8003eec:	dcf2      	bgt.n	8003ed4 <_printf_i+0x210>
 8003eee:	e7eb      	b.n	8003ec8 <_printf_i+0x204>
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	f104 0619 	add.w	r6, r4, #25
 8003ef6:	e7f5      	b.n	8003ee4 <_printf_i+0x220>
 8003ef8:	08004211 	.word	0x08004211
 8003efc:	08004222 	.word	0x08004222

08003f00 <__sflush_r>:
 8003f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f08:	0716      	lsls	r6, r2, #28
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	d454      	bmi.n	8003fba <__sflush_r+0xba>
 8003f10:	684b      	ldr	r3, [r1, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	dc02      	bgt.n	8003f1c <__sflush_r+0x1c>
 8003f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dd48      	ble.n	8003fae <__sflush_r+0xae>
 8003f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d045      	beq.n	8003fae <__sflush_r+0xae>
 8003f22:	2300      	movs	r3, #0
 8003f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f28:	682f      	ldr	r7, [r5, #0]
 8003f2a:	6a21      	ldr	r1, [r4, #32]
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	d030      	beq.n	8003f92 <__sflush_r+0x92>
 8003f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	0759      	lsls	r1, r3, #29
 8003f36:	d505      	bpl.n	8003f44 <__sflush_r+0x44>
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f3e:	b10b      	cbz	r3, 8003f44 <__sflush_r+0x44>
 8003f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	2300      	movs	r3, #0
 8003f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f48:	6a21      	ldr	r1, [r4, #32]
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	47b0      	blx	r6
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	d106      	bne.n	8003f62 <__sflush_r+0x62>
 8003f54:	6829      	ldr	r1, [r5, #0]
 8003f56:	291d      	cmp	r1, #29
 8003f58:	d82b      	bhi.n	8003fb2 <__sflush_r+0xb2>
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004004 <__sflush_r+0x104>)
 8003f5c:	40ca      	lsrs	r2, r1
 8003f5e:	07d6      	lsls	r6, r2, #31
 8003f60:	d527      	bpl.n	8003fb2 <__sflush_r+0xb2>
 8003f62:	2200      	movs	r2, #0
 8003f64:	6062      	str	r2, [r4, #4]
 8003f66:	04d9      	lsls	r1, r3, #19
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	6022      	str	r2, [r4, #0]
 8003f6c:	d504      	bpl.n	8003f78 <__sflush_r+0x78>
 8003f6e:	1c42      	adds	r2, r0, #1
 8003f70:	d101      	bne.n	8003f76 <__sflush_r+0x76>
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	b903      	cbnz	r3, 8003f78 <__sflush_r+0x78>
 8003f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f7a:	602f      	str	r7, [r5, #0]
 8003f7c:	b1b9      	cbz	r1, 8003fae <__sflush_r+0xae>
 8003f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d002      	beq.n	8003f8c <__sflush_r+0x8c>
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7ff fbf4 	bl	8003774 <_free_r>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f90:	e00d      	b.n	8003fae <__sflush_r+0xae>
 8003f92:	2301      	movs	r3, #1
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b0      	blx	r6
 8003f98:	4602      	mov	r2, r0
 8003f9a:	1c50      	adds	r0, r2, #1
 8003f9c:	d1c9      	bne.n	8003f32 <__sflush_r+0x32>
 8003f9e:	682b      	ldr	r3, [r5, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0c6      	beq.n	8003f32 <__sflush_r+0x32>
 8003fa4:	2b1d      	cmp	r3, #29
 8003fa6:	d001      	beq.n	8003fac <__sflush_r+0xac>
 8003fa8:	2b16      	cmp	r3, #22
 8003faa:	d11e      	bne.n	8003fea <__sflush_r+0xea>
 8003fac:	602f      	str	r7, [r5, #0]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e022      	b.n	8003ff8 <__sflush_r+0xf8>
 8003fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	e01b      	b.n	8003ff2 <__sflush_r+0xf2>
 8003fba:	690f      	ldr	r7, [r1, #16]
 8003fbc:	2f00      	cmp	r7, #0
 8003fbe:	d0f6      	beq.n	8003fae <__sflush_r+0xae>
 8003fc0:	0793      	lsls	r3, r2, #30
 8003fc2:	680e      	ldr	r6, [r1, #0]
 8003fc4:	bf08      	it	eq
 8003fc6:	694b      	ldreq	r3, [r1, #20]
 8003fc8:	600f      	str	r7, [r1, #0]
 8003fca:	bf18      	it	ne
 8003fcc:	2300      	movne	r3, #0
 8003fce:	eba6 0807 	sub.w	r8, r6, r7
 8003fd2:	608b      	str	r3, [r1, #8]
 8003fd4:	f1b8 0f00 	cmp.w	r8, #0
 8003fd8:	dde9      	ble.n	8003fae <__sflush_r+0xae>
 8003fda:	6a21      	ldr	r1, [r4, #32]
 8003fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fde:	4643      	mov	r3, r8
 8003fe0:	463a      	mov	r2, r7
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b0      	blx	r6
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	dc08      	bgt.n	8003ffc <__sflush_r+0xfc>
 8003fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	4407      	add	r7, r0
 8003ffe:	eba8 0800 	sub.w	r8, r8, r0
 8004002:	e7e7      	b.n	8003fd4 <__sflush_r+0xd4>
 8004004:	20400001 	.word	0x20400001

08004008 <_fflush_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	690b      	ldr	r3, [r1, #16]
 800400c:	4605      	mov	r5, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b913      	cbnz	r3, 8004018 <_fflush_r+0x10>
 8004012:	2500      	movs	r5, #0
 8004014:	4628      	mov	r0, r5
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	b118      	cbz	r0, 8004022 <_fflush_r+0x1a>
 800401a:	6a03      	ldr	r3, [r0, #32]
 800401c:	b90b      	cbnz	r3, 8004022 <_fflush_r+0x1a>
 800401e:	f7ff f9af 	bl	8003380 <__sinit>
 8004022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f3      	beq.n	8004012 <_fflush_r+0xa>
 800402a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800402c:	07d0      	lsls	r0, r2, #31
 800402e:	d404      	bmi.n	800403a <_fflush_r+0x32>
 8004030:	0599      	lsls	r1, r3, #22
 8004032:	d402      	bmi.n	800403a <_fflush_r+0x32>
 8004034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004036:	f7ff fb9a 	bl	800376e <__retarget_lock_acquire_recursive>
 800403a:	4628      	mov	r0, r5
 800403c:	4621      	mov	r1, r4
 800403e:	f7ff ff5f 	bl	8003f00 <__sflush_r>
 8004042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004044:	07da      	lsls	r2, r3, #31
 8004046:	4605      	mov	r5, r0
 8004048:	d4e4      	bmi.n	8004014 <_fflush_r+0xc>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	059b      	lsls	r3, r3, #22
 800404e:	d4e1      	bmi.n	8004014 <_fflush_r+0xc>
 8004050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004052:	f7ff fb8d 	bl	8003770 <__retarget_lock_release_recursive>
 8004056:	e7dd      	b.n	8004014 <_fflush_r+0xc>

08004058 <__swhatbuf_r>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	460c      	mov	r4, r1
 800405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004060:	2900      	cmp	r1, #0
 8004062:	b096      	sub	sp, #88	@ 0x58
 8004064:	4615      	mov	r5, r2
 8004066:	461e      	mov	r6, r3
 8004068:	da0d      	bge.n	8004086 <__swhatbuf_r+0x2e>
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	bf14      	ite	ne
 8004076:	2340      	movne	r3, #64	@ 0x40
 8004078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800407c:	2000      	movs	r0, #0
 800407e:	6031      	str	r1, [r6, #0]
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	b016      	add	sp, #88	@ 0x58
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	466a      	mov	r2, sp
 8004088:	f000 f848 	bl	800411c <_fstat_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	dbec      	blt.n	800406a <__swhatbuf_r+0x12>
 8004090:	9901      	ldr	r1, [sp, #4]
 8004092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800409a:	4259      	negs	r1, r3
 800409c:	4159      	adcs	r1, r3
 800409e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040a2:	e7eb      	b.n	800407c <__swhatbuf_r+0x24>

080040a4 <__smakebuf_r>:
 80040a4:	898b      	ldrh	r3, [r1, #12]
 80040a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a8:	079d      	lsls	r5, r3, #30
 80040aa:	4606      	mov	r6, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	d507      	bpl.n	80040c0 <__smakebuf_r+0x1c>
 80040b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	6123      	str	r3, [r4, #16]
 80040b8:	2301      	movs	r3, #1
 80040ba:	6163      	str	r3, [r4, #20]
 80040bc:	b003      	add	sp, #12
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c0:	ab01      	add	r3, sp, #4
 80040c2:	466a      	mov	r2, sp
 80040c4:	f7ff ffc8 	bl	8004058 <__swhatbuf_r>
 80040c8:	9f00      	ldr	r7, [sp, #0]
 80040ca:	4605      	mov	r5, r0
 80040cc:	4639      	mov	r1, r7
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7ff fbbc 	bl	800384c <_malloc_r>
 80040d4:	b948      	cbnz	r0, 80040ea <__smakebuf_r+0x46>
 80040d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040da:	059a      	lsls	r2, r3, #22
 80040dc:	d4ee      	bmi.n	80040bc <__smakebuf_r+0x18>
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	f043 0302 	orr.w	r3, r3, #2
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	e7e2      	b.n	80040b0 <__smakebuf_r+0xc>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	6020      	str	r0, [r4, #0]
 80040ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	9b01      	ldr	r3, [sp, #4]
 80040f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80040fa:	b15b      	cbz	r3, 8004114 <__smakebuf_r+0x70>
 80040fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f81d 	bl	8004140 <_isatty_r>
 8004106:	b128      	cbz	r0, 8004114 <__smakebuf_r+0x70>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	431d      	orrs	r5, r3
 8004118:	81a5      	strh	r5, [r4, #12]
 800411a:	e7cf      	b.n	80040bc <__smakebuf_r+0x18>

0800411c <_fstat_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	@ (800413c <_fstat_r+0x20>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f7fc fe14 	bl	8000d56 <_fstat>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d102      	bne.n	8004138 <_fstat_r+0x1c>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b103      	cbz	r3, 8004138 <_fstat_r+0x1c>
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	20000280 	.word	0x20000280

08004140 <_isatty_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	@ (800415c <_isatty_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc fe13 	bl	8000d76 <_isatty>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_isatty_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_isatty_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000280 	.word	0x20000280

08004160 <_sbrk_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	@ (800417c <_sbrk_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fc fe1c 	bl	8000da8 <_sbrk>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_sbrk_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_sbrk_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000280 	.word	0x20000280

08004180 <_init>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr

0800418c <_fini>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr
