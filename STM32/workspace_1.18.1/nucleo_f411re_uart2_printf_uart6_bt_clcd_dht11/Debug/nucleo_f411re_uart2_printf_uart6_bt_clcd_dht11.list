
nucleo_f411re_uart2_printf_uart6_bt_clcd_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006280  08006280  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006288  08006288  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006288  08006288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800628c  0800628c  0000728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006290  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  080062f8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080062f8  00008388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fe6  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025be  00000000  00000000  0001907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc9  00000000  00000000  0001d482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138a0  00000000  00000000  0003524b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f00  00000000  00000000  00048aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db9eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  000dba30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000e0e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d4 	.word	0x080060d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080060d4 	.word	0x080060d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <LCD_init+0x6c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f001 f9d2 	bl	8001994 <HAL_Delay>
	LCD_cmdMode();
 80005f0:	f000 f89a 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();
 80005f4:	f000 f8b8 	bl	8000768 <LCD_writeMode>
	LCD_sendData(0x30);
 80005f8:	2030      	movs	r0, #48	@ 0x30
 80005fa:	f000 f849 	bl	8000690 <LCD_sendData>
	HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f001 f9c8 	bl	8001994 <HAL_Delay>
	LCD_sendData(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f000 f843 	bl	8000690 <LCD_sendData>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f001 f9c2 	bl	8001994 <HAL_Delay>
	LCD_sendData(0x30);
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f83d 	bl	8000690 <LCD_sendData>
	LCD_sendData(0x20);
 8000616:	2020      	movs	r0, #32
 8000618:	f000 f83a 	bl	8000690 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 f85f 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000622:	2008      	movs	r0, #8
 8000624:	f000 f85c 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f859 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 f856 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000634:	200c      	movs	r0, #12
 8000636:	f000 f853 	bl	80006e0 <LCD_sendByte>
	LCD_backLightOn();
 800063a:	f000 f865 	bl	8000708 <LCD_backLightOn>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000088 	.word	0x20000088

0800064c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000656:	f000 f867 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800065a:	f000 f885 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <LCD_sendByte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000678:	f000 f866 	bl	8000748 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800067c:	f000 f874 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <LCD_sendByte>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800069a:	f000 f875 	bl	8000788 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800069e:	2002      	movs	r0, #2
 80006a0:	f001 f978 	bl	8001994 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCD_sendData+0x4c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LCD_sendData+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006c4:	f000 f880 	bl	80007c8 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 80006c8:	f000 f86e 	bl	80007a8 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 80006cc:	2002      	movs	r0, #2
 80006ce:	f001 f961 	bl	8001994 <HAL_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000084 	.word	0x20000084

080006e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <LCD_sendData>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <LCD_backLightOn+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <LCD_backLightOn+0x1c>)
 8000718:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071a:	f000 f855 	bl	80007c8 <LCD_sendDataToInterface>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084

08000728 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LCD_cmdMode+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <LCD_cmdMode+0x1c>)
 8000738:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073a:	f000 f845 	bl	80007c8 <LCD_sendDataToInterface>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000084 	.word	0x20000084

08000748 <LCD_charMode>:

void LCD_charMode() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_charMode+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <LCD_charMode+0x1c>)
 8000758:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075a:	f000 f835 	bl	80007c8 <LCD_sendDataToInterface>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084

08000768 <LCD_writeMode>:

void LCD_writeMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <LCD_writeMode+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <LCD_writeMode+0x1c>)
 8000778:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077a:	f000 f825 	bl	80007c8 <LCD_sendDataToInterface>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000084 	.word	0x20000084

08000788 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_enableHigh+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_enableHigh+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f815 	bl	80007c8 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <LCD_enableLow>:

void LCD_enableLow() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f805 	bl	80007c8 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000084 	.word	0x20000084

080007c8 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <LCD_sendDataToInterface+0x20>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <LCD_sendDataToInterface+0x24>)
 80007da:	214e      	movs	r1, #78	@ 0x4e
 80007dc:	f001 fd9c 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000088 	.word	0x20000088
 80007ec:	20000084 	.word	0x20000084

080007f0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff31 	bl	800066e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_writeString+0xe>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3b80      	subs	r3, #128	@ 0x80
 8000858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef5 	bl	800064c <LCD_writeCmdData>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	603a      	str	r2, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffd1 	bl	8000828 <LCD_gotoXY>
	LCD_writeString(str);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ffb2 	bl	80007f0 <LCD_writeString>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ce:	bf00      	nop
  __ASM volatile ("NOP");
 80008d0:	bf00      	nop
  __ASM volatile ("NOP");
 80008d2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80008e0:	2301      	movs	r3, #1
  }

}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000edf0 	.word	0xe000edf0
 80008f0:	e0001000 	.word	0xe0001000

080008f4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <DWT_Delay_us+0x40>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000902:	f002 fcc7 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 8000906:	4603      	mov	r3, r0
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <DWT_Delay_us+0x44>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000918:	bf00      	nop
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <DWT_Delay_us+0x40>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3f8      	bcc.n	800091a <DWT_Delay_us+0x26>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e0001000 	.word	0xe0001000
 8000938:	431bde83 	.word	0x431bde83

0800093c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000958:	887b      	ldrh	r3, [r7, #2]
 800095a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f001 f9da 	bl	8001d24 <HAL_GPIO_Init>
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 f9be 	bl	8001d24 <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80009b4:	f7ff ff6e 	bl	8000894 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <DHT11_Init+0x2c>)
 80009be:	f7ff ffbd 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <DHT11_Init+0x2c>)
 80009ca:	f001 fb47 	bl	800205c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f000 ffdf 	bl	8001994 <HAL_Delay>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020800 	.word	0x40020800

080009e0 <DHT11_Start>:

void DHT11_Start (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <DHT11_Start+0x50>)
 80009ea:	f7ff ffa7 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f4:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <DHT11_Start+0x50>)
 80009f6:	f001 fb31 	bl	800205c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <DHT11_Start+0x50>)
 8000a02:	f001 fb2b 	bl	800205c <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000a06:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000a0a:	f7ff ff73 	bl	80008f4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <DHT11_Start+0x50>)
 8000a16:	f001 fb21 	bl	800205c <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f7ff ff6a 	bl	80008f4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DHT11_Start+0x50>)
 8000a26:	f7ff ffa7 	bl	8000978 <Set_Pin_Input>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800

08000a34 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a3e:	f7ff ff7d 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a4a:	f001 fb07 	bl	800205c <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020800 	.word	0x40020800

08000a58 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a68:	f001 fae0 	bl	800202c <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10f      	bne.n	8000a92 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8000a72:	2050      	movs	r0, #80	@ 0x50
 8000a74:	f7ff ff3e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a7e:	f001 fad5 	bl	800202c <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <DHT11_Check_Response+0x36>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8000a8e:	23ff      	movs	r3, #255	@ 0xff
 8000a90:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000a92:	bf00      	nop
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a9a:	f001 fac7 	bl	800202c <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f7      	bne.n	8000a94 <DHT11_Check_Response+0x3c>

	return Response;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	e03a      	b.n	8000b36 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000ac0:	bf00      	nop
 8000ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac6:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <DHT11_Read+0x94>)
 8000ac8:	f001 fab0 	bl	800202c <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f7      	beq.n	8000ac2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff ff0e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <DHT11_Read+0x94>)
 8000ade:	f001 faa5 	bl	800202c <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10e      	bne.n	8000b06 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	4013      	ands	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e00b      	b.n	8000b1e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	f1c3 0307 	rsb	r3, r3, #7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000b1e:	bf00      	nop
 8000b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b24:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <DHT11_Read+0x94>)
 8000b26:	f001 fa81 	bl	800202c <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f7      	bne.n	8000b20 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9c1      	bls.n	8000ac0 <DHT11_Read+0xc>
	}
	return i;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020800 	.word	0x40020800

08000b4c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000b54:	f7ff ff44 	bl	80009e0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000b58:	f7ff ff7e 	bl	8000a58 <DHT11_Check_Response>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8000b60:	f7ff ffa8 	bl	8000ab4 <DHT11_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000b68:	f7ff ffa4 	bl	8000ab4 <DHT11_Read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8000b70:	f7ff ffa0 	bl	8000ab4 <DHT11_Read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000b78:	f7ff ff9c 	bl	8000ab4 <DHT11_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8000b80:	f7ff ff98 	bl	8000ab4 <DHT11_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000b88:	f7ff ff54 	bl	8000a34 <DHT11_Stop>
	return dht11;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	8093      	strh	r3, [r2, #4]
}
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 fe81 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f000 f883 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb2:	f000 f9bb 	bl	8000f2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb6:	f000 f965 	bl	8000e84 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000bba:	f000 f98d 	bl	8000ed8 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000bbe:	f000 f8e5 	bl	8000d8c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000bc2:	f000 f911 	bl	8000de8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	492c      	ldr	r1, [pc, #176]	@ (8000c7c <main+0xd8>)
 8000bca:	482d      	ldr	r0, [pc, #180]	@ (8000c80 <main+0xdc>)
 8000bcc:	f003 f8a5 	bl	8003d1a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	492c      	ldr	r1, [pc, #176]	@ (8000c84 <main+0xe0>)
 8000bd4:	482c      	ldr	r0, [pc, #176]	@ (8000c88 <main+0xe4>)
 8000bd6:	f003 f8a0 	bl	8003d1a <HAL_UART_Receive_IT>
  DHT11_Init();
 8000bda:	f7ff fee9 	bl	80009b0 <DHT11_Init>
  LCD_init(&hi2c1);
 8000bde:	482b      	ldr	r0, [pc, #172]	@ (8000c8c <main+0xe8>)
 8000be0:	f7ff fcfc 	bl	80005dc <LCD_init>

  DHT11_TypeDef dht11Data;
  char buff[30];

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000be4:	482a      	ldr	r0, [pc, #168]	@ (8000c90 <main+0xec>)
 8000be6:	f002 fbd9 	bl	800339c <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <main+0x50>
	  Error_Handler();
 8000bf0:	f000 fbe2 	bl	80013b8 <Error_Handler>

  printf("start main() dht\r\n");
 8000bf4:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <main+0xf0>)
 8000bf6:	f004 f94b 	bl	8004e90 <puts>
  LCD_writeStringXY(0, 0, "hello lcd");
 8000bfa:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <main+0xf4>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fe33 	bl	800086a <LCD_writeStringXY>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <main+0xf8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <main+0x78>
	  {
			printf("recv2 : %s\r\n",rx2Data);
 8000c0e:	4924      	ldr	r1, [pc, #144]	@ (8000ca0 <main+0xfc>)
 8000c10:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <main+0x100>)
 8000c12:	f004 f8d5 	bl	8004dc0 <iprintf>
			rx2Flag =0;
 8000c16:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <main+0xf8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <main+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <main+0x8c>
	  {
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <main+0x104>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 8000c2c:	f000 fa4a 	bl	80010c4 <bluetooth_Event>
	  }
	  if(time3SecFlag)
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <main+0x108>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0e5      	beq.n	8000c04 <main+0x60>
	  {
		  dht11Data = DHT11_readData();
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff85 	bl	8000b4c <DHT11_readData>
		  sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8000c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c52:	4638      	mov	r0, r7
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	4915      	ldr	r1, [pc, #84]	@ (8000cb0 <main+0x10c>)
 8000c5a:	f004 f921 	bl	8004ea0 <siprintf>
		  printf("%s\r\n", buff);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <main+0x110>)
 8000c64:	f004 f8ac 	bl	8004dc0 <iprintf>
		  LCD_writeStringXY(1, 0, buff);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fdfb 	bl	800086a <LCD_writeStringXY>
//		  HAL_Delay(2000);
		  time3SecFlag = 0;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <main+0x108>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
	  if(rx2Flag)
 8000c7a:	e7c3      	b.n	8000c04 <main+0x60>
 8000c7c:	200001b8 	.word	0x200001b8
 8000c80:	20000128 	.word	0x20000128
 8000c84:	200001ef 	.word	0x200001ef
 8000c88:	20000170 	.word	0x20000170
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	200000e0 	.word	0x200000e0
 8000c94:	080060ec 	.word	0x080060ec
 8000c98:	08006100 	.word	0x08006100
 8000c9c:	200001b9 	.word	0x200001b9
 8000ca0:	200001bc 	.word	0x200001bc
 8000ca4:	0800610c 	.word	0x0800610c
 8000ca8:	200001ee 	.word	0x200001ee
 8000cac:	20000224 	.word	0x20000224
 8000cb0:	0800611c 	.word	0x0800611c
 8000cb4:	08006130 	.word	0x08006130

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	@ 0x50
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	2230      	movs	r2, #48	@ 0x30
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 f9e4 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <SystemClock_Config+0xcc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a27      	ldr	r2, [pc, #156]	@ (8000d84 <SystemClock_Config+0xcc>)
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <SystemClock_Config+0xcc>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <SystemClock_Config+0xd0>)
 8000d02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <SystemClock_Config+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d36:	2304      	movs	r3, #4
 8000d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fe44 	bl	80029cc <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d4a:	f000 fb35 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f8a6 	bl	8002ebc <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d76:	f000 fb1f 	bl	80013b8 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3750      	adds	r7, #80	@ 0x50
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000d92:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <MX_I2C1_Init+0x58>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000d98:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000dac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000db0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_I2C1_Init+0x54>)
 8000dcc:	f001 f960 	bl	8002090 <HAL_I2C_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000dd6:	f000 faef 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000008c 	.word	0x2000008c
 8000de4:	40005400 	.word	0x40005400

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	@ (8000e80 <MX_TIM3_Init+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e0c:	2253      	movs	r2, #83	@ 0x53
 8000e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e2c:	f002 fa66 	bl	80032fc <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 fabf 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e48:	f002 fbfa 	bl	8003640 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 fab1 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e64:	f002 fdfc 	bl	8003a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 faa3 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000e0 	.word	0x200000e0
 8000e80:	40000400 	.word	0x40000400

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <MX_USART2_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f002 fe52 	bl	8003b64 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 fa77 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000128 	.word	0x20000128
 8000ed4:	40004400 	.word	0x40004400

08000ed8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <MX_USART6_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000ee4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ee8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_USART6_UART_Init+0x4c>)
 8000f10:	f002 fe28 	bl	8003b64 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f000 fa4d 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000170 	.word	0x20000170
 8000f28:	40011400 	.word	0x40011400

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a37      	ldr	r2, [pc, #220]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b31      	ldr	r3, [pc, #196]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a30      	ldr	r2, [pc, #192]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_GPIO_Init+0xfc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	481d      	ldr	r0, [pc, #116]	@ (800102c <MX_GPIO_Init+0x100>)
 8000fb8:	f001 f850 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000fc2:	481b      	ldr	r0, [pc, #108]	@ (8001030 <MX_GPIO_Init+0x104>)
 8000fc4:	f001 f84a 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <MX_GPIO_Init+0x104>)
 8000fe0:	f000 fea0 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_GPIO_Init+0x100>)
 8000ffc:	f000 fe92 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|TEST_LED_Pin;
 8001000:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_GPIO_Init+0x104>)
 800101a:	f000 fe83 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020800 	.word	0x40020800

08001034 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b29b      	uxth	r3, r3
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <MX_GPIO_LED_ON+0x20>)
 8001046:	f001 f809 	bl	800205c <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40020000 	.word	0x40020000

08001058 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b29b      	uxth	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <MX_GPIO_LED_OFF+0x20>)
 800106a:	f000 fff7 	bl	800205c <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020000 	.word	0x40020000

0800107c <MX_GPIO_TEST_LED_ON>:
void MX_GPIO_TEST_LED_ON(int pin)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, pin, GPIO_PIN_SET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	b29b      	uxth	r3, r3
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <MX_GPIO_TEST_LED_ON+0x20>)
 800108e:	f000 ffe5 	bl	800205c <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800

080010a0 <MX_GPIO_TEST_LED_OFF>:
void MX_GPIO_TEST_LED_OFF(int pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, pin, GPIO_PIN_RESET);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <MX_GPIO_TEST_LED_OFF+0x20>)
 80010b2:	f000 ffd3 	bl	800205c <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020800 	.word	0x40020800

080010c4 <bluetooth_Event>:
void bluetooth_Event()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a4      	sub	sp, #144	@ 0x90
 80010c8:	af02      	add	r7, sp, #8

  int i=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80010d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 80010e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e4:	2232      	movs	r2, #50	@ 0x32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 ffd3 	bl	8005094 <memset>
  char sendBuf[CMD_SIZE]={0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2232      	movs	r2, #50	@ 0x32
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 ffcd 	bl	8005094 <memset>
  strcpy(recvBuf,btData);
 80010fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fe:	494d      	ldr	r1, [pc, #308]	@ (8001234 <bluetooth_Event+0x170>)
 8001100:	4618      	mov	r0, r3
 8001102:	f004 f89e 	bl	8005242 <strcpy>

  printf("btData : %s\r\n",btData);
 8001106:	494b      	ldr	r1, [pc, #300]	@ (8001234 <bluetooth_Event+0x170>)
 8001108:	484b      	ldr	r0, [pc, #300]	@ (8001238 <bluetooth_Event+0x174>)
 800110a:	f003 fe59 	bl	8004dc0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800110e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001112:	494a      	ldr	r1, [pc, #296]	@ (800123c <bluetooth_Event+0x178>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 ffc5 	bl	80050a4 <strtok>
 800111a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 800111e:	e017      	b.n	8001150 <bluetooth_Event+0x8c>
  {
    pArray[i] =  pToken;
 8001120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3388      	adds	r3, #136	@ 0x88
 8001128:	443b      	add	r3, r7
 800112a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800112e:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001132:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001136:	3301      	adds	r3, #1
 8001138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800113c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001140:	2b04      	cmp	r3, #4
 8001142:	dc0a      	bgt.n	800115a <bluetooth_Event+0x96>
      break;
    pToken = strtok(NULL,"[@]");
 8001144:	493d      	ldr	r1, [pc, #244]	@ (800123c <bluetooth_Event+0x178>)
 8001146:	2000      	movs	r0, #0
 8001148:	f003 ffac 	bl	80050a4 <strtok>
 800114c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8001150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e3      	bne.n	8001120 <bluetooth_Event+0x5c>
 8001158:	e000      	b.n	800115c <bluetooth_Event+0x98>
      break;
 800115a:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 800115c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800115e:	4938      	ldr	r1, [pc, #224]	@ (8001240 <bluetooth_Event+0x17c>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f83d 	bl	80001e0 <strcmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d117      	bne.n	800119c <bluetooth_Event+0xd8>
  {
		if(!strcmp(pArray[2],"ON"))
 800116c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800116e:	4935      	ldr	r1, [pc, #212]	@ (8001244 <bluetooth_Event+0x180>)
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f835 	bl	80001e0 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <bluetooth_Event+0xc0>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 800117c:	2020      	movs	r0, #32
 800117e:	f7ff ff59 	bl	8001034 <MX_GPIO_LED_ON>
 8001182:	e03d      	b.n	8001200 <bluetooth_Event+0x13c>
		}
		else if(!strcmp(pArray[2],"OFF"))
 8001184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001186:	4930      	ldr	r1, [pc, #192]	@ (8001248 <bluetooth_Event+0x184>)
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f829 	bl	80001e0 <strcmp>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d135      	bne.n	8001200 <bluetooth_Event+0x13c>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 8001194:	2020      	movs	r0, #32
 8001196:	f7ff ff5f 	bl	8001058 <MX_GPIO_LED_OFF>
 800119a:	e031      	b.n	8001200 <bluetooth_Event+0x13c>
		}
  }
  else if(!strcmp(pArray[1],"LAMP"))
 800119c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800119e:	492b      	ldr	r1, [pc, #172]	@ (800124c <bluetooth_Event+0x188>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f81d 	bl	80001e0 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d119      	bne.n	80011e0 <bluetooth_Event+0x11c>
  {
		if(!strcmp(pArray[2],"ON"))
 80011ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011ae:	4925      	ldr	r1, [pc, #148]	@ (8001244 <bluetooth_Event+0x180>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f815 	bl	80001e0 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <bluetooth_Event+0x102>
		{
			MX_GPIO_TEST_LED_ON(TEST_LED_Pin);	//PC12 High
 80011bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011c0:	f7ff ff5c 	bl	800107c <MX_GPIO_TEST_LED_ON>
 80011c4:	e01c      	b.n	8001200 <bluetooth_Event+0x13c>
		}
		else if(!strcmp(pArray[2],"OFF"))
 80011c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011c8:	491f      	ldr	r1, [pc, #124]	@ (8001248 <bluetooth_Event+0x184>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f808 	bl	80001e0 <strcmp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d114      	bne.n	8001200 <bluetooth_Event+0x13c>
		{
			MX_GPIO_TEST_LED_OFF(TEST_LED_Pin);	//PC12 Low
 80011d6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011da:	f7ff ff61 	bl	80010a0 <MX_GPIO_TEST_LED_OFF>
 80011de:	e00f      	b.n	8001200 <bluetooth_Event+0x13c>
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80011e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011e2:	491b      	ldr	r1, [pc, #108]	@ (8001250 <bluetooth_Event+0x18c>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7fe fffb 	bl	80001e0 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01d      	beq.n	800122c <bluetooth_Event+0x168>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80011f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011f2:	4918      	ldr	r1, [pc, #96]	@ (8001254 <bluetooth_Event+0x190>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe fff3 	bl	80001e0 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80011fe:	e016      	b.n	800122e <bluetooth_Event+0x16a>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001200:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001202:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001206:	1d38      	adds	r0, r7, #4
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	460b      	mov	r3, r1
 800120c:	4912      	ldr	r1, [pc, #72]	@ (8001258 <bluetooth_Event+0x194>)
 800120e:	f003 fe47 	bl	8004ea0 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ffed 	bl	80001f4 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	1d39      	adds	r1, r7, #4
 8001220:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <bluetooth_Event+0x198>)
 8001226:	f002 fced 	bl	8003c04 <HAL_UART_Transmit>
 800122a:	e000      	b.n	800122e <bluetooth_Event+0x16a>
      return;
 800122c:	bf00      	nop

}
 800122e:	3788      	adds	r7, #136	@ 0x88
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200001f0 	.word	0x200001f0
 8001238:	08006138 	.word	0x08006138
 800123c:	08006148 	.word	0x08006148
 8001240:	0800614c 	.word	0x0800614c
 8001244:	08006150 	.word	0x08006150
 8001248:	08006154 	.word	0x08006154
 800124c:	08006158 	.word	0x08006158
 8001250:	08006160 	.word	0x08006160
 8001254:	0800616c 	.word	0x0800616c
 8001258:	0800617c 	.word	0x0800617c
 800125c:	20000170 	.word	0x20000170

08001260 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	time3Cnt++;				// 1ms
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001270:	6013      	str	r3, [r2, #0]
	if(time3Cnt >= 1000)	 // 1ms * 1000 = 1Sec
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800127a:	d305      	bcc.n	8001288 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		time3SecFlag = 1;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
		time3Cnt = 0;
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
	}
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000228 	.word	0x20000228
 8001298:	20000224 	.word	0x20000224

0800129c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012a4:	1d39      	adds	r1, r7, #4
 80012a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012aa:	2201      	movs	r2, #1
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <__io_putchar+0x20>)
 80012ae:	f002 fca9 	bl	8003c04 <HAL_UART_Transmit>

  return ch;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000128 	.word	0x20000128

080012c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001388 <HAL_UART_RxCpltCallback+0xc8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d129      	bne.n	8001326 <HAL_UART_RxCpltCallback+0x66>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 80012d2:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001390 <HAL_UART_RxCpltCallback+0xd0>)
 80012d8:	7811      	ldrb	r1, [r2, #0]
 80012da:	4a2e      	ldr	r2, [pc, #184]	@ (8001394 <HAL_UART_RxCpltCallback+0xd4>)
 80012dc:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(rx2Data[i] == '\n'))
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001394 <HAL_UART_RxCpltCallback+0xd4>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b0d      	cmp	r3, #13
 80012ea:	d006      	beq.n	80012fa <HAL_UART_RxCpltCallback+0x3a>
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <HAL_UART_RxCpltCallback+0xd4>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d10b      	bne.n	8001312 <HAL_UART_RxCpltCallback+0x52>
    	{
    		rx2Data[i] = '\0';
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a25      	ldr	r2, [pc, #148]	@ (8001394 <HAL_UART_RxCpltCallback+0xd4>)
 8001300:	2100      	movs	r1, #0
 8001302:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_UART_RxCpltCallback+0xd8>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
    		i = 0;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e004      	b.n	800131c <HAL_UART_RxCpltCallback+0x5c>
    	}
    	else
    	{
    		i++;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_UART_RxCpltCallback+0xcc>)
 800131a:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 800131c:	2201      	movs	r2, #1
 800131e:	491c      	ldr	r1, [pc, #112]	@ (8001390 <HAL_UART_RxCpltCallback+0xd0>)
 8001320:	481e      	ldr	r0, [pc, #120]	@ (800139c <HAL_UART_RxCpltCallback+0xdc>)
 8001322:	f002 fcfa 	bl	8003d1a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <HAL_UART_RxCpltCallback+0xe0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d127      	bne.n	8001380 <HAL_UART_RxCpltCallback+0xc0>
    {
    	static int i=0;
    	btData[i] = btchar;
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1c      	ldr	r2, [pc, #112]	@ (80013a8 <HAL_UART_RxCpltCallback+0xe8>)
 8001336:	7811      	ldrb	r1, [r2, #0]
 8001338:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <HAL_UART_RxCpltCallback+0xec>)
 800133a:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1a      	ldr	r2, [pc, #104]	@ (80013ac <HAL_UART_RxCpltCallback+0xec>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d005      	beq.n	8001354 <HAL_UART_RxCpltCallback+0x94>
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_UART_RxCpltCallback+0xec>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	2b0d      	cmp	r3, #13
 8001352:	d10b      	bne.n	800136c <HAL_UART_RxCpltCallback+0xac>
    	{
    		btData[i] = '\0';
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_UART_RxCpltCallback+0xec>)
 800135a:	2100      	movs	r1, #0
 800135c:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_UART_RxCpltCallback+0xf0>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e004      	b.n	8001376 <HAL_UART_RxCpltCallback+0xb6>
    	}
    	else
    	{
    		i++;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <HAL_UART_RxCpltCallback+0xe4>)
 8001374:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001376:	2201      	movs	r2, #1
 8001378:	490b      	ldr	r1, [pc, #44]	@ (80013a8 <HAL_UART_RxCpltCallback+0xe8>)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <HAL_UART_RxCpltCallback+0xf4>)
 800137c:	f002 fccd 	bl	8003d1a <HAL_UART_Receive_IT>
    }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40004400 	.word	0x40004400
 800138c:	2000022c 	.word	0x2000022c
 8001390:	200001b8 	.word	0x200001b8
 8001394:	200001bc 	.word	0x200001bc
 8001398:	200001b9 	.word	0x200001b9
 800139c:	20000128 	.word	0x20000128
 80013a0:	40011400 	.word	0x40011400
 80013a4:	20000230 	.word	0x20000230
 80013a8:	200001ef 	.word	0x200001ef
 80013ac:	200001f0 	.word	0x200001f0
 80013b0:	200001ee 	.word	0x200001ee
 80013b4:	20000170 	.word	0x20000170

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001402:	2007      	movs	r0, #7
 8001404:	f000 fbba 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <HAL_I2C_MspInit+0x84>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12c      	bne.n	8001490 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_I2C_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a17      	ldr	r2, [pc, #92]	@ (800149c <HAL_I2C_MspInit+0x88>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_I2C_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001452:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001464:	2304      	movs	r3, #4
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <HAL_I2C_MspInit+0x8c>)
 8001470:	f000 fc58 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_I2C_MspInit+0x88>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <HAL_I2C_MspInit+0x88>)
 800147e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001482:	6413      	str	r3, [r2, #64]	@ 0x40
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_I2C_MspInit+0x88>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40005400 	.word	0x40005400
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d115      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201d      	movs	r0, #29
 80014d8:	f000 fb5b 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014dc:	201d      	movs	r0, #29
 80014de:	f000 fb74 	bl	8001bca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3a      	ldr	r2, [pc, #232]	@ (80015fc <HAL_UART_MspInit+0x108>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d134      	bne.n	8001580 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a38      	ldr	r2, [pc, #224]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b36      	ldr	r3, [pc, #216]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a31      	ldr	r2, [pc, #196]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154e:	230c      	movs	r3, #12
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	@ (8001604 <HAL_UART_MspInit+0x110>)
 800156a:	f000 fbdb 	bl	8001d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2026      	movs	r0, #38	@ 0x26
 8001574:	f000 fb0d 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001578:	2026      	movs	r0, #38	@ 0x26
 800157a:	f000 fb26 	bl	8001bca <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800157e:	e038      	b.n	80015f2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d133      	bne.n	80015f2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_UART_MspInit+0x10c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c2:	23c0      	movs	r3, #192	@ 0xc0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015d2:	2308      	movs	r3, #8
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <HAL_UART_MspInit+0x118>)
 80015de:	f000 fba1 	bl	8001d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2047      	movs	r0, #71	@ 0x47
 80015e8:	f000 fad3 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015ec:	2047      	movs	r0, #71	@ 0x47
 80015ee:	f000 faec 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	@ 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40011400 	.word	0x40011400
 800160c:	40020800 	.word	0x40020800

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <NMI_Handler+0x4>

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <UsageFault_Handler+0x4>

08001638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001666:	f000 f975 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <TIM3_IRQHandler+0x10>)
 8001676:	f001 fef3 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000e0 	.word	0x200000e0

08001684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <USART2_IRQHandler+0x10>)
 800168a:	f002 fb6b 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000128 	.word	0x20000128

08001698 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <USART6_IRQHandler+0x10>)
 800169e:	f002 fb61 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000170 	.word	0x20000170

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_kill>:

int _kill(int pid, int sig)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c6:	f003 fd8f 	bl	80051e8 <__errno>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2216      	movs	r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
  return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_exit>:

void _exit (int status)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffe7 	bl	80016bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ee:	bf00      	nop
 80016f0:	e7fd      	b.n	80016ee <_exit+0x12>

080016f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e00a      	b.n	800171a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001704:	f3af 8000 	nop.w
 8001708:	4601      	mov	r1, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	60ba      	str	r2, [r7, #8]
 8001710:	b2ca      	uxtb	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	dbf0      	blt.n	8001704 <_read+0x12>
  }

  return len;
 8001722:	687b      	ldr	r3, [r7, #4]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e009      	b.n	8001752 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	60ba      	str	r2, [r7, #8]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fda8 	bl	800129c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbf1      	blt.n	800173e <_write+0x12>
  }
  return len;
 800175a:	687b      	ldr	r3, [r7, #4]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_close>:

int _close(int file)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800178c:	605a      	str	r2, [r3, #4]
  return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_isatty>:

int _isatty(int file)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f003 fcf4 	bl	80051e8 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20020000 	.word	0x20020000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000234 	.word	0x20000234
 8001834:	20000388 	.word	0x20000388

08001838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001860:	f7ff ffea 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	@ (8001898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	@ (800189c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	@ (80018a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f003 fcb3 	bl	80051f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff f989 	bl	8000ba4 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018a0:	08006290 	.word	0x08006290
  ldr r2, =_sbss
 80018a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018a8:	20000388 	.word	0x20000388

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b4:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <HAL_Init+0x40>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_Init+0x40>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_Init+0x40>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 f94f 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fd6e 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f967 	bl	8001be6 <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 f92f 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000008 	.word	0x20000008
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	20000238 	.word	0x20000238

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000238 	.word	0x20000238

08001994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
  {
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	@ (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff8e 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff29 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff3e 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff8e 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5d 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff31 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff feb6 	bl	800197c <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e052      	b.n	8001cd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0216 	bic.w	r2, r2, #22
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <HAL_DMA_Abort+0x62>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0208 	bic.w	r2, r2, #8
 8001c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e013      	b.n	8001caa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fe7b 	bl	800197c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d90c      	bls.n	8001caa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e015      	b.n	8001cd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e4      	bne.n	8001c82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	223f      	movs	r2, #63	@ 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e00c      	b.n	8001d16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e159      	b.n	8001ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8148 	bne.w	8001fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d005      	beq.n	8001d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d130      	bne.n	8001dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 0201 	and.w	r2, r3, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d017      	beq.n	8001e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a2 	beq.w	8001fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b57      	ldr	r3, [pc, #348]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a56      	ldr	r2, [pc, #344]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b54      	ldr	r3, [pc, #336]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a52      	ldr	r2, [pc, #328]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_GPIO_Init+0x2f0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x202>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a48      	ldr	r2, [pc, #288]	@ (8002018 <HAL_GPIO_Init+0x2f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x1fe>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a47      	ldr	r2, [pc, #284]	@ (800201c <HAL_GPIO_Init+0x2f8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <HAL_GPIO_Init+0x2fc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x1f6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <HAL_GPIO_Init+0x300>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x1f2>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b38      	ldr	r3, [pc, #224]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f aea2 	bls.w	8001d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40013c00 	.word	0x40013c00

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002078:	e003      	b.n	8002082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e12b      	b.n	80022fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff f9ac 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	@ 0x24
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f4:	f001 f8da 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 80020f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a81      	ldr	r2, [pc, #516]	@ (8002304 <HAL_I2C_Init+0x274>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d807      	bhi.n	8002114 <HAL_I2C_Init+0x84>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a80      	ldr	r2, [pc, #512]	@ (8002308 <HAL_I2C_Init+0x278>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e006      	b.n	8002122 <HAL_I2C_Init+0x92>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a7d      	ldr	r2, [pc, #500]	@ (800230c <HAL_I2C_Init+0x27c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0e7      	b.n	80022fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a78      	ldr	r2, [pc, #480]	@ (8002310 <HAL_I2C_Init+0x280>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9b      	lsrs	r3, r3, #18
 8002134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a6a      	ldr	r2, [pc, #424]	@ (8002304 <HAL_I2C_Init+0x274>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d802      	bhi.n	8002164 <HAL_I2C_Init+0xd4>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3301      	adds	r3, #1
 8002162:	e009      	b.n	8002178 <HAL_I2C_Init+0xe8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a69      	ldr	r2, [pc, #420]	@ (8002314 <HAL_I2C_Init+0x284>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	3301      	adds	r3, #1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800218a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	495c      	ldr	r1, [pc, #368]	@ (8002304 <HAL_I2C_Init+0x274>)
 8002194:	428b      	cmp	r3, r1
 8002196:	d819      	bhi.n	80021cc <HAL_I2C_Init+0x13c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e59      	subs	r1, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021ac:	400b      	ands	r3, r1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_I2C_Init+0x138>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e59      	subs	r1, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	e051      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e04f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <HAL_I2C_Init+0x168>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e012      	b.n	800221e <HAL_I2C_Init+0x18e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	0099      	lsls	r1, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	fbb0 f3f3 	udiv	r3, r0, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Init+0x196>
 8002222:	2301      	movs	r3, #1
 8002224:	e022      	b.n	800226c <HAL_I2C_Init+0x1dc>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <HAL_I2C_Init+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e58      	subs	r0, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	440b      	add	r3, r1
 800223c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800224a:	e00f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	0099      	lsls	r1, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	6809      	ldr	r1, [r1, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800229a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6911      	ldr	r1, [r2, #16]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	000186a0 	.word	0x000186a0
 8002308:	001e847f 	.word	0x001e847f
 800230c:	003d08ff 	.word	0x003d08ff
 8002310:	431bde83 	.word	0x431bde83
 8002314:	10624dd3 	.word	0x10624dd3

08002318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	4613      	mov	r3, r2
 800232a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fb26 	bl	800197c <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 80e0 	bne.w	8002500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2319      	movs	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	4970      	ldr	r1, [pc, #448]	@ (800250c <HAL_I2C_Master_Transmit+0x1f4>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f964 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e0d3      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x50>
 8002364:	2302      	movs	r3, #2
 8002366:	e0cc      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	@ 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a50      	ldr	r2, [pc, #320]	@ (8002510 <HAL_I2C_Master_Transmit+0x1f8>)
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f89c 	bl	8002514 <I2C_MasterRequestWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08d      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023fc:	e066      	b.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa22 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fa19 	bl	80028dc <I2C_WaitOnBTFFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d107      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e01a      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d194      	bne.n	80023fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000

08002514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d006      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d003      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800253c:	d108      	bne.n	8002550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	2b12      	cmp	r3, #18
 8002556:	d107      	bne.n	8002568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f84f 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258e:	d103      	bne.n	8002598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e035      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e01b      	b.n	80025f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	11db      	asrs	r3, r3, #7
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0306 	and.w	r3, r3, #6
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f063 030f 	orn	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	490e      	ldr	r1, [pc, #56]	@ (8002610 <I2C_MasterRequestWrite+0xfc>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f898 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e010      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4907      	ldr	r1, [pc, #28]	@ (8002614 <I2C_MasterRequestWrite+0x100>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f888 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010008 	.word	0x00010008
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	e048      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d044      	beq.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7ff f9a3 	bl	800197c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d139      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10d      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	43da      	mvns	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	e00c      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x70>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	43da      	mvns	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4013      	ands	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d116      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e023      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10d      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4013      	ands	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	e00c      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d093      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271a:	e071      	b.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272a:	d123      	bne.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e067      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d041      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff f8fe 	bl	800197c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d136      	bne.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e021      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10c      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e00b      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af6d 	bne.w	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002858:	e034      	b.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f886 	bl	800296c <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e034      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d028      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff f883 	bl	800197c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11d      	bne.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002892:	2b80      	cmp	r3, #128	@ 0x80
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e007      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	2b80      	cmp	r3, #128	@ 0x80
 80028d0:	d1c3      	bne.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f83e 	bl	800296c <I2C_IsAcknowledgeFailed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d028      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7ff f83b 	bl	800197c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11d      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d016      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d1c3      	bne.n	80028ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002982:	d11b      	bne.n	80029bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800298c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e267      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d075      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ea:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b85      	ldr	r3, [pc, #532]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d112      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	4b82      	ldr	r3, [pc, #520]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b7e      	ldr	r3, [pc, #504]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05b      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x108>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d157      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e242      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x74>
 8002a32:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a75      	ldr	r2, [pc, #468]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b70      	ldr	r3, [pc, #448]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a64:	4b69      	ldr	r3, [pc, #420]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a68      	ldr	r2, [pc, #416]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff7a 	bl	800197c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff76 	bl	800197c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e207      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xc0>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff66 	bl	800197c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff62 	bl	800197c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1f3      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b51      	ldr	r3, [pc, #324]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xe8>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1c7      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_OscConfig+0x244>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe ff1b 	bl	800197c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe ff17 	bl	800197c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1a8      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4925      	ldr	r1, [pc, #148]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x244>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fefa 	bl	800197c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fef6 	bl	800197c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e187      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d036      	beq.n	8002c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x248>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe feda 	bl	800197c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fed6 	bl	800197c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e167      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x200>
 8002bea:	e01b      	b.n	8002c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x248>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fec3 	bl	800197c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e00e      	b.n	8002c18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe febf 	bl	800197c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d907      	bls.n	8002c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e150      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470000 	.word	0x42470000
 8002c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ea      	bne.n	8002bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8097 	beq.w	8002d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b81      	ldr	r3, [pc, #516]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b7d      	ldr	r3, [pc, #500]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b7a      	ldr	r3, [pc, #488]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b77      	ldr	r3, [pc, #476]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a73      	ldr	r2, [pc, #460]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fe7f 	bl	800197c <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fe7b 	bl	800197c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e10c      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2ea>
 8002ca8:	4b64      	ldr	r3, [pc, #400]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a63      	ldr	r2, [pc, #396]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x324>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x30c>
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a5b      	ldr	r2, [pc, #364]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x324>
 8002cd8:	4b58      	ldr	r3, [pc, #352]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a57      	ldr	r2, [pc, #348]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b55      	ldr	r3, [pc, #340]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a54      	ldr	r2, [pc, #336]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fe40 	bl	800197c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fe3c 	bl	800197c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0cb      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCC_OscConfig+0x334>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fe2a 	bl	800197c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fe26 	bl	800197c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0b5      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	4a38      	ldr	r2, [pc, #224]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a1 	beq.w	8002eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6a:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d05c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d141      	bne.n	8002e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fdfa 	bl	800197c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fdf6 	bl	800197c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e087      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	491b      	ldr	r1, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fdcf 	bl	800197c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fdcb 	bl	800197c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e05c      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x416>
 8002e00:	e054      	b.n	8002eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fdb8 	bl	800197c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fdb4 	bl	800197c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e045      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x444>
 8002e2e:	e03d      	b.n	8002eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e038      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_RCC_OscConfig+0x4ec>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d028      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d121      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0cc      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b68      	ldr	r3, [pc, #416]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d90c      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b65      	ldr	r3, [pc, #404]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d044      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d119      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e067      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4934      	ldr	r1, [pc, #208]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fce6 	bl	800197c <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe fce2 	bl	800197c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d20c      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fc46 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00
 8003078:	40023800 	.word	0x40023800
 800307c:	08006188 	.word	0x08006188
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b094      	sub	sp, #80	@ 0x50
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a0:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x40>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	f200 80e1 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ba:	e0db      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b73      	ldr	r3, [pc, #460]	@ (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030c0:	e0db      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030c6:	e0d8      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	2200      	movs	r2, #0
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	6139      	str	r1, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4651      	mov	r1, sl
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	4651      	mov	r1, sl
 800313c:	ebb2 0801 	subs.w	r8, r2, r1
 8003140:	4659      	mov	r1, fp
 8003142:	eb63 0901 	sbc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	462b      	mov	r3, r5
 8003168:	eb49 0303 	adc.w	r3, r9, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317a:	4629      	mov	r1, r5
 800317c:	024b      	lsls	r3, r1, #9
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003184:	4621      	mov	r1, r4
 8003186:	024a      	lsls	r2, r1, #9
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800318e:	2200      	movs	r2, #0
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003198:	f7fd f88a 	bl	80002b0 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	e058      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b38      	ldr	r3, [pc, #224]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	4611      	mov	r1, r2
 80031b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80031bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d2:	0150      	lsls	r0, r2, #5
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4641      	mov	r1, r8
 80031da:	ebb2 0a01 	subs.w	sl, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f8:	ebb2 040a 	subs.w	r4, r2, sl
 80031fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	464b      	mov	r3, r9
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	f7fd f830 	bl	80002b0 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800326a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800327c:	4618      	mov	r0, r3
 800327e:	3750      	adds	r7, #80	@ 0x50
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08006198 	.word	0x08006198

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08006198 	.word	0x08006198

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe f8be 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fa70 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e044      	b.n	800343e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_TIM_Base_Start_IT+0xb0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033de:	d013      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003450 <HAL_TIM_Base_Start_IT+0xb4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a19      	ldr	r2, [pc, #100]	@ (8003454 <HAL_TIM_Base_Start_IT+0xb8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <HAL_TIM_Base_Start_IT+0xbc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <HAL_TIM_Base_Start_IT+0xc0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d010      	beq.n	800343c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e007      	b.n	800343c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40014000 	.word	0x40014000

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0202 	mvn.w	r2, #2
 8003494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f999 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f98b 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f99c 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f973 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f965 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f976 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0208 	mvn.w	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f94d 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f93f 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f950 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0210 	mvn.w	r2, #16
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2208      	movs	r2, #8
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f927 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f919 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f92a 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0201 	mvn.w	r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fe4a 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fab0 	bl	8003b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8fb 	bl	800380a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0220 	mvn.w	r2, #32
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa82 	bl	8003b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e0b4      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x186>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800367a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003694:	d03e      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0xd4>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369a:	f200 8087 	bhi.w	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a2:	f000 8086 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x172>
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036aa:	d87f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b70      	cmp	r3, #112	@ 0x70
 80036ae:	d01a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xa6>
 80036b0:	2b70      	cmp	r3, #112	@ 0x70
 80036b2:	d87b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b60      	cmp	r3, #96	@ 0x60
 80036b6:	d050      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x11a>
 80036b8:	2b60      	cmp	r3, #96	@ 0x60
 80036ba:	d877      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b50      	cmp	r3, #80	@ 0x50
 80036be:	d03c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xfa>
 80036c0:	2b50      	cmp	r3, #80	@ 0x50
 80036c2:	d873      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	d058      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x13a>
 80036c8:	2b40      	cmp	r3, #64	@ 0x40
 80036ca:	d86f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b30      	cmp	r3, #48	@ 0x30
 80036ce:	d064      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15a>
 80036d0:	2b30      	cmp	r3, #48	@ 0x30
 80036d2:	d86b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d060      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15a>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d867      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15a>
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d05a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15a>
 80036e4:	e062      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	f000 f993 	bl	8003a20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	609a      	str	r2, [r3, #8]
      break;
 8003712:	e04f      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003724:	f000 f97c 	bl	8003a20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e03c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	461a      	mov	r2, r3
 8003748:	f000 f8f0 	bl	800392c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2150      	movs	r1, #80	@ 0x50
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f949 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 8003758:	e02c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003766:	461a      	mov	r2, r3
 8003768:	f000 f90f 	bl	800398a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2160      	movs	r1, #96	@ 0x60
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f939 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 8003778:	e01c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	461a      	mov	r2, r3
 8003788:	f000 f8d0 	bl	800392c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2140      	movs	r1, #64	@ 0x40
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f929 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 8003798:	e00c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 f920 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 80037aa:	e003      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e000      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a37      	ldr	r2, [pc, #220]	@ (8003910 <TIM_Base_SetConfig+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a34      	ldr	r2, [pc, #208]	@ (8003914 <TIM_Base_SetConfig+0xf4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a33      	ldr	r2, [pc, #204]	@ (8003918 <TIM_Base_SetConfig+0xf8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a32      	ldr	r2, [pc, #200]	@ (800391c <TIM_Base_SetConfig+0xfc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <TIM_Base_SetConfig+0xf0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003878:	d017      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	@ (8003914 <TIM_Base_SetConfig+0xf4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a24      	ldr	r2, [pc, #144]	@ (8003918 <TIM_Base_SetConfig+0xf8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a23      	ldr	r2, [pc, #140]	@ (800391c <TIM_Base_SetConfig+0xfc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <TIM_Base_SetConfig+0x100>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <TIM_Base_SetConfig+0x104>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a20      	ldr	r2, [pc, #128]	@ (8003928 <TIM_Base_SetConfig+0x108>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003910 <TIM_Base_SetConfig+0xf0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d103      	bne.n	80038ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800

0800392c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 030a 	bic.w	r3, r3, #10
 8003968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398a:	b480      	push	{r7}
 800398c:	b087      	sub	sp, #28
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f023 0210 	bic.w	r2, r3, #16
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	031b      	lsls	r3, r3, #12
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f043 0307 	orr.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e050      	b.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d013      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a18      	ldr	r2, [pc, #96]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e042      	b.n	8003bfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fcb2 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	@ 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fdd3 	bl	8004754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d175      	bne.n	8003d10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit+0x2c>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e06e      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	@ 0x21
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fd fe9b 	bl	800197c <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c78:	e02e      	b.n	8003cd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fb37 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03a      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cb      	bne.n	8003c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2140      	movs	r1, #64	@ 0x40
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fb03 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	4613      	mov	r3, r2
 8003d26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d112      	bne.n	8003d5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_UART_Receive_IT+0x26>
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00b      	b.n	8003d5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fb2a 	bl	80043aa <UART_Start_Receive_IT>
 8003d56:	4603      	mov	r3, r0
 8003d58:	e000      	b.n	8003d5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0ba      	sub	sp, #232	@ 0xe8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_UART_IRQHandler+0x66>
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fc07 	bl	80045d6 <UART_Receive_IT>
      return;
 8003dc8:	e273      	b.n	80042b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80de 	beq.w	8003f90 <HAL_UART_IRQHandler+0x22c>
 8003dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80d1 	beq.w	8003f90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_UART_IRQHandler+0xae>
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xd2>
 8003e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_UART_IRQHandler+0xf6>
 8003e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0204 	orr.w	r2, r3, #4
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_UART_IRQHandler+0x126>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f043 0208 	orr.w	r2, r3, #8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 820a 	beq.w	80042a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14e>
 8003ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb92 	bl	80045d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebc:	2b40      	cmp	r3, #64	@ 0x40
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_UART_IRQHandler+0x17a>
 8003ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d04f      	beq.n	8003f7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa9d 	bl	800441e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b40      	cmp	r3, #64	@ 0x40
 8003ef0:	d141      	bne.n	8003f76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1d9      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d013      	beq.n	8003f6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4a:	4a8a      	ldr	r2, [pc, #552]	@ (8004174 <HAL_UART_IRQHandler+0x410>)
 8003f4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fec3 	bl	8001cde <HAL_DMA_Abort_IT>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e00e      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9ac 	bl	80042cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e00a      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9a8 	bl	80042cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e006      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9a4 	bl	80042cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f8a:	e18d      	b.n	80042a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	bf00      	nop
    return;
 8003f8e:	e18b      	b.n	80042a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8167 	bne.w	8004268 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8160 	beq.w	8004268 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8159 	beq.w	8004268 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	f040 80ce 	bne.w	8004178 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a9 	beq.w	8004144 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f080 80a2 	bcs.w	8004144 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004006:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004012:	f000 8088 	beq.w	8004126 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800402c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004042:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800404e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800405a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1d9      	bne.n	8004016 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004086:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800408a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800408e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e1      	bne.n	8004062 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e3      	bne.n	800409e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f6:	f023 0310 	bic.w	r3, r3, #16
 80040fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004108:	65ba      	str	r2, [r7, #88]	@ 0x58
 800410a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800410e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e3      	bne.n	80040e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd fd6c 	bl	8001bfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	b29b      	uxth	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8cf 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004142:	e0b3      	b.n	80042ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004148:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800414c:	429a      	cmp	r2, r3
 800414e:	f040 80ad 	bne.w	80042ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415c:	f040 80a6 	bne.w	80042ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f8b7 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
      return;
 8004172:	e09b      	b.n	80042ac <HAL_UART_IRQHandler+0x548>
 8004174:	080044e5 	.word	0x080044e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 808e 	beq.w	80042b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8089 	beq.w	80042b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004240:	61fa      	str	r2, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800425a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f83d 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004266:	e023      	b.n	80042b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_UART_IRQHandler+0x524>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f940 	bl	8004506 <UART_Transmit_IT>
    return;
 8004286:	e014      	b.n	80042b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <HAL_UART_IRQHandler+0x54e>
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f980 	bl	80045a6 <UART_EndTransmit_IT>
    return;
 80042a6:	e004      	b.n	80042b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80042a8:	bf00      	nop
 80042aa:	e002      	b.n	80042b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80042ac:	bf00      	nop
 80042ae:	e000      	b.n	80042b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80042b0:	bf00      	nop
  }
}
 80042b2:	37e8      	adds	r7, #232	@ 0xe8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	e03b      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d037      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fd fb33 	bl	800197c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <UART_WaitOnFlagUntilTimeout+0x30>
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e03a      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	d020      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d01d      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d116      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f857 	bl	800441e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2208      	movs	r2, #8
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e00f      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	429a      	cmp	r2, r3
 800439e:	d0b4      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	@ 0x22
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441e:	b480      	push	{r7}
 8004420:	b095      	sub	sp, #84	@ 0x54
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800443c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004446:	643a      	str	r2, [r7, #64]	@ 0x40
 8004448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800444c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e5      	bne.n	8004426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	61fb      	str	r3, [r7, #28]
   return(result);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e5      	bne.n	800445a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	2b01      	cmp	r3, #1
 8004494:	d119      	bne.n	80044ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b6:	61ba      	str	r2, [r7, #24]
 80044b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6979      	ldr	r1, [r7, #20]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e5      	bne.n	8004496 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044d8:	bf00      	nop
 80044da:	3754      	adds	r7, #84	@ 0x54
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fee7 	bl	80042cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d13e      	bne.n	8004598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d114      	bne.n	800454e <UART_Transmit_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
 800454c:	e008      	b.n	8004560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6211      	str	r1, [r2, #32]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff fe76 	bl	80042b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08c      	sub	sp, #48	@ 0x30
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b22      	cmp	r3, #34	@ 0x22
 80045f0:	f040 80aa 	bne.w	8004748 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fc:	d115      	bne.n	800462a <UART_Receive_IT+0x54>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d111      	bne.n	800462a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004618:	b29a      	uxth	r2, r3
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
 8004628:	e024      	b.n	8004674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004638:	d007      	beq.n	800464a <UART_Receive_IT+0x74>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <UART_Receive_IT+0x82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e008      	b.n	800466a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004664:	b2da      	uxtb	r2, r3
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29b      	uxth	r3, r3
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4619      	mov	r1, r3
 8004682:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004684:	2b00      	cmp	r3, #0
 8004686:	d15d      	bne.n	8004744 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0220 	bic.w	r2, r2, #32
 8004696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d135      	bne.n	800473a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	613b      	str	r3, [r7, #16]
   return(result);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f4:	623a      	str	r2, [r7, #32]
 80046f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	69f9      	ldr	r1, [r7, #28]
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	61bb      	str	r3, [r7, #24]
   return(result);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e5      	bne.n	80046d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b10      	cmp	r3, #16
 8004714:	d10a      	bne.n	800472c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fdd4 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
 8004738:	e002      	b.n	8004740 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fdc0 	bl	80012c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e002      	b.n	800474a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3730      	adds	r7, #48	@ 0x30
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b0c0      	sub	sp, #256	@ 0x100
 800475a:	af00      	add	r7, sp, #0
 800475c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	ea40 0301 	orr.w	r3, r0, r1
 800477c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047ac:	f021 010c 	bic.w	r1, r1, #12
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ba:	430b      	orrs	r3, r1
 80047bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	6999      	ldr	r1, [r3, #24]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	ea40 0301 	orr.w	r3, r0, r1
 80047da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a20 <UART_SetConfig+0x2cc>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d005      	beq.n	80047f4 <UART_SetConfig+0xa0>
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004a24 <UART_SetConfig+0x2d0>)
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fd6e 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 80047f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047fc:	e003      	b.n	8004806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe fd55 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004802:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004810:	f040 810c 	bne.w	8004a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800481e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	1891      	adds	r1, r2, r2
 800482c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800482e:	415b      	adcs	r3, r3
 8004830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004836:	4621      	mov	r1, r4
 8004838:	eb12 0801 	adds.w	r8, r2, r1
 800483c:	4629      	mov	r1, r5
 800483e:	eb43 0901 	adc.w	r9, r3, r1
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004856:	4690      	mov	r8, r2
 8004858:	4699      	mov	r9, r3
 800485a:	4623      	mov	r3, r4
 800485c:	eb18 0303 	adds.w	r3, r8, r3
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004864:	462b      	mov	r3, r5
 8004866:	eb49 0303 	adc.w	r3, r9, r3
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800487a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800487e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004882:	460b      	mov	r3, r1
 8004884:	18db      	adds	r3, r3, r3
 8004886:	653b      	str	r3, [r7, #80]	@ 0x50
 8004888:	4613      	mov	r3, r2
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004898:	f7fb fd0a 	bl	80002b0 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b61      	ldr	r3, [pc, #388]	@ (8004a28 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048c4:	415b      	adcs	r3, r3
 80048c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048cc:	4641      	mov	r1, r8
 80048ce:	eb12 0a01 	adds.w	sl, r2, r1
 80048d2:	4649      	mov	r1, r9
 80048d4:	eb43 0b01 	adc.w	fp, r3, r1
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ec:	4692      	mov	sl, r2
 80048ee:	469b      	mov	fp, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	eb1a 0303 	adds.w	r3, sl, r3
 80048f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004910:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	643b      	str	r3, [r7, #64]	@ 0x40
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	647b      	str	r3, [r7, #68]	@ 0x44
 8004926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800492a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800492e:	f7fb fcbf 	bl	80002b0 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4611      	mov	r1, r2
 8004938:	4b3b      	ldr	r3, [pc, #236]	@ (8004a28 <UART_SetConfig+0x2d4>)
 800493a:	fba3 2301 	umull	r2, r3, r3, r1
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2264      	movs	r2, #100	@ 0x64
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800494e:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <UART_SetConfig+0x2d4>)
 8004950:	fba3 2302 	umull	r2, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800495c:	441c      	add	r4, r3
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004968:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800496c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004978:	415b      	adcs	r3, r3
 800497a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800497c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6339      	str	r1, [r7, #48]	@ 0x30
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049ea:	f7fb fc61 	bl	80002b0 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <UART_SetConfig+0x2d4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	@ 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3332      	adds	r3, #50	@ 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	@ (8004a28 <UART_SetConfig+0x2d4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 0207 	and.w	r2, r3, #7
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a1c:	e106      	b.n	8004c2c <UART_SetConfig+0x4d8>
 8004a1e:	bf00      	nop
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a3e:	4642      	mov	r2, r8
 8004a40:	464b      	mov	r3, r9
 8004a42:	1891      	adds	r1, r2, r2
 8004a44:	6239      	str	r1, [r7, #32]
 8004a46:	415b      	adcs	r3, r3
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4e:	4641      	mov	r1, r8
 8004a50:	1854      	adds	r4, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0501 	adc.w	r5, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	00eb      	lsls	r3, r5, #3
 8004a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	18e3      	adds	r3, r4, r3
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a74:	464b      	mov	r3, r9
 8004a76:	eb45 0303 	adc.w	r3, r5, r3
 8004a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	008a      	lsls	r2, r1, #2
 8004aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aac:	f7fb fc00 	bl	80002b0 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4b60      	ldr	r3, [pc, #384]	@ (8004c38 <UART_SetConfig+0x4e4>)
 8004ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	011c      	lsls	r4, r3, #4
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	61b9      	str	r1, [r7, #24]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6139      	str	r1, [r7, #16]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b38:	4649      	mov	r1, r9
 8004b3a:	008b      	lsls	r3, r1, #2
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b42:	4641      	mov	r1, r8
 8004b44:	008a      	lsls	r2, r1, #2
 8004b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b4a:	f7fb fbb1 	bl	80002b0 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	4b38      	ldr	r3, [pc, #224]	@ (8004c38 <UART_SetConfig+0x4e4>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2264      	movs	r2, #100	@ 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	@ 0x32
 8004b68:	4a33      	ldr	r2, [pc, #204]	@ (8004c38 <UART_SetConfig+0x4e4>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b74:	441c      	add	r4, r3
 8004b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b94:	4641      	mov	r1, r8
 8004b96:	1851      	adds	r1, r2, r1
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	414b      	adcs	r3, r1
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bac:	4659      	mov	r1, fp
 8004bae:	00cb      	lsls	r3, r1, #3
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb6:	4651      	mov	r1, sl
 8004bb8:	00ca      	lsls	r2, r1, #3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	460a      	mov	r2, r1
 8004bca:	eb42 0303 	adc.w	r3, r2, r3
 8004bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bda:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004be8:	4649      	mov	r1, r9
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	4641      	mov	r1, r8
 8004bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	008a      	lsls	r2, r1, #2
 8004bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bfa:	f7fb fb59 	bl	80002b0 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <UART_SetConfig+0x4e4>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	@ 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	3332      	adds	r3, #50	@ 0x32
 8004c16:	4a08      	ldr	r2, [pc, #32]	@ (8004c38 <UART_SetConfig+0x4e4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4422      	add	r2, r4
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c38:	51eb851f 	.word	0x51eb851f

08004c3c <std>:
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	e9c0 3300 	strd	r3, r3, [r0]
 8004c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4a:	6083      	str	r3, [r0, #8]
 8004c4c:	8181      	strh	r1, [r0, #12]
 8004c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c50:	81c2      	strh	r2, [r0, #14]
 8004c52:	6183      	str	r3, [r0, #24]
 8004c54:	4619      	mov	r1, r3
 8004c56:	2208      	movs	r2, #8
 8004c58:	305c      	adds	r0, #92	@ 0x5c
 8004c5a:	f000 fa1b 	bl	8005094 <memset>
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <std+0x58>)
 8004c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <std+0x5c>)
 8004c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <std+0x60>)
 8004c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <std+0x64>)
 8004c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <std+0x68>)
 8004c70:	6224      	str	r4, [r4, #32]
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d006      	beq.n	8004c84 <std+0x48>
 8004c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c7a:	4294      	cmp	r4, r2
 8004c7c:	d002      	beq.n	8004c84 <std+0x48>
 8004c7e:	33d0      	adds	r3, #208	@ 0xd0
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d105      	bne.n	8004c90 <std+0x54>
 8004c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	f000 bad6 	b.w	800523c <__retarget_lock_init_recursive>
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	bf00      	nop
 8004c94:	08004ee5 	.word	0x08004ee5
 8004c98:	08004f07 	.word	0x08004f07
 8004c9c:	08004f3f 	.word	0x08004f3f
 8004ca0:	08004f63 	.word	0x08004f63
 8004ca4:	2000023c 	.word	0x2000023c

08004ca8 <stdio_exit_handler>:
 8004ca8:	4a02      	ldr	r2, [pc, #8]	@ (8004cb4 <stdio_exit_handler+0xc>)
 8004caa:	4903      	ldr	r1, [pc, #12]	@ (8004cb8 <stdio_exit_handler+0x10>)
 8004cac:	4803      	ldr	r0, [pc, #12]	@ (8004cbc <stdio_exit_handler+0x14>)
 8004cae:	f000 b869 	b.w	8004d84 <_fwalk_sglue>
 8004cb2:	bf00      	nop
 8004cb4:	2000000c 	.word	0x2000000c
 8004cb8:	08005de5 	.word	0x08005de5
 8004cbc:	2000001c 	.word	0x2000001c

08004cc0 <cleanup_stdio>:
 8004cc0:	6841      	ldr	r1, [r0, #4]
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <cleanup_stdio+0x34>)
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	4604      	mov	r4, r0
 8004cca:	d001      	beq.n	8004cd0 <cleanup_stdio+0x10>
 8004ccc:	f001 f88a 	bl	8005de4 <_fflush_r>
 8004cd0:	68a1      	ldr	r1, [r4, #8]
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <cleanup_stdio+0x38>)
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d002      	beq.n	8004cde <cleanup_stdio+0x1e>
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f001 f883 	bl	8005de4 <_fflush_r>
 8004cde:	68e1      	ldr	r1, [r4, #12]
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <cleanup_stdio+0x3c>)
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d004      	beq.n	8004cf0 <cleanup_stdio+0x30>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cec:	f001 b87a 	b.w	8005de4 <_fflush_r>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000023c 	.word	0x2000023c
 8004cf8:	200002a4 	.word	0x200002a4
 8004cfc:	2000030c 	.word	0x2000030c

08004d00 <global_stdio_init.part.0>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <global_stdio_init.part.0+0x30>)
 8004d04:	4c0b      	ldr	r4, [pc, #44]	@ (8004d34 <global_stdio_init.part.0+0x34>)
 8004d06:	4a0c      	ldr	r2, [pc, #48]	@ (8004d38 <global_stdio_init.part.0+0x38>)
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2104      	movs	r1, #4
 8004d10:	f7ff ff94 	bl	8004c3c <std>
 8004d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2109      	movs	r1, #9
 8004d1c:	f7ff ff8e 	bl	8004c3c <std>
 8004d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d24:	2202      	movs	r2, #2
 8004d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2a:	2112      	movs	r1, #18
 8004d2c:	f7ff bf86 	b.w	8004c3c <std>
 8004d30:	20000374 	.word	0x20000374
 8004d34:	2000023c 	.word	0x2000023c
 8004d38:	08004ca9 	.word	0x08004ca9

08004d3c <__sfp_lock_acquire>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	@ (8004d44 <__sfp_lock_acquire+0x8>)
 8004d3e:	f000 ba7e 	b.w	800523e <__retarget_lock_acquire_recursive>
 8004d42:	bf00      	nop
 8004d44:	2000037d 	.word	0x2000037d

08004d48 <__sfp_lock_release>:
 8004d48:	4801      	ldr	r0, [pc, #4]	@ (8004d50 <__sfp_lock_release+0x8>)
 8004d4a:	f000 ba79 	b.w	8005240 <__retarget_lock_release_recursive>
 8004d4e:	bf00      	nop
 8004d50:	2000037d 	.word	0x2000037d

08004d54 <__sinit>:
 8004d54:	b510      	push	{r4, lr}
 8004d56:	4604      	mov	r4, r0
 8004d58:	f7ff fff0 	bl	8004d3c <__sfp_lock_acquire>
 8004d5c:	6a23      	ldr	r3, [r4, #32]
 8004d5e:	b11b      	cbz	r3, 8004d68 <__sinit+0x14>
 8004d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d64:	f7ff bff0 	b.w	8004d48 <__sfp_lock_release>
 8004d68:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <__sinit+0x28>)
 8004d6a:	6223      	str	r3, [r4, #32]
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <__sinit+0x2c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f5      	bne.n	8004d60 <__sinit+0xc>
 8004d74:	f7ff ffc4 	bl	8004d00 <global_stdio_init.part.0>
 8004d78:	e7f2      	b.n	8004d60 <__sinit+0xc>
 8004d7a:	bf00      	nop
 8004d7c:	08004cc1 	.word	0x08004cc1
 8004d80:	20000374 	.word	0x20000374

08004d84 <_fwalk_sglue>:
 8004d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	4607      	mov	r7, r0
 8004d8a:	4688      	mov	r8, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d94:	f1b9 0901 	subs.w	r9, r9, #1
 8004d98:	d505      	bpl.n	8004da6 <_fwalk_sglue+0x22>
 8004d9a:	6824      	ldr	r4, [r4, #0]
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	d1f7      	bne.n	8004d90 <_fwalk_sglue+0xc>
 8004da0:	4630      	mov	r0, r6
 8004da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da6:	89ab      	ldrh	r3, [r5, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d907      	bls.n	8004dbc <_fwalk_sglue+0x38>
 8004dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db0:	3301      	adds	r3, #1
 8004db2:	d003      	beq.n	8004dbc <_fwalk_sglue+0x38>
 8004db4:	4629      	mov	r1, r5
 8004db6:	4638      	mov	r0, r7
 8004db8:	47c0      	blx	r8
 8004dba:	4306      	orrs	r6, r0
 8004dbc:	3568      	adds	r5, #104	@ 0x68
 8004dbe:	e7e9      	b.n	8004d94 <_fwalk_sglue+0x10>

08004dc0 <iprintf>:
 8004dc0:	b40f      	push	{r0, r1, r2, r3}
 8004dc2:	b507      	push	{r0, r1, r2, lr}
 8004dc4:	4906      	ldr	r1, [pc, #24]	@ (8004de0 <iprintf+0x20>)
 8004dc6:	ab04      	add	r3, sp, #16
 8004dc8:	6808      	ldr	r0, [r1, #0]
 8004dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dce:	6881      	ldr	r1, [r0, #8]
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	f000 fcdf 	bl	8005794 <_vfiprintf_r>
 8004dd6:	b003      	add	sp, #12
 8004dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr
 8004de0:	20000018 	.word	0x20000018

08004de4 <_puts_r>:
 8004de4:	6a03      	ldr	r3, [r0, #32]
 8004de6:	b570      	push	{r4, r5, r6, lr}
 8004de8:	6884      	ldr	r4, [r0, #8]
 8004dea:	4605      	mov	r5, r0
 8004dec:	460e      	mov	r6, r1
 8004dee:	b90b      	cbnz	r3, 8004df4 <_puts_r+0x10>
 8004df0:	f7ff ffb0 	bl	8004d54 <__sinit>
 8004df4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004df6:	07db      	lsls	r3, r3, #31
 8004df8:	d405      	bmi.n	8004e06 <_puts_r+0x22>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	0598      	lsls	r0, r3, #22
 8004dfe:	d402      	bmi.n	8004e06 <_puts_r+0x22>
 8004e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e02:	f000 fa1c 	bl	800523e <__retarget_lock_acquire_recursive>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	0719      	lsls	r1, r3, #28
 8004e0a:	d502      	bpl.n	8004e12 <_puts_r+0x2e>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d135      	bne.n	8004e7e <_puts_r+0x9a>
 8004e12:	4621      	mov	r1, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 f8e7 	bl	8004fe8 <__swsetup_r>
 8004e1a:	b380      	cbz	r0, 8004e7e <_puts_r+0x9a>
 8004e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e22:	07da      	lsls	r2, r3, #31
 8004e24:	d405      	bmi.n	8004e32 <_puts_r+0x4e>
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	059b      	lsls	r3, r3, #22
 8004e2a:	d402      	bmi.n	8004e32 <_puts_r+0x4e>
 8004e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e2e:	f000 fa07 	bl	8005240 <__retarget_lock_release_recursive>
 8004e32:	4628      	mov	r0, r5
 8004e34:	bd70      	pop	{r4, r5, r6, pc}
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	da04      	bge.n	8004e44 <_puts_r+0x60>
 8004e3a:	69a2      	ldr	r2, [r4, #24]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	dc17      	bgt.n	8004e70 <_puts_r+0x8c>
 8004e40:	290a      	cmp	r1, #10
 8004e42:	d015      	beq.n	8004e70 <_puts_r+0x8c>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	6022      	str	r2, [r4, #0]
 8004e4a:	7019      	strb	r1, [r3, #0]
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e52:	3b01      	subs	r3, #1
 8004e54:	60a3      	str	r3, [r4, #8]
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d1ed      	bne.n	8004e36 <_puts_r+0x52>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da11      	bge.n	8004e82 <_puts_r+0x9e>
 8004e5e:	4622      	mov	r2, r4
 8004e60:	210a      	movs	r1, #10
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f881 	bl	8004f6a <__swbuf_r>
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0d7      	beq.n	8004e1c <_puts_r+0x38>
 8004e6c:	250a      	movs	r5, #10
 8004e6e:	e7d7      	b.n	8004e20 <_puts_r+0x3c>
 8004e70:	4622      	mov	r2, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f879 	bl	8004f6a <__swbuf_r>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d1e7      	bne.n	8004e4c <_puts_r+0x68>
 8004e7c:	e7ce      	b.n	8004e1c <_puts_r+0x38>
 8004e7e:	3e01      	subs	r6, #1
 8004e80:	e7e4      	b.n	8004e4c <_puts_r+0x68>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	6022      	str	r2, [r4, #0]
 8004e88:	220a      	movs	r2, #10
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e7ee      	b.n	8004e6c <_puts_r+0x88>
	...

08004e90 <puts>:
 8004e90:	4b02      	ldr	r3, [pc, #8]	@ (8004e9c <puts+0xc>)
 8004e92:	4601      	mov	r1, r0
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	f7ff bfa5 	b.w	8004de4 <_puts_r>
 8004e9a:	bf00      	nop
 8004e9c:	20000018 	.word	0x20000018

08004ea0 <siprintf>:
 8004ea0:	b40e      	push	{r1, r2, r3}
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	b09d      	sub	sp, #116	@ 0x74
 8004ea6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	9006      	str	r0, [sp, #24]
 8004eac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004eb0:	480a      	ldr	r0, [pc, #40]	@ (8004edc <siprintf+0x3c>)
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	9104      	str	r1, [sp, #16]
 8004eb6:	490a      	ldr	r1, [pc, #40]	@ (8004ee0 <siprintf+0x40>)
 8004eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ebc:	9105      	str	r1, [sp, #20]
 8004ebe:	2400      	movs	r4, #0
 8004ec0:	a902      	add	r1, sp, #8
 8004ec2:	6800      	ldr	r0, [r0, #0]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ec8:	f000 fb3e 	bl	8005548 <_svfiprintf_r>
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	701c      	strb	r4, [r3, #0]
 8004ed0:	b01d      	add	sp, #116	@ 0x74
 8004ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed6:	b003      	add	sp, #12
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000018 	.word	0x20000018
 8004ee0:	ffff0208 	.word	0xffff0208

08004ee4 <__sread>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	f000 f958 	bl	80051a0 <_read_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	bfab      	itete	ge
 8004ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ef8:	181b      	addge	r3, r3, r0
 8004efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004efe:	bfac      	ite	ge
 8004f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f02:	81a3      	strhlt	r3, [r4, #12]
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <__swrite>:
 8004f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	898b      	ldrh	r3, [r1, #12]
 8004f0e:	05db      	lsls	r3, r3, #23
 8004f10:	4605      	mov	r5, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4616      	mov	r6, r2
 8004f16:	d505      	bpl.n	8004f24 <__swrite+0x1e>
 8004f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 f92c 	bl	800517c <_lseek_r>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	4632      	mov	r2, r6
 8004f32:	463b      	mov	r3, r7
 8004f34:	4628      	mov	r0, r5
 8004f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	f000 b943 	b.w	80051c4 <_write_r>

08004f3e <__sseek>:
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	460c      	mov	r4, r1
 8004f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f46:	f000 f919 	bl	800517c <_lseek_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	bf15      	itete	ne
 8004f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f5a:	81a3      	strheq	r3, [r4, #12]
 8004f5c:	bf18      	it	ne
 8004f5e:	81a3      	strhne	r3, [r4, #12]
 8004f60:	bd10      	pop	{r4, pc}

08004f62 <__sclose>:
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 b8f9 	b.w	800515c <_close_r>

08004f6a <__swbuf_r>:
 8004f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	4614      	mov	r4, r2
 8004f70:	4605      	mov	r5, r0
 8004f72:	b118      	cbz	r0, 8004f7c <__swbuf_r+0x12>
 8004f74:	6a03      	ldr	r3, [r0, #32]
 8004f76:	b90b      	cbnz	r3, 8004f7c <__swbuf_r+0x12>
 8004f78:	f7ff feec 	bl	8004d54 <__sinit>
 8004f7c:	69a3      	ldr	r3, [r4, #24]
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	071a      	lsls	r2, r3, #28
 8004f84:	d501      	bpl.n	8004f8a <__swbuf_r+0x20>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	b943      	cbnz	r3, 8004f9c <__swbuf_r+0x32>
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 f82b 	bl	8004fe8 <__swsetup_r>
 8004f92:	b118      	cbz	r0, 8004f9c <__swbuf_r+0x32>
 8004f94:	f04f 37ff 	mov.w	r7, #4294967295
 8004f98:	4638      	mov	r0, r7
 8004f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	6922      	ldr	r2, [r4, #16]
 8004fa0:	1a98      	subs	r0, r3, r2
 8004fa2:	6963      	ldr	r3, [r4, #20]
 8004fa4:	b2f6      	uxtb	r6, r6
 8004fa6:	4283      	cmp	r3, r0
 8004fa8:	4637      	mov	r7, r6
 8004faa:	dc05      	bgt.n	8004fb8 <__swbuf_r+0x4e>
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 ff18 	bl	8005de4 <_fflush_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1ed      	bne.n	8004f94 <__swbuf_r+0x2a>
 8004fb8:	68a3      	ldr	r3, [r4, #8]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	60a3      	str	r3, [r4, #8]
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	701e      	strb	r6, [r3, #0]
 8004fc6:	6962      	ldr	r2, [r4, #20]
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d004      	beq.n	8004fd8 <__swbuf_r+0x6e>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d5e1      	bpl.n	8004f98 <__swbuf_r+0x2e>
 8004fd4:	2e0a      	cmp	r6, #10
 8004fd6:	d1df      	bne.n	8004f98 <__swbuf_r+0x2e>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 ff02 	bl	8005de4 <_fflush_r>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d0d9      	beq.n	8004f98 <__swbuf_r+0x2e>
 8004fe4:	e7d6      	b.n	8004f94 <__swbuf_r+0x2a>
	...

08004fe8 <__swsetup_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <__swsetup_r+0xa8>)
 8004fec:	4605      	mov	r5, r0
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	b118      	cbz	r0, 8004ffc <__swsetup_r+0x14>
 8004ff4:	6a03      	ldr	r3, [r0, #32]
 8004ff6:	b90b      	cbnz	r3, 8004ffc <__swsetup_r+0x14>
 8004ff8:	f7ff feac 	bl	8004d54 <__sinit>
 8004ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005000:	0719      	lsls	r1, r3, #28
 8005002:	d422      	bmi.n	800504a <__swsetup_r+0x62>
 8005004:	06da      	lsls	r2, r3, #27
 8005006:	d407      	bmi.n	8005018 <__swsetup_r+0x30>
 8005008:	2209      	movs	r2, #9
 800500a:	602a      	str	r2, [r5, #0]
 800500c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e033      	b.n	8005080 <__swsetup_r+0x98>
 8005018:	0758      	lsls	r0, r3, #29
 800501a:	d512      	bpl.n	8005042 <__swsetup_r+0x5a>
 800501c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800501e:	b141      	cbz	r1, 8005032 <__swsetup_r+0x4a>
 8005020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005024:	4299      	cmp	r1, r3
 8005026:	d002      	beq.n	800502e <__swsetup_r+0x46>
 8005028:	4628      	mov	r0, r5
 800502a:	f000 f931 	bl	8005290 <_free_r>
 800502e:	2300      	movs	r3, #0
 8005030:	6363      	str	r3, [r4, #52]	@ 0x34
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	2300      	movs	r3, #0
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	b94b      	cbnz	r3, 8005062 <__swsetup_r+0x7a>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005058:	d003      	beq.n	8005062 <__swsetup_r+0x7a>
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 ff21 	bl	8005ea4 <__smakebuf_r>
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	f013 0201 	ands.w	r2, r3, #1
 800506a:	d00a      	beq.n	8005082 <__swsetup_r+0x9a>
 800506c:	2200      	movs	r2, #0
 800506e:	60a2      	str	r2, [r4, #8]
 8005070:	6962      	ldr	r2, [r4, #20]
 8005072:	4252      	negs	r2, r2
 8005074:	61a2      	str	r2, [r4, #24]
 8005076:	6922      	ldr	r2, [r4, #16]
 8005078:	b942      	cbnz	r2, 800508c <__swsetup_r+0xa4>
 800507a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800507e:	d1c5      	bne.n	800500c <__swsetup_r+0x24>
 8005080:	bd38      	pop	{r3, r4, r5, pc}
 8005082:	0799      	lsls	r1, r3, #30
 8005084:	bf58      	it	pl
 8005086:	6962      	ldrpl	r2, [r4, #20]
 8005088:	60a2      	str	r2, [r4, #8]
 800508a:	e7f4      	b.n	8005076 <__swsetup_r+0x8e>
 800508c:	2000      	movs	r0, #0
 800508e:	e7f7      	b.n	8005080 <__swsetup_r+0x98>
 8005090:	20000018 	.word	0x20000018

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <strtok>:
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <strtok+0x5c>)
 80050a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	681f      	ldr	r7, [r3, #0]
 80050ac:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80050ae:	4605      	mov	r5, r0
 80050b0:	460e      	mov	r6, r1
 80050b2:	b9ec      	cbnz	r4, 80050f0 <strtok+0x4c>
 80050b4:	2050      	movs	r0, #80	@ 0x50
 80050b6:	f000 f935 	bl	8005324 <malloc>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6478      	str	r0, [r7, #68]	@ 0x44
 80050be:	b920      	cbnz	r0, 80050ca <strtok+0x26>
 80050c0:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <strtok+0x60>)
 80050c2:	4811      	ldr	r0, [pc, #68]	@ (8005108 <strtok+0x64>)
 80050c4:	215b      	movs	r1, #91	@ 0x5b
 80050c6:	f000 f8c5 	bl	8005254 <__assert_func>
 80050ca:	e9c0 4400 	strd	r4, r4, [r0]
 80050ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80050d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80050d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80050da:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80050de:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80050e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80050e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80050ea:	6184      	str	r4, [r0, #24]
 80050ec:	7704      	strb	r4, [r0, #28]
 80050ee:	6244      	str	r4, [r0, #36]	@ 0x24
 80050f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	2301      	movs	r3, #1
 80050f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	f000 b806 	b.w	800510c <__strtok_r>
 8005100:	20000018 	.word	0x20000018
 8005104:	080061a0 	.word	0x080061a0
 8005108:	080061b7 	.word	0x080061b7

0800510c <__strtok_r>:
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	b908      	cbnz	r0, 8005116 <__strtok_r+0xa>
 8005112:	6814      	ldr	r4, [r2, #0]
 8005114:	b144      	cbz	r4, 8005128 <__strtok_r+0x1c>
 8005116:	4620      	mov	r0, r4
 8005118:	f814 5b01 	ldrb.w	r5, [r4], #1
 800511c:	460f      	mov	r7, r1
 800511e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005122:	b91e      	cbnz	r6, 800512c <__strtok_r+0x20>
 8005124:	b965      	cbnz	r5, 8005140 <__strtok_r+0x34>
 8005126:	6015      	str	r5, [r2, #0]
 8005128:	2000      	movs	r0, #0
 800512a:	e005      	b.n	8005138 <__strtok_r+0x2c>
 800512c:	42b5      	cmp	r5, r6
 800512e:	d1f6      	bne.n	800511e <__strtok_r+0x12>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <__strtok_r+0xa>
 8005134:	6014      	str	r4, [r2, #0]
 8005136:	7003      	strb	r3, [r0, #0]
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513a:	461c      	mov	r4, r3
 800513c:	e00c      	b.n	8005158 <__strtok_r+0x4c>
 800513e:	b91d      	cbnz	r5, 8005148 <__strtok_r+0x3c>
 8005140:	4627      	mov	r7, r4
 8005142:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005146:	460e      	mov	r6, r1
 8005148:	f816 5b01 	ldrb.w	r5, [r6], #1
 800514c:	42ab      	cmp	r3, r5
 800514e:	d1f6      	bne.n	800513e <__strtok_r+0x32>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f2      	beq.n	800513a <__strtok_r+0x2e>
 8005154:	2300      	movs	r3, #0
 8005156:	703b      	strb	r3, [r7, #0]
 8005158:	6014      	str	r4, [r2, #0]
 800515a:	e7ed      	b.n	8005138 <__strtok_r+0x2c>

0800515c <_close_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d06      	ldr	r5, [pc, #24]	@ (8005178 <_close_r+0x1c>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fc fafc 	bl	8001764 <_close>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_close_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_close_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000378 	.word	0x20000378

0800517c <_lseek_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	@ (800519c <_lseek_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fc fb11 	bl	80017b2 <_lseek>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_lseek_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_lseek_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000378 	.word	0x20000378

080051a0 <_read_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	@ (80051c0 <_read_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fc fa9f 	bl	80016f2 <_read>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_read_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_read_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000378 	.word	0x20000378

080051c4 <_write_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	@ (80051e4 <_write_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fc faaa 	bl	800172c <_write>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_write_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_write_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000378 	.word	0x20000378

080051e8 <__errno>:
 80051e8:	4b01      	ldr	r3, [pc, #4]	@ (80051f0 <__errno+0x8>)
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000018 	.word	0x20000018

080051f4 <__libc_init_array>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4d0d      	ldr	r5, [pc, #52]	@ (800522c <__libc_init_array+0x38>)
 80051f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005230 <__libc_init_array+0x3c>)
 80051fa:	1b64      	subs	r4, r4, r5
 80051fc:	10a4      	asrs	r4, r4, #2
 80051fe:	2600      	movs	r6, #0
 8005200:	42a6      	cmp	r6, r4
 8005202:	d109      	bne.n	8005218 <__libc_init_array+0x24>
 8005204:	4d0b      	ldr	r5, [pc, #44]	@ (8005234 <__libc_init_array+0x40>)
 8005206:	4c0c      	ldr	r4, [pc, #48]	@ (8005238 <__libc_init_array+0x44>)
 8005208:	f000 ff64 	bl	80060d4 <_init>
 800520c:	1b64      	subs	r4, r4, r5
 800520e:	10a4      	asrs	r4, r4, #2
 8005210:	2600      	movs	r6, #0
 8005212:	42a6      	cmp	r6, r4
 8005214:	d105      	bne.n	8005222 <__libc_init_array+0x2e>
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	f855 3b04 	ldr.w	r3, [r5], #4
 800521c:	4798      	blx	r3
 800521e:	3601      	adds	r6, #1
 8005220:	e7ee      	b.n	8005200 <__libc_init_array+0xc>
 8005222:	f855 3b04 	ldr.w	r3, [r5], #4
 8005226:	4798      	blx	r3
 8005228:	3601      	adds	r6, #1
 800522a:	e7f2      	b.n	8005212 <__libc_init_array+0x1e>
 800522c:	08006288 	.word	0x08006288
 8005230:	08006288 	.word	0x08006288
 8005234:	08006288 	.word	0x08006288
 8005238:	0800628c 	.word	0x0800628c

0800523c <__retarget_lock_init_recursive>:
 800523c:	4770      	bx	lr

0800523e <__retarget_lock_acquire_recursive>:
 800523e:	4770      	bx	lr

08005240 <__retarget_lock_release_recursive>:
 8005240:	4770      	bx	lr

08005242 <strcpy>:
 8005242:	4603      	mov	r3, r0
 8005244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005248:	f803 2b01 	strb.w	r2, [r3], #1
 800524c:	2a00      	cmp	r2, #0
 800524e:	d1f9      	bne.n	8005244 <strcpy+0x2>
 8005250:	4770      	bx	lr
	...

08005254 <__assert_func>:
 8005254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005256:	4614      	mov	r4, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <__assert_func+0x2c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4605      	mov	r5, r0
 8005260:	68d8      	ldr	r0, [r3, #12]
 8005262:	b14c      	cbz	r4, 8005278 <__assert_func+0x24>
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <__assert_func+0x30>)
 8005266:	9100      	str	r1, [sp, #0]
 8005268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800526c:	4906      	ldr	r1, [pc, #24]	@ (8005288 <__assert_func+0x34>)
 800526e:	462b      	mov	r3, r5
 8005270:	f000 fde0 	bl	8005e34 <fiprintf>
 8005274:	f000 feac 	bl	8005fd0 <abort>
 8005278:	4b04      	ldr	r3, [pc, #16]	@ (800528c <__assert_func+0x38>)
 800527a:	461c      	mov	r4, r3
 800527c:	e7f3      	b.n	8005266 <__assert_func+0x12>
 800527e:	bf00      	nop
 8005280:	20000018 	.word	0x20000018
 8005284:	08006211 	.word	0x08006211
 8005288:	0800621e 	.word	0x0800621e
 800528c:	0800624c 	.word	0x0800624c

08005290 <_free_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4605      	mov	r5, r0
 8005294:	2900      	cmp	r1, #0
 8005296:	d041      	beq.n	800531c <_free_r+0x8c>
 8005298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529c:	1f0c      	subs	r4, r1, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfb8      	it	lt
 80052a2:	18e4      	addlt	r4, r4, r3
 80052a4:	f000 f8e8 	bl	8005478 <__malloc_lock>
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <_free_r+0x90>)
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	b933      	cbnz	r3, 80052bc <_free_r+0x2c>
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	6014      	str	r4, [r2, #0]
 80052b2:	4628      	mov	r0, r5
 80052b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b8:	f000 b8e4 	b.w	8005484 <__malloc_unlock>
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d908      	bls.n	80052d2 <_free_r+0x42>
 80052c0:	6820      	ldr	r0, [r4, #0]
 80052c2:	1821      	adds	r1, r4, r0
 80052c4:	428b      	cmp	r3, r1
 80052c6:	bf01      	itttt	eq
 80052c8:	6819      	ldreq	r1, [r3, #0]
 80052ca:	685b      	ldreq	r3, [r3, #4]
 80052cc:	1809      	addeq	r1, r1, r0
 80052ce:	6021      	streq	r1, [r4, #0]
 80052d0:	e7ed      	b.n	80052ae <_free_r+0x1e>
 80052d2:	461a      	mov	r2, r3
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	b10b      	cbz	r3, 80052dc <_free_r+0x4c>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d9fa      	bls.n	80052d2 <_free_r+0x42>
 80052dc:	6811      	ldr	r1, [r2, #0]
 80052de:	1850      	adds	r0, r2, r1
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d10b      	bne.n	80052fc <_free_r+0x6c>
 80052e4:	6820      	ldr	r0, [r4, #0]
 80052e6:	4401      	add	r1, r0
 80052e8:	1850      	adds	r0, r2, r1
 80052ea:	4283      	cmp	r3, r0
 80052ec:	6011      	str	r1, [r2, #0]
 80052ee:	d1e0      	bne.n	80052b2 <_free_r+0x22>
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	6053      	str	r3, [r2, #4]
 80052f6:	4408      	add	r0, r1
 80052f8:	6010      	str	r0, [r2, #0]
 80052fa:	e7da      	b.n	80052b2 <_free_r+0x22>
 80052fc:	d902      	bls.n	8005304 <_free_r+0x74>
 80052fe:	230c      	movs	r3, #12
 8005300:	602b      	str	r3, [r5, #0]
 8005302:	e7d6      	b.n	80052b2 <_free_r+0x22>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	1821      	adds	r1, r4, r0
 8005308:	428b      	cmp	r3, r1
 800530a:	bf04      	itt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	bf04      	itt	eq
 8005314:	1809      	addeq	r1, r1, r0
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	6054      	str	r4, [r2, #4]
 800531a:	e7ca      	b.n	80052b2 <_free_r+0x22>
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	20000384 	.word	0x20000384

08005324 <malloc>:
 8005324:	4b02      	ldr	r3, [pc, #8]	@ (8005330 <malloc+0xc>)
 8005326:	4601      	mov	r1, r0
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	f000 b825 	b.w	8005378 <_malloc_r>
 800532e:	bf00      	nop
 8005330:	20000018 	.word	0x20000018

08005334 <sbrk_aligned>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4e0f      	ldr	r6, [pc, #60]	@ (8005374 <sbrk_aligned+0x40>)
 8005338:	460c      	mov	r4, r1
 800533a:	6831      	ldr	r1, [r6, #0]
 800533c:	4605      	mov	r5, r0
 800533e:	b911      	cbnz	r1, 8005346 <sbrk_aligned+0x12>
 8005340:	f000 fe28 	bl	8005f94 <_sbrk_r>
 8005344:	6030      	str	r0, [r6, #0]
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 fe23 	bl	8005f94 <_sbrk_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d103      	bne.n	800535a <sbrk_aligned+0x26>
 8005352:	f04f 34ff 	mov.w	r4, #4294967295
 8005356:	4620      	mov	r0, r4
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	1cc4      	adds	r4, r0, #3
 800535c:	f024 0403 	bic.w	r4, r4, #3
 8005360:	42a0      	cmp	r0, r4
 8005362:	d0f8      	beq.n	8005356 <sbrk_aligned+0x22>
 8005364:	1a21      	subs	r1, r4, r0
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fe14 	bl	8005f94 <_sbrk_r>
 800536c:	3001      	adds	r0, #1
 800536e:	d1f2      	bne.n	8005356 <sbrk_aligned+0x22>
 8005370:	e7ef      	b.n	8005352 <sbrk_aligned+0x1e>
 8005372:	bf00      	nop
 8005374:	20000380 	.word	0x20000380

08005378 <_malloc_r>:
 8005378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800537c:	1ccd      	adds	r5, r1, #3
 800537e:	f025 0503 	bic.w	r5, r5, #3
 8005382:	3508      	adds	r5, #8
 8005384:	2d0c      	cmp	r5, #12
 8005386:	bf38      	it	cc
 8005388:	250c      	movcc	r5, #12
 800538a:	2d00      	cmp	r5, #0
 800538c:	4606      	mov	r6, r0
 800538e:	db01      	blt.n	8005394 <_malloc_r+0x1c>
 8005390:	42a9      	cmp	r1, r5
 8005392:	d904      	bls.n	800539e <_malloc_r+0x26>
 8005394:	230c      	movs	r3, #12
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	2000      	movs	r0, #0
 800539a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800539e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005474 <_malloc_r+0xfc>
 80053a2:	f000 f869 	bl	8005478 <__malloc_lock>
 80053a6:	f8d8 3000 	ldr.w	r3, [r8]
 80053aa:	461c      	mov	r4, r3
 80053ac:	bb44      	cbnz	r4, 8005400 <_malloc_r+0x88>
 80053ae:	4629      	mov	r1, r5
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7ff ffbf 	bl	8005334 <sbrk_aligned>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	4604      	mov	r4, r0
 80053ba:	d158      	bne.n	800546e <_malloc_r+0xf6>
 80053bc:	f8d8 4000 	ldr.w	r4, [r8]
 80053c0:	4627      	mov	r7, r4
 80053c2:	2f00      	cmp	r7, #0
 80053c4:	d143      	bne.n	800544e <_malloc_r+0xd6>
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d04b      	beq.n	8005462 <_malloc_r+0xea>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	4639      	mov	r1, r7
 80053ce:	4630      	mov	r0, r6
 80053d0:	eb04 0903 	add.w	r9, r4, r3
 80053d4:	f000 fdde 	bl	8005f94 <_sbrk_r>
 80053d8:	4581      	cmp	r9, r0
 80053da:	d142      	bne.n	8005462 <_malloc_r+0xea>
 80053dc:	6821      	ldr	r1, [r4, #0]
 80053de:	1a6d      	subs	r5, r5, r1
 80053e0:	4629      	mov	r1, r5
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ffa6 	bl	8005334 <sbrk_aligned>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d03a      	beq.n	8005462 <_malloc_r+0xea>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	442b      	add	r3, r5
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	f8d8 3000 	ldr.w	r3, [r8]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	bb62      	cbnz	r2, 8005454 <_malloc_r+0xdc>
 80053fa:	f8c8 7000 	str.w	r7, [r8]
 80053fe:	e00f      	b.n	8005420 <_malloc_r+0xa8>
 8005400:	6822      	ldr	r2, [r4, #0]
 8005402:	1b52      	subs	r2, r2, r5
 8005404:	d420      	bmi.n	8005448 <_malloc_r+0xd0>
 8005406:	2a0b      	cmp	r2, #11
 8005408:	d917      	bls.n	800543a <_malloc_r+0xc2>
 800540a:	1961      	adds	r1, r4, r5
 800540c:	42a3      	cmp	r3, r4
 800540e:	6025      	str	r5, [r4, #0]
 8005410:	bf18      	it	ne
 8005412:	6059      	strne	r1, [r3, #4]
 8005414:	6863      	ldr	r3, [r4, #4]
 8005416:	bf08      	it	eq
 8005418:	f8c8 1000 	streq.w	r1, [r8]
 800541c:	5162      	str	r2, [r4, r5]
 800541e:	604b      	str	r3, [r1, #4]
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f82f 	bl	8005484 <__malloc_unlock>
 8005426:	f104 000b 	add.w	r0, r4, #11
 800542a:	1d23      	adds	r3, r4, #4
 800542c:	f020 0007 	bic.w	r0, r0, #7
 8005430:	1ac2      	subs	r2, r0, r3
 8005432:	bf1c      	itt	ne
 8005434:	1a1b      	subne	r3, r3, r0
 8005436:	50a3      	strne	r3, [r4, r2]
 8005438:	e7af      	b.n	800539a <_malloc_r+0x22>
 800543a:	6862      	ldr	r2, [r4, #4]
 800543c:	42a3      	cmp	r3, r4
 800543e:	bf0c      	ite	eq
 8005440:	f8c8 2000 	streq.w	r2, [r8]
 8005444:	605a      	strne	r2, [r3, #4]
 8005446:	e7eb      	b.n	8005420 <_malloc_r+0xa8>
 8005448:	4623      	mov	r3, r4
 800544a:	6864      	ldr	r4, [r4, #4]
 800544c:	e7ae      	b.n	80053ac <_malloc_r+0x34>
 800544e:	463c      	mov	r4, r7
 8005450:	687f      	ldr	r7, [r7, #4]
 8005452:	e7b6      	b.n	80053c2 <_malloc_r+0x4a>
 8005454:	461a      	mov	r2, r3
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	42a3      	cmp	r3, r4
 800545a:	d1fb      	bne.n	8005454 <_malloc_r+0xdc>
 800545c:	2300      	movs	r3, #0
 800545e:	6053      	str	r3, [r2, #4]
 8005460:	e7de      	b.n	8005420 <_malloc_r+0xa8>
 8005462:	230c      	movs	r3, #12
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	4630      	mov	r0, r6
 8005468:	f000 f80c 	bl	8005484 <__malloc_unlock>
 800546c:	e794      	b.n	8005398 <_malloc_r+0x20>
 800546e:	6005      	str	r5, [r0, #0]
 8005470:	e7d6      	b.n	8005420 <_malloc_r+0xa8>
 8005472:	bf00      	nop
 8005474:	20000384 	.word	0x20000384

08005478 <__malloc_lock>:
 8005478:	4801      	ldr	r0, [pc, #4]	@ (8005480 <__malloc_lock+0x8>)
 800547a:	f7ff bee0 	b.w	800523e <__retarget_lock_acquire_recursive>
 800547e:	bf00      	nop
 8005480:	2000037c 	.word	0x2000037c

08005484 <__malloc_unlock>:
 8005484:	4801      	ldr	r0, [pc, #4]	@ (800548c <__malloc_unlock+0x8>)
 8005486:	f7ff bedb 	b.w	8005240 <__retarget_lock_release_recursive>
 800548a:	bf00      	nop
 800548c:	2000037c 	.word	0x2000037c

08005490 <__ssputs_r>:
 8005490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	688e      	ldr	r6, [r1, #8]
 8005496:	461f      	mov	r7, r3
 8005498:	42be      	cmp	r6, r7
 800549a:	680b      	ldr	r3, [r1, #0]
 800549c:	4682      	mov	sl, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4690      	mov	r8, r2
 80054a2:	d82d      	bhi.n	8005500 <__ssputs_r+0x70>
 80054a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054ac:	d026      	beq.n	80054fc <__ssputs_r+0x6c>
 80054ae:	6965      	ldr	r5, [r4, #20]
 80054b0:	6909      	ldr	r1, [r1, #16]
 80054b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054b6:	eba3 0901 	sub.w	r9, r3, r1
 80054ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054be:	1c7b      	adds	r3, r7, #1
 80054c0:	444b      	add	r3, r9
 80054c2:	106d      	asrs	r5, r5, #1
 80054c4:	429d      	cmp	r5, r3
 80054c6:	bf38      	it	cc
 80054c8:	461d      	movcc	r5, r3
 80054ca:	0553      	lsls	r3, r2, #21
 80054cc:	d527      	bpl.n	800551e <__ssputs_r+0x8e>
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7ff ff52 	bl	8005378 <_malloc_r>
 80054d4:	4606      	mov	r6, r0
 80054d6:	b360      	cbz	r0, 8005532 <__ssputs_r+0xa2>
 80054d8:	6921      	ldr	r1, [r4, #16]
 80054da:	464a      	mov	r2, r9
 80054dc:	f000 fd6a 	bl	8005fb4 <memcpy>
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	6126      	str	r6, [r4, #16]
 80054ee:	6165      	str	r5, [r4, #20]
 80054f0:	444e      	add	r6, r9
 80054f2:	eba5 0509 	sub.w	r5, r5, r9
 80054f6:	6026      	str	r6, [r4, #0]
 80054f8:	60a5      	str	r5, [r4, #8]
 80054fa:	463e      	mov	r6, r7
 80054fc:	42be      	cmp	r6, r7
 80054fe:	d900      	bls.n	8005502 <__ssputs_r+0x72>
 8005500:	463e      	mov	r6, r7
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	4632      	mov	r2, r6
 8005506:	4641      	mov	r1, r8
 8005508:	f000 fd08 	bl	8005f1c <memmove>
 800550c:	68a3      	ldr	r3, [r4, #8]
 800550e:	1b9b      	subs	r3, r3, r6
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	4433      	add	r3, r6
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2000      	movs	r0, #0
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551e:	462a      	mov	r2, r5
 8005520:	f000 fd5d 	bl	8005fde <_realloc_r>
 8005524:	4606      	mov	r6, r0
 8005526:	2800      	cmp	r0, #0
 8005528:	d1e0      	bne.n	80054ec <__ssputs_r+0x5c>
 800552a:	6921      	ldr	r1, [r4, #16]
 800552c:	4650      	mov	r0, sl
 800552e:	f7ff feaf 	bl	8005290 <_free_r>
 8005532:	230c      	movs	r3, #12
 8005534:	f8ca 3000 	str.w	r3, [sl]
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e7e9      	b.n	800551a <__ssputs_r+0x8a>
	...

08005548 <_svfiprintf_r>:
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	4698      	mov	r8, r3
 800554e:	898b      	ldrh	r3, [r1, #12]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	b09d      	sub	sp, #116	@ 0x74
 8005554:	4607      	mov	r7, r0
 8005556:	460d      	mov	r5, r1
 8005558:	4614      	mov	r4, r2
 800555a:	d510      	bpl.n	800557e <_svfiprintf_r+0x36>
 800555c:	690b      	ldr	r3, [r1, #16]
 800555e:	b973      	cbnz	r3, 800557e <_svfiprintf_r+0x36>
 8005560:	2140      	movs	r1, #64	@ 0x40
 8005562:	f7ff ff09 	bl	8005378 <_malloc_r>
 8005566:	6028      	str	r0, [r5, #0]
 8005568:	6128      	str	r0, [r5, #16]
 800556a:	b930      	cbnz	r0, 800557a <_svfiprintf_r+0x32>
 800556c:	230c      	movs	r3, #12
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	b01d      	add	sp, #116	@ 0x74
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557a:	2340      	movs	r3, #64	@ 0x40
 800557c:	616b      	str	r3, [r5, #20]
 800557e:	2300      	movs	r3, #0
 8005580:	9309      	str	r3, [sp, #36]	@ 0x24
 8005582:	2320      	movs	r3, #32
 8005584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005588:	f8cd 800c 	str.w	r8, [sp, #12]
 800558c:	2330      	movs	r3, #48	@ 0x30
 800558e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800572c <_svfiprintf_r+0x1e4>
 8005592:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005596:	f04f 0901 	mov.w	r9, #1
 800559a:	4623      	mov	r3, r4
 800559c:	469a      	mov	sl, r3
 800559e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a2:	b10a      	cbz	r2, 80055a8 <_svfiprintf_r+0x60>
 80055a4:	2a25      	cmp	r2, #37	@ 0x25
 80055a6:	d1f9      	bne.n	800559c <_svfiprintf_r+0x54>
 80055a8:	ebba 0b04 	subs.w	fp, sl, r4
 80055ac:	d00b      	beq.n	80055c6 <_svfiprintf_r+0x7e>
 80055ae:	465b      	mov	r3, fp
 80055b0:	4622      	mov	r2, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ff6b 	bl	8005490 <__ssputs_r>
 80055ba:	3001      	adds	r0, #1
 80055bc:	f000 80a7 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c2:	445a      	add	r2, fp
 80055c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 809f 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055da:	f10a 0a01 	add.w	sl, sl, #1
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e8:	4654      	mov	r4, sl
 80055ea:	2205      	movs	r2, #5
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	484e      	ldr	r0, [pc, #312]	@ (800572c <_svfiprintf_r+0x1e4>)
 80055f2:	f7fa fe0d 	bl	8000210 <memchr>
 80055f6:	9a04      	ldr	r2, [sp, #16]
 80055f8:	b9d8      	cbnz	r0, 8005632 <_svfiprintf_r+0xea>
 80055fa:	06d0      	lsls	r0, r2, #27
 80055fc:	bf44      	itt	mi
 80055fe:	2320      	movmi	r3, #32
 8005600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005604:	0711      	lsls	r1, r2, #28
 8005606:	bf44      	itt	mi
 8005608:	232b      	movmi	r3, #43	@ 0x2b
 800560a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560e:	f89a 3000 	ldrb.w	r3, [sl]
 8005612:	2b2a      	cmp	r3, #42	@ 0x2a
 8005614:	d015      	beq.n	8005642 <_svfiprintf_r+0xfa>
 8005616:	9a07      	ldr	r2, [sp, #28]
 8005618:	4654      	mov	r4, sl
 800561a:	2000      	movs	r0, #0
 800561c:	f04f 0c0a 	mov.w	ip, #10
 8005620:	4621      	mov	r1, r4
 8005622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005626:	3b30      	subs	r3, #48	@ 0x30
 8005628:	2b09      	cmp	r3, #9
 800562a:	d94b      	bls.n	80056c4 <_svfiprintf_r+0x17c>
 800562c:	b1b0      	cbz	r0, 800565c <_svfiprintf_r+0x114>
 800562e:	9207      	str	r2, [sp, #28]
 8005630:	e014      	b.n	800565c <_svfiprintf_r+0x114>
 8005632:	eba0 0308 	sub.w	r3, r0, r8
 8005636:	fa09 f303 	lsl.w	r3, r9, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	46a2      	mov	sl, r4
 8005640:	e7d2      	b.n	80055e8 <_svfiprintf_r+0xa0>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9103      	str	r1, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfbb      	ittet	lt
 800564e:	425b      	neglt	r3, r3
 8005650:	f042 0202 	orrlt.w	r2, r2, #2
 8005654:	9307      	strge	r3, [sp, #28]
 8005656:	9307      	strlt	r3, [sp, #28]
 8005658:	bfb8      	it	lt
 800565a:	9204      	strlt	r2, [sp, #16]
 800565c:	7823      	ldrb	r3, [r4, #0]
 800565e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005660:	d10a      	bne.n	8005678 <_svfiprintf_r+0x130>
 8005662:	7863      	ldrb	r3, [r4, #1]
 8005664:	2b2a      	cmp	r3, #42	@ 0x2a
 8005666:	d132      	bne.n	80056ce <_svfiprintf_r+0x186>
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	9203      	str	r2, [sp, #12]
 8005670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005674:	3402      	adds	r4, #2
 8005676:	9305      	str	r3, [sp, #20]
 8005678:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800573c <_svfiprintf_r+0x1f4>
 800567c:	7821      	ldrb	r1, [r4, #0]
 800567e:	2203      	movs	r2, #3
 8005680:	4650      	mov	r0, sl
 8005682:	f7fa fdc5 	bl	8000210 <memchr>
 8005686:	b138      	cbz	r0, 8005698 <_svfiprintf_r+0x150>
 8005688:	9b04      	ldr	r3, [sp, #16]
 800568a:	eba0 000a 	sub.w	r0, r0, sl
 800568e:	2240      	movs	r2, #64	@ 0x40
 8005690:	4082      	lsls	r2, r0
 8005692:	4313      	orrs	r3, r2
 8005694:	3401      	adds	r4, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	4824      	ldr	r0, [pc, #144]	@ (8005730 <_svfiprintf_r+0x1e8>)
 800569e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a2:	2206      	movs	r2, #6
 80056a4:	f7fa fdb4 	bl	8000210 <memchr>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d036      	beq.n	800571a <_svfiprintf_r+0x1d2>
 80056ac:	4b21      	ldr	r3, [pc, #132]	@ (8005734 <_svfiprintf_r+0x1ec>)
 80056ae:	bb1b      	cbnz	r3, 80056f8 <_svfiprintf_r+0x1b0>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	3307      	adds	r3, #7
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	3308      	adds	r3, #8
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056be:	4433      	add	r3, r6
 80056c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c2:	e76a      	b.n	800559a <_svfiprintf_r+0x52>
 80056c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	e7a8      	b.n	8005620 <_svfiprintf_r+0xd8>
 80056ce:	2300      	movs	r3, #0
 80056d0:	3401      	adds	r4, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e0:	3a30      	subs	r2, #48	@ 0x30
 80056e2:	2a09      	cmp	r2, #9
 80056e4:	d903      	bls.n	80056ee <_svfiprintf_r+0x1a6>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0c6      	beq.n	8005678 <_svfiprintf_r+0x130>
 80056ea:	9105      	str	r1, [sp, #20]
 80056ec:	e7c4      	b.n	8005678 <_svfiprintf_r+0x130>
 80056ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	e7f0      	b.n	80056da <_svfiprintf_r+0x192>
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005738 <_svfiprintf_r+0x1f0>)
 8005700:	a904      	add	r1, sp, #16
 8005702:	4638      	mov	r0, r7
 8005704:	f3af 8000 	nop.w
 8005708:	1c42      	adds	r2, r0, #1
 800570a:	4606      	mov	r6, r0
 800570c:	d1d6      	bne.n	80056bc <_svfiprintf_r+0x174>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	065b      	lsls	r3, r3, #25
 8005712:	f53f af2d 	bmi.w	8005570 <_svfiprintf_r+0x28>
 8005716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005718:	e72c      	b.n	8005574 <_svfiprintf_r+0x2c>
 800571a:	ab03      	add	r3, sp, #12
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	462a      	mov	r2, r5
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <_svfiprintf_r+0x1f0>)
 8005722:	a904      	add	r1, sp, #16
 8005724:	4638      	mov	r0, r7
 8005726:	f000 f9bb 	bl	8005aa0 <_printf_i>
 800572a:	e7ed      	b.n	8005708 <_svfiprintf_r+0x1c0>
 800572c:	0800624d 	.word	0x0800624d
 8005730:	08006257 	.word	0x08006257
 8005734:	00000000 	.word	0x00000000
 8005738:	08005491 	.word	0x08005491
 800573c:	08006253 	.word	0x08006253

08005740 <__sfputc_r>:
 8005740:	6893      	ldr	r3, [r2, #8]
 8005742:	3b01      	subs	r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	b410      	push	{r4}
 8005748:	6093      	str	r3, [r2, #8]
 800574a:	da08      	bge.n	800575e <__sfputc_r+0x1e>
 800574c:	6994      	ldr	r4, [r2, #24]
 800574e:	42a3      	cmp	r3, r4
 8005750:	db01      	blt.n	8005756 <__sfputc_r+0x16>
 8005752:	290a      	cmp	r1, #10
 8005754:	d103      	bne.n	800575e <__sfputc_r+0x1e>
 8005756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575a:	f7ff bc06 	b.w	8004f6a <__swbuf_r>
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	1c58      	adds	r0, r3, #1
 8005762:	6010      	str	r0, [r2, #0]
 8005764:	7019      	strb	r1, [r3, #0]
 8005766:	4608      	mov	r0, r1
 8005768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576c:	4770      	bx	lr

0800576e <__sfputs_r>:
 800576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005770:	4606      	mov	r6, r0
 8005772:	460f      	mov	r7, r1
 8005774:	4614      	mov	r4, r2
 8005776:	18d5      	adds	r5, r2, r3
 8005778:	42ac      	cmp	r4, r5
 800577a:	d101      	bne.n	8005780 <__sfputs_r+0x12>
 800577c:	2000      	movs	r0, #0
 800577e:	e007      	b.n	8005790 <__sfputs_r+0x22>
 8005780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005784:	463a      	mov	r2, r7
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffda 	bl	8005740 <__sfputc_r>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d1f3      	bne.n	8005778 <__sfputs_r+0xa>
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005794 <_vfiprintf_r>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	460d      	mov	r5, r1
 800579a:	b09d      	sub	sp, #116	@ 0x74
 800579c:	4614      	mov	r4, r2
 800579e:	4698      	mov	r8, r3
 80057a0:	4606      	mov	r6, r0
 80057a2:	b118      	cbz	r0, 80057ac <_vfiprintf_r+0x18>
 80057a4:	6a03      	ldr	r3, [r0, #32]
 80057a6:	b90b      	cbnz	r3, 80057ac <_vfiprintf_r+0x18>
 80057a8:	f7ff fad4 	bl	8004d54 <__sinit>
 80057ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057ae:	07d9      	lsls	r1, r3, #31
 80057b0:	d405      	bmi.n	80057be <_vfiprintf_r+0x2a>
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	059a      	lsls	r2, r3, #22
 80057b6:	d402      	bmi.n	80057be <_vfiprintf_r+0x2a>
 80057b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ba:	f7ff fd40 	bl	800523e <__retarget_lock_acquire_recursive>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	d501      	bpl.n	80057c8 <_vfiprintf_r+0x34>
 80057c4:	692b      	ldr	r3, [r5, #16]
 80057c6:	b99b      	cbnz	r3, 80057f0 <_vfiprintf_r+0x5c>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7ff fc0c 	bl	8004fe8 <__swsetup_r>
 80057d0:	b170      	cbz	r0, 80057f0 <_vfiprintf_r+0x5c>
 80057d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057d4:	07dc      	lsls	r4, r3, #31
 80057d6:	d504      	bpl.n	80057e2 <_vfiprintf_r+0x4e>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	b01d      	add	sp, #116	@ 0x74
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e2:	89ab      	ldrh	r3, [r5, #12]
 80057e4:	0598      	lsls	r0, r3, #22
 80057e6:	d4f7      	bmi.n	80057d8 <_vfiprintf_r+0x44>
 80057e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ea:	f7ff fd29 	bl	8005240 <__retarget_lock_release_recursive>
 80057ee:	e7f3      	b.n	80057d8 <_vfiprintf_r+0x44>
 80057f0:	2300      	movs	r3, #0
 80057f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f4:	2320      	movs	r3, #32
 80057f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fe:	2330      	movs	r3, #48	@ 0x30
 8005800:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80059b0 <_vfiprintf_r+0x21c>
 8005804:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005808:	f04f 0901 	mov.w	r9, #1
 800580c:	4623      	mov	r3, r4
 800580e:	469a      	mov	sl, r3
 8005810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005814:	b10a      	cbz	r2, 800581a <_vfiprintf_r+0x86>
 8005816:	2a25      	cmp	r2, #37	@ 0x25
 8005818:	d1f9      	bne.n	800580e <_vfiprintf_r+0x7a>
 800581a:	ebba 0b04 	subs.w	fp, sl, r4
 800581e:	d00b      	beq.n	8005838 <_vfiprintf_r+0xa4>
 8005820:	465b      	mov	r3, fp
 8005822:	4622      	mov	r2, r4
 8005824:	4629      	mov	r1, r5
 8005826:	4630      	mov	r0, r6
 8005828:	f7ff ffa1 	bl	800576e <__sfputs_r>
 800582c:	3001      	adds	r0, #1
 800582e:	f000 80a7 	beq.w	8005980 <_vfiprintf_r+0x1ec>
 8005832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005834:	445a      	add	r2, fp
 8005836:	9209      	str	r2, [sp, #36]	@ 0x24
 8005838:	f89a 3000 	ldrb.w	r3, [sl]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 809f 	beq.w	8005980 <_vfiprintf_r+0x1ec>
 8005842:	2300      	movs	r3, #0
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800584c:	f10a 0a01 	add.w	sl, sl, #1
 8005850:	9304      	str	r3, [sp, #16]
 8005852:	9307      	str	r3, [sp, #28]
 8005854:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005858:	931a      	str	r3, [sp, #104]	@ 0x68
 800585a:	4654      	mov	r4, sl
 800585c:	2205      	movs	r2, #5
 800585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005862:	4853      	ldr	r0, [pc, #332]	@ (80059b0 <_vfiprintf_r+0x21c>)
 8005864:	f7fa fcd4 	bl	8000210 <memchr>
 8005868:	9a04      	ldr	r2, [sp, #16]
 800586a:	b9d8      	cbnz	r0, 80058a4 <_vfiprintf_r+0x110>
 800586c:	06d1      	lsls	r1, r2, #27
 800586e:	bf44      	itt	mi
 8005870:	2320      	movmi	r3, #32
 8005872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005876:	0713      	lsls	r3, r2, #28
 8005878:	bf44      	itt	mi
 800587a:	232b      	movmi	r3, #43	@ 0x2b
 800587c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005880:	f89a 3000 	ldrb.w	r3, [sl]
 8005884:	2b2a      	cmp	r3, #42	@ 0x2a
 8005886:	d015      	beq.n	80058b4 <_vfiprintf_r+0x120>
 8005888:	9a07      	ldr	r2, [sp, #28]
 800588a:	4654      	mov	r4, sl
 800588c:	2000      	movs	r0, #0
 800588e:	f04f 0c0a 	mov.w	ip, #10
 8005892:	4621      	mov	r1, r4
 8005894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005898:	3b30      	subs	r3, #48	@ 0x30
 800589a:	2b09      	cmp	r3, #9
 800589c:	d94b      	bls.n	8005936 <_vfiprintf_r+0x1a2>
 800589e:	b1b0      	cbz	r0, 80058ce <_vfiprintf_r+0x13a>
 80058a0:	9207      	str	r2, [sp, #28]
 80058a2:	e014      	b.n	80058ce <_vfiprintf_r+0x13a>
 80058a4:	eba0 0308 	sub.w	r3, r0, r8
 80058a8:	fa09 f303 	lsl.w	r3, r9, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	46a2      	mov	sl, r4
 80058b2:	e7d2      	b.n	800585a <_vfiprintf_r+0xc6>
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	1d19      	adds	r1, r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	9103      	str	r1, [sp, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfbb      	ittet	lt
 80058c0:	425b      	neglt	r3, r3
 80058c2:	f042 0202 	orrlt.w	r2, r2, #2
 80058c6:	9307      	strge	r3, [sp, #28]
 80058c8:	9307      	strlt	r3, [sp, #28]
 80058ca:	bfb8      	it	lt
 80058cc:	9204      	strlt	r2, [sp, #16]
 80058ce:	7823      	ldrb	r3, [r4, #0]
 80058d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80058d2:	d10a      	bne.n	80058ea <_vfiprintf_r+0x156>
 80058d4:	7863      	ldrb	r3, [r4, #1]
 80058d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d8:	d132      	bne.n	8005940 <_vfiprintf_r+0x1ac>
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	9203      	str	r2, [sp, #12]
 80058e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058e6:	3402      	adds	r4, #2
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059c0 <_vfiprintf_r+0x22c>
 80058ee:	7821      	ldrb	r1, [r4, #0]
 80058f0:	2203      	movs	r2, #3
 80058f2:	4650      	mov	r0, sl
 80058f4:	f7fa fc8c 	bl	8000210 <memchr>
 80058f8:	b138      	cbz	r0, 800590a <_vfiprintf_r+0x176>
 80058fa:	9b04      	ldr	r3, [sp, #16]
 80058fc:	eba0 000a 	sub.w	r0, r0, sl
 8005900:	2240      	movs	r2, #64	@ 0x40
 8005902:	4082      	lsls	r2, r0
 8005904:	4313      	orrs	r3, r2
 8005906:	3401      	adds	r4, #1
 8005908:	9304      	str	r3, [sp, #16]
 800590a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590e:	4829      	ldr	r0, [pc, #164]	@ (80059b4 <_vfiprintf_r+0x220>)
 8005910:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005914:	2206      	movs	r2, #6
 8005916:	f7fa fc7b 	bl	8000210 <memchr>
 800591a:	2800      	cmp	r0, #0
 800591c:	d03f      	beq.n	800599e <_vfiprintf_r+0x20a>
 800591e:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <_vfiprintf_r+0x224>)
 8005920:	bb1b      	cbnz	r3, 800596a <_vfiprintf_r+0x1d6>
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	3307      	adds	r3, #7
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	3308      	adds	r3, #8
 800592c:	9303      	str	r3, [sp, #12]
 800592e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005930:	443b      	add	r3, r7
 8005932:	9309      	str	r3, [sp, #36]	@ 0x24
 8005934:	e76a      	b.n	800580c <_vfiprintf_r+0x78>
 8005936:	fb0c 3202 	mla	r2, ip, r2, r3
 800593a:	460c      	mov	r4, r1
 800593c:	2001      	movs	r0, #1
 800593e:	e7a8      	b.n	8005892 <_vfiprintf_r+0xfe>
 8005940:	2300      	movs	r3, #0
 8005942:	3401      	adds	r4, #1
 8005944:	9305      	str	r3, [sp, #20]
 8005946:	4619      	mov	r1, r3
 8005948:	f04f 0c0a 	mov.w	ip, #10
 800594c:	4620      	mov	r0, r4
 800594e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005952:	3a30      	subs	r2, #48	@ 0x30
 8005954:	2a09      	cmp	r2, #9
 8005956:	d903      	bls.n	8005960 <_vfiprintf_r+0x1cc>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0c6      	beq.n	80058ea <_vfiprintf_r+0x156>
 800595c:	9105      	str	r1, [sp, #20]
 800595e:	e7c4      	b.n	80058ea <_vfiprintf_r+0x156>
 8005960:	fb0c 2101 	mla	r1, ip, r1, r2
 8005964:	4604      	mov	r4, r0
 8005966:	2301      	movs	r3, #1
 8005968:	e7f0      	b.n	800594c <_vfiprintf_r+0x1b8>
 800596a:	ab03      	add	r3, sp, #12
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	462a      	mov	r2, r5
 8005970:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <_vfiprintf_r+0x228>)
 8005972:	a904      	add	r1, sp, #16
 8005974:	4630      	mov	r0, r6
 8005976:	f3af 8000 	nop.w
 800597a:	4607      	mov	r7, r0
 800597c:	1c78      	adds	r0, r7, #1
 800597e:	d1d6      	bne.n	800592e <_vfiprintf_r+0x19a>
 8005980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	d405      	bmi.n	8005992 <_vfiprintf_r+0x1fe>
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	059a      	lsls	r2, r3, #22
 800598a:	d402      	bmi.n	8005992 <_vfiprintf_r+0x1fe>
 800598c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800598e:	f7ff fc57 	bl	8005240 <__retarget_lock_release_recursive>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	065b      	lsls	r3, r3, #25
 8005996:	f53f af1f 	bmi.w	80057d8 <_vfiprintf_r+0x44>
 800599a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800599c:	e71e      	b.n	80057dc <_vfiprintf_r+0x48>
 800599e:	ab03      	add	r3, sp, #12
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	462a      	mov	r2, r5
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <_vfiprintf_r+0x228>)
 80059a6:	a904      	add	r1, sp, #16
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 f879 	bl	8005aa0 <_printf_i>
 80059ae:	e7e4      	b.n	800597a <_vfiprintf_r+0x1e6>
 80059b0:	0800624d 	.word	0x0800624d
 80059b4:	08006257 	.word	0x08006257
 80059b8:	00000000 	.word	0x00000000
 80059bc:	0800576f 	.word	0x0800576f
 80059c0:	08006253 	.word	0x08006253

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4698      	mov	r8, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	3b00      	subs	r3, #0
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a20:	4641      	mov	r1, r8
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c8      	blx	r9
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	6922      	ldr	r2, [r4, #16]
 8005a2e:	f003 0306 	and.w	r3, r3, #6
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf02      	ittt	eq
 8005a36:	68e5      	ldreq	r5, [r4, #12]
 8005a38:	6833      	ldreq	r3, [r6, #0]
 8005a3a:	1aed      	subeq	r5, r5, r3
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4641      	mov	r1, r8
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c8      	blx	r9
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	@ 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4641      	mov	r1, r8
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c8      	blx	r9
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aa8:	2f78      	cmp	r7, #120	@ 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	@ 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d1 	beq.w	8005c64 <_printf_i+0x1c4>
 8005ac2:	2f58      	cmp	r7, #88	@ 0x58
 8005ac4:	f000 80b8 	beq.w	8005c38 <_printf_i+0x198>
 8005ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	@ (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c4b 	.word	0x08005c4b
 8005b10:	08005b77 	.word	0x08005b77
 8005b14:	08005c05 	.word	0x08005c05
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c6d 	.word	0x08005c6d
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b77 	.word	0x08005b77
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c0d 	.word	0x08005c0d
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6032      	str	r2, [r6, #0]
 8005b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e09c      	b.n	8005c86 <_printf_i+0x1e6>
 8005b4c:	6833      	ldr	r3, [r6, #0]
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	1d19      	adds	r1, r3, #4
 8005b52:	6031      	str	r1, [r6, #0]
 8005b54:	0606      	lsls	r6, r0, #24
 8005b56:	d501      	bpl.n	8005b5c <_printf_i+0xbc>
 8005b58:	681d      	ldr	r5, [r3, #0]
 8005b5a:	e003      	b.n	8005b64 <_printf_i+0xc4>
 8005b5c:	0645      	lsls	r5, r0, #25
 8005b5e:	d5fb      	bpl.n	8005b58 <_printf_i+0xb8>
 8005b60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	da03      	bge.n	8005b70 <_printf_i+0xd0>
 8005b68:	232d      	movs	r3, #45	@ 0x2d
 8005b6a:	426d      	negs	r5, r5
 8005b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b70:	4858      	ldr	r0, [pc, #352]	@ (8005cd4 <_printf_i+0x234>)
 8005b72:	230a      	movs	r3, #10
 8005b74:	e011      	b.n	8005b9a <_printf_i+0xfa>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	0608      	lsls	r0, r1, #24
 8005b7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b80:	d402      	bmi.n	8005b88 <_printf_i+0xe8>
 8005b82:	0649      	lsls	r1, r1, #25
 8005b84:	bf48      	it	mi
 8005b86:	b2ad      	uxthmi	r5, r5
 8005b88:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b8a:	4852      	ldr	r0, [pc, #328]	@ (8005cd4 <_printf_i+0x234>)
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	bf14      	ite	ne
 8005b90:	230a      	movne	r3, #10
 8005b92:	2308      	moveq	r3, #8
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b9a:	6866      	ldr	r6, [r4, #4]
 8005b9c:	60a6      	str	r6, [r4, #8]
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	db05      	blt.n	8005bae <_printf_i+0x10e>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	432e      	orrs	r6, r5
 8005ba6:	f021 0104 	bic.w	r1, r1, #4
 8005baa:	6021      	str	r1, [r4, #0]
 8005bac:	d04b      	beq.n	8005c46 <_printf_i+0x1a6>
 8005bae:	4616      	mov	r6, r2
 8005bb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bb4:	fb03 5711 	mls	r7, r3, r1, r5
 8005bb8:	5dc7      	ldrb	r7, [r0, r7]
 8005bba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bbe:	462f      	mov	r7, r5
 8005bc0:	42bb      	cmp	r3, r7
 8005bc2:	460d      	mov	r5, r1
 8005bc4:	d9f4      	bls.n	8005bb0 <_printf_i+0x110>
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d10b      	bne.n	8005be2 <_printf_i+0x142>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	07df      	lsls	r7, r3, #31
 8005bce:	d508      	bpl.n	8005be2 <_printf_i+0x142>
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	6861      	ldr	r1, [r4, #4]
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	bfde      	ittt	le
 8005bd8:	2330      	movle	r3, #48	@ 0x30
 8005bda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005be2:	1b92      	subs	r2, r2, r6
 8005be4:	6122      	str	r2, [r4, #16]
 8005be6:	f8cd a000 	str.w	sl, [sp]
 8005bea:	464b      	mov	r3, r9
 8005bec:	aa03      	add	r2, sp, #12
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	f7ff fee7 	bl	80059c4 <_printf_common>
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d14a      	bne.n	8005c90 <_printf_i+0x1f0>
 8005bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfe:	b004      	add	sp, #16
 8005c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	f043 0320 	orr.w	r3, r3, #32
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	4832      	ldr	r0, [pc, #200]	@ (8005cd8 <_printf_i+0x238>)
 8005c0e:	2778      	movs	r7, #120	@ 0x78
 8005c10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	6831      	ldr	r1, [r6, #0]
 8005c18:	061f      	lsls	r7, r3, #24
 8005c1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c1e:	d402      	bmi.n	8005c26 <_printf_i+0x186>
 8005c20:	065f      	lsls	r7, r3, #25
 8005c22:	bf48      	it	mi
 8005c24:	b2ad      	uxthmi	r5, r5
 8005c26:	6031      	str	r1, [r6, #0]
 8005c28:	07d9      	lsls	r1, r3, #31
 8005c2a:	bf44      	itt	mi
 8005c2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c30:	6023      	strmi	r3, [r4, #0]
 8005c32:	b11d      	cbz	r5, 8005c3c <_printf_i+0x19c>
 8005c34:	2310      	movs	r3, #16
 8005c36:	e7ad      	b.n	8005b94 <_printf_i+0xf4>
 8005c38:	4826      	ldr	r0, [pc, #152]	@ (8005cd4 <_printf_i+0x234>)
 8005c3a:	e7e9      	b.n	8005c10 <_printf_i+0x170>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f023 0320 	bic.w	r3, r3, #32
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	e7f6      	b.n	8005c34 <_printf_i+0x194>
 8005c46:	4616      	mov	r6, r2
 8005c48:	e7bd      	b.n	8005bc6 <_printf_i+0x126>
 8005c4a:	6833      	ldr	r3, [r6, #0]
 8005c4c:	6825      	ldr	r5, [r4, #0]
 8005c4e:	6961      	ldr	r1, [r4, #20]
 8005c50:	1d18      	adds	r0, r3, #4
 8005c52:	6030      	str	r0, [r6, #0]
 8005c54:	062e      	lsls	r6, r5, #24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0x1be>
 8005c5a:	6019      	str	r1, [r3, #0]
 8005c5c:	e002      	b.n	8005c64 <_printf_i+0x1c4>
 8005c5e:	0668      	lsls	r0, r5, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0x1ba>
 8005c62:	8019      	strh	r1, [r3, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	4616      	mov	r6, r2
 8005c6a:	e7bc      	b.n	8005be6 <_printf_i+0x146>
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	6032      	str	r2, [r6, #0]
 8005c72:	681e      	ldr	r6, [r3, #0]
 8005c74:	6862      	ldr	r2, [r4, #4]
 8005c76:	2100      	movs	r1, #0
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fa fac9 	bl	8000210 <memchr>
 8005c7e:	b108      	cbz	r0, 8005c84 <_printf_i+0x1e4>
 8005c80:	1b80      	subs	r0, r0, r6
 8005c82:	6060      	str	r0, [r4, #4]
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c8e:	e7aa      	b.n	8005be6 <_printf_i+0x146>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	4632      	mov	r2, r6
 8005c94:	4649      	mov	r1, r9
 8005c96:	4640      	mov	r0, r8
 8005c98:	47d0      	blx	sl
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d0ad      	beq.n	8005bfa <_printf_i+0x15a>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	079b      	lsls	r3, r3, #30
 8005ca2:	d413      	bmi.n	8005ccc <_printf_i+0x22c>
 8005ca4:	68e0      	ldr	r0, [r4, #12]
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	4298      	cmp	r0, r3
 8005caa:	bfb8      	it	lt
 8005cac:	4618      	movlt	r0, r3
 8005cae:	e7a6      	b.n	8005bfe <_printf_i+0x15e>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4632      	mov	r2, r6
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	47d0      	blx	sl
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d09d      	beq.n	8005bfa <_printf_i+0x15a>
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	68e3      	ldr	r3, [r4, #12]
 8005cc2:	9903      	ldr	r1, [sp, #12]
 8005cc4:	1a5b      	subs	r3, r3, r1
 8005cc6:	42ab      	cmp	r3, r5
 8005cc8:	dcf2      	bgt.n	8005cb0 <_printf_i+0x210>
 8005cca:	e7eb      	b.n	8005ca4 <_printf_i+0x204>
 8005ccc:	2500      	movs	r5, #0
 8005cce:	f104 0619 	add.w	r6, r4, #25
 8005cd2:	e7f5      	b.n	8005cc0 <_printf_i+0x220>
 8005cd4:	0800625e 	.word	0x0800625e
 8005cd8:	0800626f 	.word	0x0800626f

08005cdc <__sflush_r>:
 8005cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	0716      	lsls	r6, r2, #28
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	d454      	bmi.n	8005d96 <__sflush_r+0xba>
 8005cec:	684b      	ldr	r3, [r1, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dc02      	bgt.n	8005cf8 <__sflush_r+0x1c>
 8005cf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dd48      	ble.n	8005d8a <__sflush_r+0xae>
 8005cf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d045      	beq.n	8005d8a <__sflush_r+0xae>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d04:	682f      	ldr	r7, [r5, #0]
 8005d06:	6a21      	ldr	r1, [r4, #32]
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	d030      	beq.n	8005d6e <__sflush_r+0x92>
 8005d0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	0759      	lsls	r1, r3, #29
 8005d12:	d505      	bpl.n	8005d20 <__sflush_r+0x44>
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d1a:	b10b      	cbz	r3, 8005d20 <__sflush_r+0x44>
 8005d1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d24:	6a21      	ldr	r1, [r4, #32]
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b0      	blx	r6
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	d106      	bne.n	8005d3e <__sflush_r+0x62>
 8005d30:	6829      	ldr	r1, [r5, #0]
 8005d32:	291d      	cmp	r1, #29
 8005d34:	d82b      	bhi.n	8005d8e <__sflush_r+0xb2>
 8005d36:	4a2a      	ldr	r2, [pc, #168]	@ (8005de0 <__sflush_r+0x104>)
 8005d38:	40ca      	lsrs	r2, r1
 8005d3a:	07d6      	lsls	r6, r2, #31
 8005d3c:	d527      	bpl.n	8005d8e <__sflush_r+0xb2>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	6062      	str	r2, [r4, #4]
 8005d42:	04d9      	lsls	r1, r3, #19
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	6022      	str	r2, [r4, #0]
 8005d48:	d504      	bpl.n	8005d54 <__sflush_r+0x78>
 8005d4a:	1c42      	adds	r2, r0, #1
 8005d4c:	d101      	bne.n	8005d52 <__sflush_r+0x76>
 8005d4e:	682b      	ldr	r3, [r5, #0]
 8005d50:	b903      	cbnz	r3, 8005d54 <__sflush_r+0x78>
 8005d52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d56:	602f      	str	r7, [r5, #0]
 8005d58:	b1b9      	cbz	r1, 8005d8a <__sflush_r+0xae>
 8005d5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	d002      	beq.n	8005d68 <__sflush_r+0x8c>
 8005d62:	4628      	mov	r0, r5
 8005d64:	f7ff fa94 	bl	8005290 <_free_r>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d6c:	e00d      	b.n	8005d8a <__sflush_r+0xae>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b0      	blx	r6
 8005d74:	4602      	mov	r2, r0
 8005d76:	1c50      	adds	r0, r2, #1
 8005d78:	d1c9      	bne.n	8005d0e <__sflush_r+0x32>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0c6      	beq.n	8005d0e <__sflush_r+0x32>
 8005d80:	2b1d      	cmp	r3, #29
 8005d82:	d001      	beq.n	8005d88 <__sflush_r+0xac>
 8005d84:	2b16      	cmp	r3, #22
 8005d86:	d11e      	bne.n	8005dc6 <__sflush_r+0xea>
 8005d88:	602f      	str	r7, [r5, #0]
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e022      	b.n	8005dd4 <__sflush_r+0xf8>
 8005d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	e01b      	b.n	8005dce <__sflush_r+0xf2>
 8005d96:	690f      	ldr	r7, [r1, #16]
 8005d98:	2f00      	cmp	r7, #0
 8005d9a:	d0f6      	beq.n	8005d8a <__sflush_r+0xae>
 8005d9c:	0793      	lsls	r3, r2, #30
 8005d9e:	680e      	ldr	r6, [r1, #0]
 8005da0:	bf08      	it	eq
 8005da2:	694b      	ldreq	r3, [r1, #20]
 8005da4:	600f      	str	r7, [r1, #0]
 8005da6:	bf18      	it	ne
 8005da8:	2300      	movne	r3, #0
 8005daa:	eba6 0807 	sub.w	r8, r6, r7
 8005dae:	608b      	str	r3, [r1, #8]
 8005db0:	f1b8 0f00 	cmp.w	r8, #0
 8005db4:	dde9      	ble.n	8005d8a <__sflush_r+0xae>
 8005db6:	6a21      	ldr	r1, [r4, #32]
 8005db8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005dba:	4643      	mov	r3, r8
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b0      	blx	r6
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	dc08      	bgt.n	8005dd8 <__sflush_r+0xfc>
 8005dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd8:	4407      	add	r7, r0
 8005dda:	eba8 0800 	sub.w	r8, r8, r0
 8005dde:	e7e7      	b.n	8005db0 <__sflush_r+0xd4>
 8005de0:	20400001 	.word	0x20400001

08005de4 <_fflush_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	690b      	ldr	r3, [r1, #16]
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	b913      	cbnz	r3, 8005df4 <_fflush_r+0x10>
 8005dee:	2500      	movs	r5, #0
 8005df0:	4628      	mov	r0, r5
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	b118      	cbz	r0, 8005dfe <_fflush_r+0x1a>
 8005df6:	6a03      	ldr	r3, [r0, #32]
 8005df8:	b90b      	cbnz	r3, 8005dfe <_fflush_r+0x1a>
 8005dfa:	f7fe ffab 	bl	8004d54 <__sinit>
 8005dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f3      	beq.n	8005dee <_fflush_r+0xa>
 8005e06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e08:	07d0      	lsls	r0, r2, #31
 8005e0a:	d404      	bmi.n	8005e16 <_fflush_r+0x32>
 8005e0c:	0599      	lsls	r1, r3, #22
 8005e0e:	d402      	bmi.n	8005e16 <_fflush_r+0x32>
 8005e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e12:	f7ff fa14 	bl	800523e <__retarget_lock_acquire_recursive>
 8005e16:	4628      	mov	r0, r5
 8005e18:	4621      	mov	r1, r4
 8005e1a:	f7ff ff5f 	bl	8005cdc <__sflush_r>
 8005e1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e20:	07da      	lsls	r2, r3, #31
 8005e22:	4605      	mov	r5, r0
 8005e24:	d4e4      	bmi.n	8005df0 <_fflush_r+0xc>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	059b      	lsls	r3, r3, #22
 8005e2a:	d4e1      	bmi.n	8005df0 <_fflush_r+0xc>
 8005e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e2e:	f7ff fa07 	bl	8005240 <__retarget_lock_release_recursive>
 8005e32:	e7dd      	b.n	8005df0 <_fflush_r+0xc>

08005e34 <fiprintf>:
 8005e34:	b40e      	push	{r1, r2, r3}
 8005e36:	b503      	push	{r0, r1, lr}
 8005e38:	4601      	mov	r1, r0
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	4805      	ldr	r0, [pc, #20]	@ (8005e54 <fiprintf+0x20>)
 8005e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	f7ff fca5 	bl	8005794 <_vfiprintf_r>
 8005e4a:	b002      	add	sp, #8
 8005e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e50:	b003      	add	sp, #12
 8005e52:	4770      	bx	lr
 8005e54:	20000018 	.word	0x20000018

08005e58 <__swhatbuf_r>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e60:	2900      	cmp	r1, #0
 8005e62:	b096      	sub	sp, #88	@ 0x58
 8005e64:	4615      	mov	r5, r2
 8005e66:	461e      	mov	r6, r3
 8005e68:	da0d      	bge.n	8005e86 <__swhatbuf_r+0x2e>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2340      	movne	r3, #64	@ 0x40
 8005e78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	6031      	str	r1, [r6, #0]
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	b016      	add	sp, #88	@ 0x58
 8005e84:	bd70      	pop	{r4, r5, r6, pc}
 8005e86:	466a      	mov	r2, sp
 8005e88:	f000 f862 	bl	8005f50 <_fstat_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	dbec      	blt.n	8005e6a <__swhatbuf_r+0x12>
 8005e90:	9901      	ldr	r1, [sp, #4]
 8005e92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e9a:	4259      	negs	r1, r3
 8005e9c:	4159      	adcs	r1, r3
 8005e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ea2:	e7eb      	b.n	8005e7c <__swhatbuf_r+0x24>

08005ea4 <__smakebuf_r>:
 8005ea4:	898b      	ldrh	r3, [r1, #12]
 8005ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea8:	079d      	lsls	r5, r3, #30
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	d507      	bpl.n	8005ec0 <__smakebuf_r+0x1c>
 8005eb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	6163      	str	r3, [r4, #20]
 8005ebc:	b003      	add	sp, #12
 8005ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec0:	ab01      	add	r3, sp, #4
 8005ec2:	466a      	mov	r2, sp
 8005ec4:	f7ff ffc8 	bl	8005e58 <__swhatbuf_r>
 8005ec8:	9f00      	ldr	r7, [sp, #0]
 8005eca:	4605      	mov	r5, r0
 8005ecc:	4639      	mov	r1, r7
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff fa52 	bl	8005378 <_malloc_r>
 8005ed4:	b948      	cbnz	r0, 8005eea <__smakebuf_r+0x46>
 8005ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eda:	059a      	lsls	r2, r3, #22
 8005edc:	d4ee      	bmi.n	8005ebc <__smakebuf_r+0x18>
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	f043 0302 	orr.w	r3, r3, #2
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	e7e2      	b.n	8005eb0 <__smakebuf_r+0xc>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	6020      	str	r0, [r4, #0]
 8005eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	9b01      	ldr	r3, [sp, #4]
 8005ef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005efa:	b15b      	cbz	r3, 8005f14 <__smakebuf_r+0x70>
 8005efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 f837 	bl	8005f74 <_isatty_r>
 8005f06:	b128      	cbz	r0, 8005f14 <__smakebuf_r+0x70>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	431d      	orrs	r5, r3
 8005f18:	81a5      	strh	r5, [r4, #12]
 8005f1a:	e7cf      	b.n	8005ebc <__smakebuf_r+0x18>

08005f1c <memmove>:
 8005f1c:	4288      	cmp	r0, r1
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	eb01 0402 	add.w	r4, r1, r2
 8005f24:	d902      	bls.n	8005f2c <memmove+0x10>
 8005f26:	4284      	cmp	r4, r0
 8005f28:	4623      	mov	r3, r4
 8005f2a:	d807      	bhi.n	8005f3c <memmove+0x20>
 8005f2c:	1e43      	subs	r3, r0, #1
 8005f2e:	42a1      	cmp	r1, r4
 8005f30:	d008      	beq.n	8005f44 <memmove+0x28>
 8005f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f3a:	e7f8      	b.n	8005f2e <memmove+0x12>
 8005f3c:	4402      	add	r2, r0
 8005f3e:	4601      	mov	r1, r0
 8005f40:	428a      	cmp	r2, r1
 8005f42:	d100      	bne.n	8005f46 <memmove+0x2a>
 8005f44:	bd10      	pop	{r4, pc}
 8005f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f4e:	e7f7      	b.n	8005f40 <memmove+0x24>

08005f50 <_fstat_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	@ (8005f70 <_fstat_r+0x20>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	f7fb fc0d 	bl	800177c <_fstat>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d102      	bne.n	8005f6c <_fstat_r+0x1c>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b103      	cbz	r3, 8005f6c <_fstat_r+0x1c>
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000378 	.word	0x20000378

08005f74 <_isatty_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	@ (8005f90 <_isatty_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fb fc0c 	bl	800179c <_isatty>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_isatty_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_isatty_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20000378 	.word	0x20000378

08005f94 <_sbrk_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d06      	ldr	r5, [pc, #24]	@ (8005fb0 <_sbrk_r+0x1c>)
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	f7fb fc14 	bl	80017cc <_sbrk>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_sbrk_r+0x1a>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_sbrk_r+0x1a>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	20000378 	.word	0x20000378

08005fb4 <memcpy>:
 8005fb4:	440a      	add	r2, r1
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fbc:	d100      	bne.n	8005fc0 <memcpy+0xc>
 8005fbe:	4770      	bx	lr
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	d1f9      	bne.n	8005fc2 <memcpy+0xe>
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <abort>:
 8005fd0:	b508      	push	{r3, lr}
 8005fd2:	2006      	movs	r0, #6
 8005fd4:	f000 f85a 	bl	800608c <raise>
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7fb fb7f 	bl	80016dc <_exit>

08005fde <_realloc_r>:
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	b921      	cbnz	r1, 8005ff4 <_realloc_r+0x16>
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	4611      	mov	r1, r2
 8005ff0:	f7ff b9c2 	b.w	8005378 <_malloc_r>
 8005ff4:	b92a      	cbnz	r2, 8006002 <_realloc_r+0x24>
 8005ff6:	f7ff f94b 	bl	8005290 <_free_r>
 8005ffa:	4625      	mov	r5, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006002:	f000 f85f 	bl	80060c4 <_malloc_usable_size_r>
 8006006:	4284      	cmp	r4, r0
 8006008:	4606      	mov	r6, r0
 800600a:	d802      	bhi.n	8006012 <_realloc_r+0x34>
 800600c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006010:	d8f4      	bhi.n	8005ffc <_realloc_r+0x1e>
 8006012:	4621      	mov	r1, r4
 8006014:	4638      	mov	r0, r7
 8006016:	f7ff f9af 	bl	8005378 <_malloc_r>
 800601a:	4680      	mov	r8, r0
 800601c:	b908      	cbnz	r0, 8006022 <_realloc_r+0x44>
 800601e:	4645      	mov	r5, r8
 8006020:	e7ec      	b.n	8005ffc <_realloc_r+0x1e>
 8006022:	42b4      	cmp	r4, r6
 8006024:	4622      	mov	r2, r4
 8006026:	4629      	mov	r1, r5
 8006028:	bf28      	it	cs
 800602a:	4632      	movcs	r2, r6
 800602c:	f7ff ffc2 	bl	8005fb4 <memcpy>
 8006030:	4629      	mov	r1, r5
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff f92c 	bl	8005290 <_free_r>
 8006038:	e7f1      	b.n	800601e <_realloc_r+0x40>

0800603a <_raise_r>:
 800603a:	291f      	cmp	r1, #31
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	460c      	mov	r4, r1
 8006042:	d904      	bls.n	800604e <_raise_r+0x14>
 8006044:	2316      	movs	r3, #22
 8006046:	6003      	str	r3, [r0, #0]
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006050:	b112      	cbz	r2, 8006058 <_raise_r+0x1e>
 8006052:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006056:	b94b      	cbnz	r3, 800606c <_raise_r+0x32>
 8006058:	4628      	mov	r0, r5
 800605a:	f000 f831 	bl	80060c0 <_getpid_r>
 800605e:	4622      	mov	r2, r4
 8006060:	4601      	mov	r1, r0
 8006062:	4628      	mov	r0, r5
 8006064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006068:	f000 b818 	b.w	800609c <_kill_r>
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00a      	beq.n	8006086 <_raise_r+0x4c>
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	d103      	bne.n	800607c <_raise_r+0x42>
 8006074:	2316      	movs	r3, #22
 8006076:	6003      	str	r3, [r0, #0]
 8006078:	2001      	movs	r0, #1
 800607a:	e7e7      	b.n	800604c <_raise_r+0x12>
 800607c:	2100      	movs	r1, #0
 800607e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006082:	4620      	mov	r0, r4
 8006084:	4798      	blx	r3
 8006086:	2000      	movs	r0, #0
 8006088:	e7e0      	b.n	800604c <_raise_r+0x12>
	...

0800608c <raise>:
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <raise+0xc>)
 800608e:	4601      	mov	r1, r0
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f7ff bfd2 	b.w	800603a <_raise_r>
 8006096:	bf00      	nop
 8006098:	20000018 	.word	0x20000018

0800609c <_kill_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	@ (80060bc <_kill_r+0x20>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	f7fb fb07 	bl	80016bc <_kill>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d102      	bne.n	80060b8 <_kill_r+0x1c>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b103      	cbz	r3, 80060b8 <_kill_r+0x1c>
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	bf00      	nop
 80060bc:	20000378 	.word	0x20000378

080060c0 <_getpid_r>:
 80060c0:	f7fb baf4 	b.w	80016ac <_getpid>

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr
